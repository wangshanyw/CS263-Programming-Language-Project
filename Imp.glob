DIGEST 4abcb9640fe6db910599d685f8a20684
FPL.Imp
R477:508 Coq.Relations.Relation_Operators <> <> lib
R526:559 Coq.Relations.Relation_Definitions <> <> lib
R577:603 Coq.Classes.RelationClasses <> <> lib
R621:641 Coq.Classes.Morphisms <> <> lib
R659:677 Coq.micromega.Psatz <> <> lib
R695:711 Coq.ZArith.ZArith <> <> lib
R729:746 Coq.Strings.String <> <> lib
R764:782 Coq.Logic.Classical <> <> lib
R800:811 PL.RTClosure <> <> lib
R825:839 PL.RTClosure <> clos_refl_trans ind
R825:839 PL.RTClosure <> clos_refl_trans ind
R862:879 PL.RTClosure <> clos_refl_trans_1n ind
R862:879 PL.RTClosure <> clos_refl_trans_1n ind
R902:919 PL.RTClosure <> clos_refl_trans_n1 ind
R902:919 PL.RTClosure <> clos_refl_trans_n1 ind
mod 955:958 <> Func
def 973:975 Func add
binder 978:978 <> A:1
R994:997 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R998:998 Coq.Numbers.BinNums <> Z ind
R993:993 PL.Imp <> A:1 var
binder 988:988 <> f:2
binder 990:990 <> g:3
R1003:1006 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1007:1007 Coq.Numbers.BinNums <> Z ind
R1002:1002 PL.Imp <> A:1 var
binder 1018:1018 <> a:4
R1026:1028 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R1023:1023 PL.Imp <> f:2 var
R1025:1025 PL.Imp <> a:4 var
R1029:1029 PL.Imp <> g:3 var
R1031:1031 PL.Imp <> a:4 var
def 1046:1048 Func sub
binder 1051:1051 <> A:5
R1067:1070 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1071:1071 Coq.Numbers.BinNums <> Z ind
R1066:1066 PL.Imp <> A:5 var
binder 1061:1061 <> f:6
binder 1063:1063 <> g:7
R1076:1079 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1080:1080 Coq.Numbers.BinNums <> Z ind
R1075:1075 PL.Imp <> A:5 var
binder 1091:1091 <> a:8
R1099:1101 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R1096:1096 PL.Imp <> f:6 var
R1098:1098 PL.Imp <> a:8 var
R1102:1102 PL.Imp <> g:7 var
R1104:1104 PL.Imp <> a:8 var
def 1119:1121 Func mul
binder 1124:1124 <> A:9
R1140:1143 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1144:1144 Coq.Numbers.BinNums <> Z ind
R1139:1139 PL.Imp <> A:9 var
binder 1134:1134 <> f:10
binder 1136:1136 <> g:11
R1149:1152 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1153:1153 Coq.Numbers.BinNums <> Z ind
R1148:1148 PL.Imp <> A:9 var
binder 1164:1164 <> a:12
R1172:1174 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R1169:1169 PL.Imp <> f:10 var
R1171:1171 PL.Imp <> a:12 var
R1175:1175 PL.Imp <> g:11 var
R1177:1177 PL.Imp <> a:12 var
def 1192:1198 Func test_eq
binder 1201:1201 <> A:13
R1217:1220 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1221:1221 Coq.Numbers.BinNums <> Z ind
R1216:1216 PL.Imp <> A:13 var
binder 1211:1211 <> f:14
binder 1213:1213 <> g:15
R1226:1229 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1225:1225 PL.Imp <> A:13 var
binder 1244:1244 <> a:16
R1252:1254 Coq.Init.Logic <> ::type_scope:x_'='_x not
R1249:1249 PL.Imp <> f:14 var
R1251:1251 PL.Imp <> a:16 var
R1255:1255 PL.Imp <> g:15 var
R1257:1257 PL.Imp <> a:16 var
def 1272:1278 Func test_le
binder 1281:1281 <> A:17
R1297:1300 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1301:1301 Coq.Numbers.BinNums <> Z ind
R1296:1296 PL.Imp <> A:17 var
binder 1291:1291 <> f:18
binder 1293:1293 <> g:19
R1306:1309 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1305:1305 PL.Imp <> A:17 var
binder 1324:1324 <> a:20
R1332:1335 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R1329:1329 PL.Imp <> f:18 var
R1331:1331 PL.Imp <> a:20 var
R1336:1336 PL.Imp <> g:19 var
R1338:1338 PL.Imp <> a:20 var
def 1353:1357 Func equiv
binder 1360:1360 <> A:21
R1376:1379 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1380:1380 Coq.Numbers.BinNums <> Z ind
R1375:1375 PL.Imp <> A:21 var
binder 1370:1370 <> f:22
binder 1372:1372 <> g:23
binder 1401:1401 <> a:24
R1407:1409 Coq.Init.Logic <> ::type_scope:x_'='_x not
R1404:1404 PL.Imp <> f:22 var
R1406:1406 PL.Imp <> a:24 var
R1410:1410 PL.Imp <> g:23 var
R1412:1412 PL.Imp <> a:24 var
def 1427:1428 Func le
binder 1431:1431 <> A:25
R1447:1450 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1451:1451 Coq.Numbers.BinNums <> Z ind
R1446:1446 PL.Imp <> A:25 var
binder 1441:1441 <> f:26
binder 1443:1443 <> g:27
binder 1472:1472 <> a:28
R1478:1481 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R1475:1475 PL.Imp <> f:26 var
R1477:1477 PL.Imp <> a:28 var
R1482:1482 PL.Imp <> g:27 var
R1484:1484 PL.Imp <> a:28 var
R1492:1495 PL.Imp Func <> mod
mod 1506:1509 <> Sets
def 1524:1527 Sets full
binder 1530:1530 <> A:29
R1541:1544 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1540:1540 PL.Imp <> A:29 var
R1562:1565 Coq.Init.Logic <> True ind
def 1580:1584 Sets empty
binder 1587:1587 <> A:30
R1598:1601 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1597:1597 PL.Imp <> A:30 var
R1619:1623 Coq.Init.Logic <> False ind
def 1638:1646 Sets intersect
binder 1649:1649 <> A:31
R1665:1668 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1664:1664 PL.Imp <> A:31 var
binder 1659:1659 <> X:32
binder 1661:1661 <> Y:33
binder 1682:1682 <> a:34
R1690:1693 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R1687:1687 PL.Imp <> X:32 var
R1689:1689 PL.Imp <> a:34 var
R1694:1694 PL.Imp <> Y:33 var
R1696:1696 PL.Imp <> a:34 var
def 1711:1720 Sets complement
binder 1723:1723 <> A:35
R1737:1740 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1736:1736 PL.Imp <> A:35 var
binder 1733:1733 <> X:36
binder 1754:1754 <> a:37
R1759:1760 Coq.Init.Logic <> ::type_scope:'~'_x not
R1761:1761 PL.Imp <> X:36 var
R1763:1763 PL.Imp <> a:37 var
def 1778:1782 Sets equiv
binder 1785:1785 <> A:38
R1801:1804 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1800:1800 PL.Imp <> A:38 var
binder 1795:1795 <> X:39
binder 1797:1797 <> Y:40
binder 1829:1829 <> a:41
R1835:1839 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R1832:1832 PL.Imp <> X:39 var
R1834:1834 PL.Imp <> a:41 var
R1840:1840 PL.Imp <> Y:40 var
R1842:1842 PL.Imp <> a:41 var
R1850:1853 PL.Imp Sets <> mod
R1940:1947 PL.Imp <> add def
not 1928:1928 <> ::func_scope:x_'+'_x
R1988:1995 PL.Imp <> sub def
not 1976:1976 <> ::func_scope:x_'-'_x
R2036:2043 PL.Imp <> mul def
not 2024:2024 <> ::func_scope:x_'*'_x
prf 2070:2084 <> Func_equiv_refl
binder 2094:2094 <> A:42
R2097:2105 Coq.Classes.RelationClasses <> Reflexive class
R2109:2118 PL.Imp <> equiv def
R2120:2120 PL.Imp <> A:42 var
R2150:2158 Coq.Classes.RelationClasses <> Reflexive class
R2170:2179 PL.Imp <> equiv def
prf 2219:2232 <> Func_equiv_sym
binder 2242:2242 <> A:43
R2245:2253 Coq.Classes.RelationClasses <> Symmetric class
R2257:2266 PL.Imp <> equiv def
R2268:2268 PL.Imp <> A:43 var
R2298:2306 Coq.Classes.RelationClasses <> Symmetric class
R2318:2327 PL.Imp <> equiv def
prf 2380:2395 <> Func_equiv_trans
binder 2405:2405 <> A:44
R2408:2417 Coq.Classes.RelationClasses <> Transitive class
R2421:2430 PL.Imp <> equiv def
R2432:2432 PL.Imp <> A:44 var
R2462:2471 Coq.Classes.RelationClasses <> Transitive class
R2483:2492 PL.Imp <> equiv def
prf 2549:2563 <> Sets_equiv_refl
binder 2573:2573 <> A:45
R2576:2584 Coq.Classes.RelationClasses <> Reflexive class
R2588:2597 PL.Imp <> equiv def
R2599:2599 PL.Imp <> A:45 var
R2629:2637 Coq.Classes.RelationClasses <> Reflexive class
R2649:2658 PL.Imp <> equiv def
prf 2692:2705 <> Sets_equiv_sym
binder 2715:2715 <> A:46
R2718:2726 Coq.Classes.RelationClasses <> Symmetric class
R2730:2739 PL.Imp <> equiv def
R2741:2741 PL.Imp <> A:46 var
R2771:2779 Coq.Classes.RelationClasses <> Symmetric class
R2791:2800 PL.Imp <> equiv def
prf 2853:2868 <> Sets_equiv_trans
binder 2878:2878 <> A:47
R2881:2890 Coq.Classes.RelationClasses <> Transitive class
R2894:2903 PL.Imp <> equiv def
R2905:2905 PL.Imp <> A:47 var
R2935:2944 Coq.Classes.RelationClasses <> Transitive class
R2956:2965 PL.Imp <> equiv def
prf 3022:3035 <> Func_add_equiv
binder 3045:3045 <> A:48
R3050:3055 Coq.Classes.Morphisms <> Proper class
R3109:3116 PL.Imp <> add def
R3071:3075 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R3059:3068 PL.Imp <> equiv def
R3070:3070 PL.Imp <> A:48 var
R3089:3093 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R3077:3086 PL.Imp <> equiv def
R3088:3088 PL.Imp <> A:48 var
R3095:3104 PL.Imp <> equiv def
R3106:3106 PL.Imp <> A:48 var
R3145:3150 Coq.Classes.Morphisms <> Proper class
R3153:3162 Coq.Classes.Morphisms <> respectful def
R3200:3209 PL.Imp <> equiv def
R3226:3235 PL.Imp <> equiv def
R3253:3262 PL.Imp <> equiv def
R3284:3291 PL.Imp <> add def
prf 3338:3351 <> Func_sub_equiv
binder 3361:3361 <> A:49
R3366:3371 Coq.Classes.Morphisms <> Proper class
R3425:3432 PL.Imp <> sub def
R3387:3391 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R3375:3384 PL.Imp <> equiv def
R3386:3386 PL.Imp <> A:49 var
R3405:3409 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R3393:3402 PL.Imp <> equiv def
R3404:3404 PL.Imp <> A:49 var
R3411:3420 PL.Imp <> equiv def
R3422:3422 PL.Imp <> A:49 var
R3461:3466 Coq.Classes.Morphisms <> Proper class
R3469:3478 Coq.Classes.Morphisms <> respectful def
R3516:3525 PL.Imp <> equiv def
R3542:3551 PL.Imp <> equiv def
R3569:3578 PL.Imp <> equiv def
R3600:3607 PL.Imp <> sub def
prf 3654:3667 <> Func_mul_equiv
binder 3677:3677 <> A:50
R3682:3687 Coq.Classes.Morphisms <> Proper class
R3741:3748 PL.Imp <> mul def
R3703:3707 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R3691:3700 PL.Imp <> equiv def
R3702:3702 PL.Imp <> A:50 var
R3721:3725 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R3709:3718 PL.Imp <> equiv def
R3720:3720 PL.Imp <> A:50 var
R3727:3736 PL.Imp <> equiv def
R3738:3738 PL.Imp <> A:50 var
R3777:3782 Coq.Classes.Morphisms <> Proper class
R3785:3794 Coq.Classes.Morphisms <> respectful def
R3832:3841 PL.Imp <> equiv def
R3858:3867 PL.Imp <> equiv def
R3885:3894 PL.Imp <> equiv def
R3916:3923 PL.Imp <> mul def
prf 3970:3987 <> Func_test_eq_equiv
binder 3997:3997 <> A:51
R4002:4007 Coq.Classes.Morphisms <> Proper class
R4061:4072 PL.Imp <> test_eq def
R4023:4027 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R4011:4020 PL.Imp <> equiv def
R4022:4022 PL.Imp <> A:51 var
R4041:4045 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R4029:4038 PL.Imp <> equiv def
R4040:4040 PL.Imp <> A:51 var
R4047:4056 PL.Imp <> equiv def
R4058:4058 PL.Imp <> A:51 var
R4091:4096 Coq.Classes.Morphisms <> Proper class
R4099:4108 Coq.Classes.Morphisms <> respectful def
R4120:4129 PL.Imp <> equiv def
R4132:4141 PL.Imp <> equiv def
R4144:4155 PL.Imp <> test_eq def
prf 4240:4257 <> Func_test_le_equiv
binder 4267:4267 <> A:52
R4272:4277 Coq.Classes.Morphisms <> Proper class
R4331:4342 PL.Imp <> test_le def
R4293:4297 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R4281:4290 PL.Imp <> equiv def
R4292:4292 PL.Imp <> A:52 var
R4311:4315 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R4299:4308 PL.Imp <> equiv def
R4310:4310 PL.Imp <> A:52 var
R4317:4326 PL.Imp <> equiv def
R4328:4328 PL.Imp <> A:52 var
R4361:4366 Coq.Classes.Morphisms <> Proper class
R4369:4378 Coq.Classes.Morphisms <> respectful def
R4390:4399 PL.Imp <> equiv def
R4402:4411 PL.Imp <> equiv def
R4414:4425 PL.Imp <> test_le def
prf 4510:4529 <> Sets_intersect_equiv
binder 4539:4539 <> A:53
R4544:4549 Coq.Classes.Morphisms <> Proper class
R4603:4616 PL.Imp <> intersect def
R4565:4569 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R4553:4562 PL.Imp <> equiv def
R4564:4564 PL.Imp <> A:53 var
R4583:4587 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R4571:4580 PL.Imp <> equiv def
R4582:4582 PL.Imp <> A:53 var
R4589:4598 PL.Imp <> equiv def
R4600:4600 PL.Imp <> A:53 var
R4635:4640 Coq.Classes.Morphisms <> Proper class
R4643:4652 Coq.Classes.Morphisms <> respectful def
R4664:4673 PL.Imp <> equiv def
R4676:4689 PL.Imp <> intersect def
prf 4774:4794 <> Sets_complement_equiv
binder 4804:4804 <> A:54
R4809:4814 Coq.Classes.Morphisms <> Proper class
R4850:4864 PL.Imp <> complement def
R4830:4834 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R4818:4827 PL.Imp <> equiv def
R4829:4829 PL.Imp <> A:54 var
R4836:4845 PL.Imp <> equiv def
R4847:4847 PL.Imp <> A:54 var
R4883:4888 Coq.Classes.Morphisms <> Proper class
R4891:4900 Coq.Classes.Morphisms <> respectful def
R4912:4921 PL.Imp <> equiv def
R4924:4938 PL.Imp <> complement def
prf 5011:5036 <> Sets_complement_complement
binder 5046:5046 <> A:55
R5053:5056 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5052:5052 PL.Imp <> A:55 var
binder 5049:5049 <> S:56
R5066:5075 PL.Imp <> equiv def
R5115:5115 PL.Imp <> S:56 var
R5078:5092 PL.Imp <> complement def
R5095:5109 PL.Imp <> complement def
R5111:5111 PL.Imp <> S:56 var
R5144:5153 PL.Imp <> equiv def
R5156:5170 PL.Imp <> complement def
mod 5678:5683 <> BinRel
def 5698:5699 BinRel id
binder 5702:5702 <> A:57
R5713:5716 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5718:5721 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5717:5717 PL.Imp <> A:57 var
R5712:5712 PL.Imp <> A:57 var
binder 5734:5734 <> a:58
binder 5736:5736 <> b:59
R5742:5744 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5741:5741 PL.Imp <> a:58 var
R5745:5745 PL.Imp <> b:59 var
def 5760:5764 BinRel empty
binder 5767:5767 <> A:60
binder 5769:5769 <> B:61
R5780:5783 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5785:5788 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5784:5784 PL.Imp <> B:61 var
R5779:5779 PL.Imp <> A:60 var
binder 5801:5801 <> a:62
binder 5803:5803 <> b:63
R5808:5812 Coq.Init.Logic <> False ind
def 5827:5832 BinRel concat
binder 5835:5835 <> A:64
binder 5837:5837 <> B:65
binder 5839:5839 <> C:66
R5854:5857 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5859:5862 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5858:5858 PL.Imp <> B:65 var
R5853:5853 PL.Imp <> A:64 var
binder 5849:5850 <> r1:67
R5875:5878 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5880:5883 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5879:5879 PL.Imp <> C:66 var
R5874:5874 PL.Imp <> B:65 var
binder 5870:5871 <> r2:68
R5892:5895 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5897:5900 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5896:5896 PL.Imp <> C:66 var
R5891:5891 PL.Imp <> A:64 var
binder 5915:5915 <> a:69
binder 5917:5917 <> c:70
R5922:5928 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R5930:5931 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 5929:5929 <> b:71
R5938:5941 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R5932:5933 PL.Imp <> r1:67 var
R5937:5937 PL.Imp <> b:71 var
R5935:5935 PL.Imp <> a:69 var
R5942:5943 PL.Imp <> r2:68 var
R5947:5947 PL.Imp <> c:70 var
R5945:5945 PL.Imp <> b:71 var
def 5962:5968 BinRel filter1
binder 5971:5971 <> A:72
binder 5973:5973 <> B:73
R5987:5990 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5986:5986 PL.Imp <> A:72 var
binder 5983:5983 <> f:74
R5999:6002 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6004:6007 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6003:6003 PL.Imp <> B:73 var
R5998:5998 PL.Imp <> A:72 var
binder 6022:6022 <> a:75
binder 6024:6024 <> b:76
R6029:6029 PL.Imp <> f:74 var
R6031:6031 PL.Imp <> a:75 var
def 6046:6052 BinRel filter2
binder 6055:6055 <> A:77
binder 6057:6057 <> B:78
R6071:6074 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6070:6070 PL.Imp <> B:78 var
binder 6067:6067 <> f:79
R6083:6086 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6088:6091 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6087:6087 PL.Imp <> B:78 var
R6082:6082 PL.Imp <> A:77 var
binder 6106:6106 <> a:80
binder 6108:6108 <> b:81
R6113:6113 PL.Imp <> f:79 var
R6115:6115 PL.Imp <> b:81 var
def 6130:6134 BinRel union
binder 6137:6137 <> A:82
binder 6139:6139 <> B:83
R6157:6160 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6162:6165 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6161:6161 PL.Imp <> B:83 var
R6156:6156 PL.Imp <> A:82 var
binder 6149:6150 <> r1:84
binder 6152:6153 <> r2:85
R6174:6177 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6179:6182 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6178:6178 PL.Imp <> B:83 var
R6173:6173 PL.Imp <> A:82 var
binder 6197:6197 <> a:86
binder 6199:6199 <> b:87
R6210:6213 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R6204:6205 PL.Imp <> r1:84 var
R6209:6209 PL.Imp <> b:87 var
R6207:6207 PL.Imp <> a:86 var
R6214:6215 PL.Imp <> r2:85 var
R6219:6219 PL.Imp <> b:87 var
R6217:6217 PL.Imp <> a:86 var
def 6234:6245 BinRel intersection
binder 6248:6248 <> A:88
binder 6250:6250 <> B:89
R6268:6271 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6273:6276 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6272:6272 PL.Imp <> B:89 var
R6267:6267 PL.Imp <> A:88 var
binder 6260:6261 <> r1:90
binder 6263:6264 <> r2:91
R6285:6288 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6290:6293 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6289:6289 PL.Imp <> B:89 var
R6284:6284 PL.Imp <> A:88 var
binder 6308:6308 <> a:92
binder 6310:6310 <> b:93
R6321:6324 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R6315:6316 PL.Imp <> r1:90 var
R6320:6320 PL.Imp <> b:93 var
R6318:6318 PL.Imp <> a:92 var
R6325:6326 PL.Imp <> r2:91 var
R6330:6330 PL.Imp <> b:93 var
R6328:6328 PL.Imp <> a:92 var
def 6345:6355 BinRel omega_union
binder 6358:6358 <> A:94
binder 6360:6360 <> B:95
R6377:6380 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6382:6385 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6387:6390 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6386:6386 PL.Imp <> B:95 var
R6381:6381 PL.Imp <> A:94 var
R6374:6376 Coq.Init.Datatypes <> nat ind
binder 6370:6371 <> rs:96
R6399:6402 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6404:6407 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6403:6403 PL.Imp <> B:95 var
R6398:6398 PL.Imp <> A:94 var
binder 6422:6424 <> st1:97
binder 6426:6428 <> st2:98
R6433:6439 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R6441:6442 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 6440:6440 <> n:99
R6443:6444 PL.Imp <> rs:96 var
R6452:6454 PL.Imp <> st2:98 var
R6448:6450 PL.Imp <> st1:97 var
R6446:6446 PL.Imp <> n:99 var
def 6469:6476 BinRel test_rel
binder 6479:6479 <> A:100
R6487:6490 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6486:6486 PL.Imp <> A:100 var
binder 6483:6483 <> X:101
R6499:6502 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6504:6507 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6503:6503 PL.Imp <> A:100 var
R6498:6498 PL.Imp <> A:100 var
binder 6522:6524 <> st1:102
binder 6526:6528 <> st2:103
R6542:6545 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R6536:6538 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6533:6535 PL.Imp <> st1:102 var
R6539:6541 PL.Imp <> st2:103 var
R6546:6546 PL.Imp <> X:101 var
R6548:6550 PL.Imp <> st1:102 var
def 6565:6569 BinRel equiv
binder 6572:6572 <> A:104
binder 6574:6574 <> B:105
R6592:6595 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6597:6600 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6596:6596 PL.Imp <> B:105 var
R6591:6591 PL.Imp <> A:104 var
binder 6584:6585 <> r1:106
binder 6587:6588 <> r2:107
binder 6625:6625 <> a:108
binder 6627:6627 <> b:109
R6636:6640 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R6630:6631 PL.Imp <> r1:106 var
R6635:6635 PL.Imp <> b:109 var
R6633:6633 PL.Imp <> a:108 var
R6641:6642 PL.Imp <> r2:107 var
R6646:6646 PL.Imp <> b:109 var
R6644:6644 PL.Imp <> a:108 var
def 6661:6662 BinRel le
binder 6665:6665 <> A:110
binder 6667:6667 <> B:111
R6685:6688 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6690:6693 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6689:6689 PL.Imp <> B:111 var
R6684:6684 PL.Imp <> A:110 var
binder 6677:6678 <> r1:112
binder 6680:6681 <> r2:113
binder 6718:6718 <> a:114
binder 6720:6720 <> b:115
R6729:6732 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6733:6734 PL.Imp <> r2:113 var
R6738:6738 PL.Imp <> b:115 var
R6736:6736 PL.Imp <> a:114 var
R6723:6724 PL.Imp <> r1:112 var
R6728:6728 PL.Imp <> b:115 var
R6726:6726 PL.Imp <> a:114 var
R6746:6751 PL.Imp BinRel <> mod
prf 6761:6774 <> Rel_equiv_refl
binder 6784:6784 <> A:116
binder 6786:6786 <> B:117
R6789:6797 Coq.Classes.RelationClasses <> Reflexive class
R6801:6812 PL.Imp <> equiv def
R6816:6816 PL.Imp <> B:117 var
R6814:6814 PL.Imp <> A:116 var
R6836:6844 Coq.Classes.RelationClasses <> Reflexive class
R6847:6858 PL.Imp <> equiv def
prf 6898:6910 <> Rel_equiv_sym
binder 6920:6920 <> A:118
binder 6922:6922 <> B:119
R6925:6933 Coq.Classes.RelationClasses <> Symmetric class
R6937:6948 PL.Imp <> equiv def
R6952:6952 PL.Imp <> B:119 var
R6950:6950 PL.Imp <> A:118 var
R6972:6980 Coq.Classes.RelationClasses <> Symmetric class
R6983:6994 PL.Imp <> equiv def
prf 7047:7061 <> Rel_equiv_trans
binder 7071:7071 <> A:120
binder 7073:7073 <> B:121
R7076:7085 Coq.Classes.RelationClasses <> Transitive class
R7089:7100 PL.Imp <> equiv def
R7104:7104 PL.Imp <> B:121 var
R7102:7102 PL.Imp <> A:120 var
R7124:7133 Coq.Classes.RelationClasses <> Transitive class
R7136:7147 PL.Imp <> equiv def
prf 7204:7221 <> Rel_equiv_test_rel
binder 7231:7231 <> A:122
R7236:7241 Coq.Classes.Morphisms <> Proper class
R7281:7295 PL.Imp <> test_rel def
R7257:7261 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R7245:7254 PL.Imp <> equiv def
R7256:7256 PL.Imp <> A:122 var
R7263:7274 PL.Imp <> equiv def
R7278:7278 PL.Imp <> A:122 var
R7276:7276 PL.Imp <> A:122 var
R7314:7319 Coq.Classes.Morphisms <> Proper class
R7322:7331 Coq.Classes.Morphisms <> respectful def
R7343:7352 PL.Imp <> equiv def
R7355:7366 PL.Imp <> equiv def
R7369:7383 PL.Imp <> test_rel def
prf 7454:7469 <> Rel_equiv_concat
binder 7479:7479 <> A:123
R7484:7489 Coq.Classes.Morphisms <> Proper class
R7555:7567 PL.Imp <> concat def
R7509:7513 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R7493:7504 PL.Imp <> equiv def
R7508:7508 PL.Imp <> A:123 var
R7506:7506 PL.Imp <> A:123 var
R7531:7535 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R7515:7526 PL.Imp <> equiv def
R7530:7530 PL.Imp <> A:123 var
R7528:7528 PL.Imp <> A:123 var
R7537:7548 PL.Imp <> equiv def
R7552:7552 PL.Imp <> A:123 var
R7550:7550 PL.Imp <> A:123 var
R7586:7591 Coq.Classes.Morphisms <> Proper class
R7594:7603 Coq.Classes.Morphisms <> respectful def
R7615:7626 PL.Imp <> equiv def
R7629:7641 PL.Imp <> concat def
R7695:7697 Coq.Init.Logic <> iff def
prf 7859:7873 <> Rel_equiv_union
binder 7883:7883 <> A:124
R7888:7893 Coq.Classes.Morphisms <> Proper class
R7959:7970 PL.Imp <> union def
R7913:7917 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R7897:7908 PL.Imp <> equiv def
R7912:7912 PL.Imp <> A:124 var
R7910:7910 PL.Imp <> A:124 var
R7935:7939 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R7919:7930 PL.Imp <> equiv def
R7934:7934 PL.Imp <> A:124 var
R7932:7932 PL.Imp <> A:124 var
R7941:7952 PL.Imp <> equiv def
R7956:7956 PL.Imp <> A:124 var
R7954:7954 PL.Imp <> A:124 var
R7989:7994 Coq.Classes.Morphisms <> Proper class
R7997:8006 Coq.Classes.Morphisms <> respectful def
R8018:8029 PL.Imp <> equiv def
R8032:8043 PL.Imp <> union def
prf 8128:8148 <> Rel_equiv_omega_union
binder 8158:8158 <> A:125
binder 8160:8160 <> B:126
R8173:8176 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8178:8181 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8183:8186 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8182:8182 PL.Imp <> B:126 var
R8177:8177 PL.Imp <> A:125 var
R8170:8172 Coq.Init.Datatypes <> nat ind
binder 8163:8164 <> r1:127
binder 8166:8167 <> r2:128
R8196:8196 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8233:8239 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8240:8251 PL.Imp <> equiv def
R8278:8295 PL.Imp <> omega_union def
R8297:8298 PL.Imp <> r2:128 var
R8254:8271 PL.Imp <> omega_union def
R8273:8274 PL.Imp <> r1:127 var
binder 8204:8204 <> n:129
R8207:8218 PL.Imp <> equiv def
R8228:8229 PL.Imp <> r2:128 var
R8231:8231 PL.Imp <> n:129 var
R8221:8222 PL.Imp <> r1:127 var
R8224:8224 PL.Imp <> n:129 var
R8318:8329 PL.Imp <> equiv def
R8332:8349 PL.Imp <> omega_union def
R8371:8373 Coq.Init.Logic <> iff def
prf 8501:8516 <> Rel_equiv_Rel_le
binder 8526:8526 <> A:130
binder 8528:8528 <> B:131
R8539:8542 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8544:8547 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8543:8543 PL.Imp <> B:131 var
R8538:8538 PL.Imp <> A:130 var
binder 8531:8532 <> r1:132
binder 8534:8535 <> r2:133
R8575:8579 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R8557:8568 PL.Imp <> equiv def
R8573:8574 PL.Imp <> r2:133 var
R8570:8571 PL.Imp <> r1:132 var
R8595:8598 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R8580:8588 PL.Imp <> le def
R8593:8594 PL.Imp <> r2:133 var
R8590:8591 PL.Imp <> r1:132 var
R8599:8607 PL.Imp <> le def
R8612:8613 PL.Imp <> r1:132 var
R8609:8610 PL.Imp <> r2:133 var
R8632:8643 PL.Imp <> equiv def
R8646:8654 PL.Imp <> le def
R8676:8678 Coq.Init.Logic <> iff def
R8771:8773 Coq.Init.Logic <> iff def
prf 8826:8835 <> union_comm
binder 8845:8845 <> A:134
binder 8847:8847 <> B:135
R8858:8861 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8863:8866 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8862:8862 PL.Imp <> B:135 var
R8857:8857 PL.Imp <> A:134 var
binder 8850:8851 <> r1:136
binder 8853:8854 <> r2:137
R8876:8887 PL.Imp <> equiv def
R8911:8922 PL.Imp <> union def
R8927:8928 PL.Imp <> r1:136 var
R8924:8925 PL.Imp <> r2:137 var
R8890:8901 PL.Imp <> union def
R8906:8907 PL.Imp <> r2:137 var
R8903:8904 PL.Imp <> r1:136 var
R8958:8969 PL.Imp <> equiv def
R8972:8983 PL.Imp <> union def
prf 9017:9032 <> Rel_concat_assoc
binder 9044:9044 <> A:138
binder 9046:9046 <> B:139
binder 9048:9048 <> C:140
binder 9050:9050 <> D:141
R9058:9061 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9063:9066 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9062:9062 PL.Imp <> B:139 var
R9057:9057 PL.Imp <> A:138 var
binder 9053:9054 <> R1:142
R9079:9082 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9084:9087 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9083:9083 PL.Imp <> C:140 var
R9078:9078 PL.Imp <> B:139 var
binder 9074:9075 <> R2:143
R9100:9103 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9105:9108 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9104:9104 PL.Imp <> D:141 var
R9099:9099 PL.Imp <> C:140 var
binder 9095:9096 <> R3:144
R9118:9129 PL.Imp <> equiv def
R9181:9193 PL.Imp <> concat def
R9199:9211 PL.Imp <> concat def
R9216:9217 PL.Imp <> R3:144 var
R9213:9214 PL.Imp <> R2:143 var
R9195:9196 PL.Imp <> R1:142 var
R9136:9148 PL.Imp <> concat def
R9172:9173 PL.Imp <> R3:144 var
R9151:9163 PL.Imp <> concat def
R9168:9169 PL.Imp <> R2:143 var
R9165:9166 PL.Imp <> R1:142 var
R9238:9249 PL.Imp <> equiv def
R9252:9264 PL.Imp <> concat def
def 9865:9867 <> var
R9878:9880 Coq.Init.Datatypes <> nat ind
ind 9894:9897 <> aexp
constr 9913:9916 <> ANum
constr 9930:9932 <> AId
constr 9948:9952 <> APlus
constr 9973:9978 <> AMinus
constr 9999:10003 <> AMult
R9923:9923 Coq.Numbers.BinNums <> Z ind
binder 9919:9919 <> n:147
R9939:9941 PL.Imp <> var def
binder 9935:9935 <> X:148
R9963:9966 PL.Imp <> aexp:145 ind
binder 9955:9956 <> a1:149
binder 9958:9959 <> a2:150
R9989:9992 PL.Imp <> aexp:145 ind
binder 9981:9982 <> a1:151
binder 9984:9985 <> a2:152
R10014:10017 PL.Imp <> aexp:145 ind
binder 10006:10007 <> a1:153
binder 10009:10010 <> a2:154
ind 10032:10035 <> bexp
constr 10051:10055 <> BTrue
constr 10061:10066 <> BFalse
constr 10072:10074 <> BEq
constr 10095:10097 <> BLe
constr 10118:10121 <> BNot
constr 10138:10141 <> BAnd
R10085:10088 PL.Imp <> aexp ind
binder 10077:10078 <> a1:157
binder 10080:10081 <> a2:158
R10108:10111 PL.Imp <> aexp ind
binder 10100:10101 <> a1:159
binder 10103:10104 <> a2:160
R10128:10131 PL.Imp <> bexp:155 ind
binder 10124:10124 <> b:161
R10152:10155 PL.Imp <> bexp:155 ind
binder 10144:10145 <> b1:162
binder 10147:10148 <> b2:163
R10160:10185 PL.Imp <> ANum constr
def 10200:10211 <> bool_to_bexp
R10218:10221 Coq.Init.Datatypes <> bool ind
binder 10214:10214 <> b:164
R10226:10229 PL.Imp <> bexp ind
R10239:10239 PL.Imp <> b:164 var
R10257:10262 PL.Imp <> BFalse constr
R10246:10250 PL.Imp <> BTrue constr
R10265:10301 PL.Imp <> bool_to_bexp def
R10425:10429 PL.Imp <> APlus constr
not 10413:10413 <> ::imp_scope:x_'+'_x
R10504:10509 PL.Imp <> AMinus constr
not 10492:10492 <> ::imp_scope:x_'-'_x
R10584:10588 PL.Imp <> AMult constr
not 10572:10572 <> ::imp_scope:x_'*'_x
R10664:10666 PL.Imp <> BLe constr
not 10651:10651 <> ::imp_scope:x_'<='_x
R10740:10742 PL.Imp <> BEq constr
not 10727:10727 <> ::imp_scope:x_'=='_x
R10816:10819 PL.Imp <> BAnd constr
not 10803:10803 <> ::imp_scope:x_'&&'_x
R10894:10897 PL.Imp <> BNot constr
not 10882:10882 <> ::imp_scope:'!'_x
ind 10961:10963 <> com
constr 10979:10983 <> CSkip
constr 10989:10992 <> CAss
constr 11018:11021 <> CSeq
constr 11041:11043 <> CIf
constr 11074:11079 <> CWhile
R10998:11000 PL.Imp <> var def
binder 10995:10995 <> X:167
R11008:11011 PL.Imp <> aexp ind
binder 11004:11004 <> a:168
R11032:11034 PL.Imp <> com:165 ind
binder 11024:11025 <> c1:169
binder 11027:11028 <> c2:170
R11050:11053 PL.Imp <> bexp ind
binder 11046:11046 <> b:171
R11065:11067 PL.Imp <> com:165 ind
binder 11057:11058 <> c1:172
binder 11060:11061 <> c2:173
R11086:11089 PL.Imp <> bexp ind
binder 11082:11082 <> b:174
R11097:11099 PL.Imp <> com:165 ind
binder 11093:11093 <> c:175
R11159:11163 PL.Imp <> CSkip constr
not 11144:11144 <> ::imp_scope:'Skip'
R11204:11207 PL.Imp <> CSeq constr
not 11187:11187 <> ::imp_scope:x_';;'_x
R11309:11314 PL.Imp <> CWhile constr
not 11273:11273 <> ::imp_scope:'While'_x_'Do'_x_'EndWhile'
R11422:11424 PL.Imp <> CIf constr
not 11378:11378 <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf'
mod 11492:11515 <> Abstract_Pretty_Printing
R11518:11543 PL.Imp <> AId constr
R11573:11576 PL.Imp <> CAss constr
not 11555:11555 Abstract_Pretty_Printing ::imp_scope:x_'::='_x
R11614:11637 PL.Imp Abstract_Pretty_Printing <> mod
def 11652:11656 <> state
R11670:11673 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11674:11674 Coq.Numbers.BinNums <> Z ind
R11667:11669 Coq.Init.Datatypes <> nat ind
def 11828:11840 <> constant_func
binder 11843:11843 <> A:176
R11856:11856 Coq.Numbers.BinNums <> Z ind
binder 11853:11853 <> c:177
R11861:11864 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11865:11865 Coq.Numbers.BinNums <> Z ind
R11860:11860 PL.Imp <> A:176 var
R11879:11879 PL.Imp <> c:177 var
def 11893:11901 <> query_var
R11907:11909 PL.Imp <> var def
binder 11904:11904 <> X:178
R11918:11921 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11922:11922 Coq.Numbers.BinNums <> Z ind
R11913:11917 PL.Imp <> state def
binder 11931:11932 <> st:179
R11937:11938 PL.Imp <> st:179 var
R11940:11940 PL.Imp <> X:178 var
def 11953:11957 <> aeval
R11964:11967 PL.Imp <> aexp ind
binder 11960:11960 <> a:180
R11977:11980 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11981:11981 Coq.Numbers.BinNums <> Z ind
R11972:11976 PL.Imp <> state def
R11994:11994 PL.Imp <> a:180 var
R12005:12008 PL.Imp <> ANum constr
R12015:12027 PL.Imp <> constant_func def
R12035:12037 PL.Imp <> AId constr
R12044:12052 PL.Imp <> query_var def
R12060:12064 PL.Imp <> APlus constr
R12084:12086 PL.Imp <> ::func_scope:x_'+'_x not
R12076:12080 PL.Imp <> aeval:181 def
R12087:12091 PL.Imp <> aeval:181 def
R12106:12111 PL.Imp <> AMinus constr
R12132:12134 PL.Imp <> ::func_scope:x_'-'_x not
R12124:12128 PL.Imp <> aeval:181 def
R12135:12139 PL.Imp <> aeval:181 def
R12154:12158 PL.Imp <> AMult constr
R12178:12180 PL.Imp <> ::func_scope:x_'*'_x not
R12170:12174 PL.Imp <> aeval:181 def
R12181:12185 PL.Imp <> aeval:181 def
def 12213:12217 <> beval
R12224:12227 PL.Imp <> bexp ind
binder 12220:12220 <> b:183
R12237:12240 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12232:12236 PL.Imp <> state def
R12257:12257 PL.Imp <> b:183 var
R12268:12272 PL.Imp <> BTrue constr
R12283:12291 PL.Imp <> full def
R12297:12302 PL.Imp <> BFalse constr
R12312:12321 PL.Imp <> empty def
R12327:12329 PL.Imp <> BEq constr
R12342:12353 PL.Imp <> test_eq def
R12367:12371 PL.Imp <> aeval def
R12356:12360 PL.Imp <> aeval def
R12381:12383 PL.Imp <> BLe constr
R12396:12407 PL.Imp <> test_le def
R12421:12425 PL.Imp <> aeval def
R12410:12414 PL.Imp <> aeval def
R12435:12438 PL.Imp <> BNot constr
R12450:12464 PL.Imp <> complement def
R12467:12471 PL.Imp <> beval:184 def
R12481:12484 PL.Imp <> BAnd constr
R12496:12509 PL.Imp <> intersect def
R12524:12528 PL.Imp <> beval:184 def
R12512:12516 PL.Imp <> beval:184 def
def 12553:12558 <> if_sem
R12566:12569 PL.Imp <> bexp ind
binder 12563:12563 <> b:186
R12605:12608 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12614:12617 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12609:12613 PL.Imp <> state def
R12600:12604 PL.Imp <> state def
binder 12575:12585 <> then_branch:187
binder 12587:12597 <> else_branch:188
R12633:12636 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12642:12645 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12637:12641 PL.Imp <> state def
R12628:12632 PL.Imp <> state def
R12656:12667 PL.Imp <> union def
R12734:12746 PL.Imp <> concat def
R12783:12793 PL.Imp <> else_branch:188 var
R12749:12763 PL.Imp <> test_rel def
R12766:12770 PL.Imp <> beval def
R12773:12776 PL.Imp <> BNot constr
R12778:12778 PL.Imp <> b:186 var
R12674:12686 PL.Imp <> concat def
R12716:12726 PL.Imp <> then_branch:187 var
R12689:12703 PL.Imp <> test_rel def
R12706:12710 PL.Imp <> beval def
R12712:12712 PL.Imp <> b:186 var
def 12807:12820 <> iter_loop_body
R12826:12829 PL.Imp <> bexp ind
binder 12823:12823 <> b:189
R12873:12876 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12882:12885 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12877:12881 PL.Imp <> state def
R12868:12872 PL.Imp <> state def
binder 12857:12865 <> loop_body:190
R12920:12922 Coq.Init.Datatypes <> nat ind
binder 12917:12917 <> n:191
R12931:12934 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12940:12943 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12935:12939 PL.Imp <> state def
R12926:12930 PL.Imp <> state def
R12960:12960 PL.Imp <> n:191 var
R12971:12971 Coq.Init.Datatypes <> O constr
R12985:12999 PL.Imp <> test_rel def
R13002:13006 PL.Imp <> beval def
R13009:13012 PL.Imp <> BNot constr
R13014:13014 PL.Imp <> b:189 var
R13022:13022 Coq.Init.Datatypes <> S constr
R13039:13051 PL.Imp <> concat def
R13104:13116 PL.Imp <> concat def
R13157:13170 PL.Imp <> iter_loop_body:192 def
R13174:13182 PL.Imp <> loop_body:190 var
R13172:13172 PL.Imp <> b:189 var
R13132:13140 PL.Imp <> loop_body:190 var
R13065:13079 PL.Imp <> test_rel def
R13082:13086 PL.Imp <> beval def
R13088:13088 PL.Imp <> b:189 var
def 13208:13215 <> loop_sem
R13221:13224 PL.Imp <> bexp ind
binder 13218:13218 <> b:194
R13244:13247 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13253:13256 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13248:13252 PL.Imp <> state def
R13239:13243 PL.Imp <> state def
binder 13228:13236 <> loop_body:195
R13271:13274 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13280:13283 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13275:13279 PL.Imp <> state def
R13266:13270 PL.Imp <> state def
R13294:13311 PL.Imp <> omega_union def
R13314:13327 PL.Imp <> iter_loop_body def
R13331:13339 PL.Imp <> loop_body:195 var
R13329:13329 PL.Imp <> b:194 var
def 13353:13357 <> ceval
R13363:13365 PL.Imp <> com ind
binder 13360:13360 <> c:196
R13374:13377 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13383:13386 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13378:13382 PL.Imp <> state def
R13369:13373 PL.Imp <> state def
R13403:13403 PL.Imp <> c:196 var
R13414:13418 PL.Imp <> CSkip constr
R13423:13431 PL.Imp <> id def
R13437:13440 PL.Imp <> CAss constr
binder 13459:13461 <> st1:199
binder 13463:13465 <> st2:200
R13497:13508 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R13483:13485 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13478:13480 PL.Imp <> st2:200 var
R13486:13490 PL.Imp <> aeval def
R13494:13496 PL.Imp <> st1:199 var
binder 13516:13516 <> Y:201
R13525:13528 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13534:13536 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13529:13531 PL.Imp <> st1:199 var
R13533:13533 PL.Imp <> Y:201 var
R13537:13539 PL.Imp <> st2:200 var
R13541:13541 PL.Imp <> Y:201 var
R13520:13523 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R13524:13524 PL.Imp <> Y:201 var
R13547:13550 PL.Imp <> CSeq constr
R13561:13573 PL.Imp <> concat def
R13587:13591 PL.Imp <> ceval:197 def
R13576:13580 PL.Imp <> ceval:197 def
R13601:13603 PL.Imp <> CIf constr
R13616:13621 PL.Imp <> if_sem def
R13637:13641 PL.Imp <> ceval:197 def
R13626:13630 PL.Imp <> ceval:197 def
R13651:13656 PL.Imp <> CWhile constr
R13665:13672 PL.Imp <> loop_sem def
R13677:13681 PL.Imp <> ceval:197 def
R13683:13683 PL.Imp <> c:196 var
prf 13700:13710 <> ceval_CSkip
R13724:13726 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13713:13717 PL.Imp <> ceval def
R13719:13723 PL.Imp <> CSkip constr
R13727:13735 PL.Imp <> id def
prf 13785:13794 <> ceval_CAss
binder 13804:13804 <> X:202
binder 13806:13806 <> E:203
R13827:13833 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13811:13815 PL.Imp <> ceval def
R13818:13821 PL.Imp <> CAss constr
R13825:13825 PL.Imp <> E:203 var
R13823:13823 PL.Imp <> X:202 var
binder 13838:13840 <> st1:204
binder 13842:13844 <> st2:205
R13874:13885 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R13860:13862 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13855:13857 PL.Imp <> st2:205 var
R13859:13859 PL.Imp <> X:202 var
R13863:13867 PL.Imp <> aeval def
R13871:13873 PL.Imp <> st1:204 var
R13869:13869 PL.Imp <> E:203 var
binder 13893:13893 <> Y:206
R13902:13905 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13911:13913 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13906:13908 PL.Imp <> st1:204 var
R13910:13910 PL.Imp <> Y:206 var
R13914:13916 PL.Imp <> st2:205 var
R13918:13918 PL.Imp <> Y:206 var
R13897:13900 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R13896:13896 PL.Imp <> X:202 var
R13901:13901 PL.Imp <> Y:206 var
prf 13968:13977 <> ceval_CSeq
binder 13987:13988 <> c1:207
binder 13990:13991 <> c2:208
R14012:14014 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13996:14000 PL.Imp <> ceval def
R14005:14008 PL.Imp <> ::imp_scope:x_';;'_x not
R14003:14004 PL.Imp <> c1:207 var
R14009:14010 PL.Imp <> c2:208 var
R14015:14027 PL.Imp <> concat def
R14041:14045 PL.Imp <> ceval def
R14047:14048 PL.Imp <> c2:208 var
R14030:14034 PL.Imp <> ceval def
R14036:14037 PL.Imp <> c1:207 var
prf 14099:14107 <> ceval_CIf
binder 14117:14117 <> b:209
binder 14119:14120 <> c1:210
binder 14122:14123 <> c2:211
R14147:14149 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14128:14132 PL.Imp <> ceval def
R14135:14137 PL.Imp <> CIf constr
R14144:14145 PL.Imp <> c2:211 var
R14141:14142 PL.Imp <> c1:210 var
R14139:14139 PL.Imp <> b:209 var
R14150:14155 PL.Imp <> if_sem def
R14171:14175 PL.Imp <> ceval def
R14177:14178 PL.Imp <> c2:211 var
R14160:14164 PL.Imp <> ceval def
R14166:14167 PL.Imp <> c1:210 var
R14157:14157 PL.Imp <> b:209 var
prf 14229:14240 <> ceval_CWhile
binder 14250:14250 <> b:212
binder 14252:14252 <> c:213
R14286:14288 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14257:14261 PL.Imp <> ceval def
R14264:14269 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R14271:14274 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R14276:14284 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R14270:14270 PL.Imp <> b:212 var
R14275:14275 PL.Imp <> c:213 var
R14289:14296 PL.Imp <> loop_sem def
R14301:14305 PL.Imp <> ceval def
R14307:14307 PL.Imp <> c:213 var
R14298:14298 PL.Imp <> b:212 var
R14362:14366 PL.Imp <> ceval def
def 14394:14403 <> aexp_equiv
R14413:14416 PL.Imp <> aexp ind
binder 14406:14407 <> a1:214
binder 14409:14410 <> a2:215
R14430:14439 PL.Imp <> equiv def
R14453:14457 PL.Imp <> aeval def
R14459:14460 PL.Imp <> a2:215 var
R14442:14446 PL.Imp <> aeval def
R14448:14449 PL.Imp <> a1:214 var
prf 14471:14485 <> aexp_equiv_refl
R14488:14496 Coq.Classes.RelationClasses <> Reflexive class
R14498:14507 PL.Imp <> aexp_equiv def
R14526:14534 Coq.Classes.RelationClasses <> Reflexive class
R14537:14546 PL.Imp <> aexp_equiv def
prf 14586:14599 <> aexp_equiv_sym
R14602:14610 Coq.Classes.RelationClasses <> Symmetric class
R14612:14621 PL.Imp <> aexp_equiv def
R14640:14648 Coq.Classes.RelationClasses <> Symmetric class
R14651:14660 PL.Imp <> aexp_equiv def
prf 14713:14728 <> aexp_equiv_trans
R14731:14740 Coq.Classes.RelationClasses <> Transitive class
R14742:14751 PL.Imp <> aexp_equiv def
R14770:14779 Coq.Classes.RelationClasses <> Transitive class
R14782:14791 PL.Imp <> aexp_equiv def
prf 14848:14858 <> APlus_congr
R14863:14868 Coq.Classes.Morphisms <> Proper class
R14913:14917 PL.Imp <> APlus constr
R14881:14885 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R14871:14880 PL.Imp <> aexp_equiv def
R14896:14900 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R14886:14895 PL.Imp <> aexp_equiv def
R14901:14910 PL.Imp <> aexp_equiv def
R14936:14941 Coq.Classes.Morphisms <> Proper class
R14944:14953 Coq.Classes.Morphisms <> respectful def
R14965:14974 PL.Imp <> aexp_equiv def
prf 15058:15069 <> AMinus_congr
R15074:15079 Coq.Classes.Morphisms <> Proper class
R15124:15129 PL.Imp <> AMinus constr
R15092:15096 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R15082:15091 PL.Imp <> aexp_equiv def
R15107:15111 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R15097:15106 PL.Imp <> aexp_equiv def
R15112:15121 PL.Imp <> aexp_equiv def
R15148:15153 Coq.Classes.Morphisms <> Proper class
R15156:15165 Coq.Classes.Morphisms <> respectful def
R15177:15186 PL.Imp <> aexp_equiv def
prf 15270:15280 <> AMult_congr
R15285:15290 Coq.Classes.Morphisms <> Proper class
R15335:15339 PL.Imp <> AMult constr
R15303:15307 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R15293:15302 PL.Imp <> aexp_equiv def
R15318:15322 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R15308:15317 PL.Imp <> aexp_equiv def
R15323:15332 PL.Imp <> aexp_equiv def
R15358:15363 Coq.Classes.Morphisms <> Proper class
R15366:15375 Coq.Classes.Morphisms <> respectful def
R15387:15396 PL.Imp <> aexp_equiv def
def 15686:15695 <> bexp_equiv
R15705:15708 PL.Imp <> bexp ind
binder 15698:15699 <> b1:216
binder 15701:15702 <> b2:217
R15722:15731 PL.Imp <> equiv def
R15745:15749 PL.Imp <> beval def
R15751:15752 PL.Imp <> b2:217 var
R15734:15738 PL.Imp <> beval def
R15740:15741 PL.Imp <> b1:216 var
prf 15763:15777 <> bexp_equiv_refl
R15780:15788 Coq.Classes.RelationClasses <> Reflexive class
R15790:15799 PL.Imp <> bexp_equiv def
R15818:15826 Coq.Classes.RelationClasses <> Reflexive class
R15829:15838 PL.Imp <> bexp_equiv def
prf 15878:15891 <> bexp_equiv_sym
R15894:15902 Coq.Classes.RelationClasses <> Symmetric class
R15904:15913 PL.Imp <> bexp_equiv def
R15932:15940 Coq.Classes.RelationClasses <> Symmetric class
R15943:15952 PL.Imp <> bexp_equiv def
prf 16005:16020 <> bexp_equiv_trans
R16023:16032 Coq.Classes.RelationClasses <> Transitive class
R16034:16043 PL.Imp <> bexp_equiv def
R16062:16071 Coq.Classes.RelationClasses <> Transitive class
R16074:16083 PL.Imp <> bexp_equiv def
prf 16140:16148 <> BEq_congr
R16153:16158 Coq.Classes.Morphisms <> Proper class
R16203:16205 PL.Imp <> BEq constr
R16171:16175 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R16161:16170 PL.Imp <> aexp_equiv def
R16186:16190 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R16176:16185 PL.Imp <> aexp_equiv def
R16191:16200 PL.Imp <> bexp_equiv def
R16224:16229 Coq.Classes.Morphisms <> Proper class
R16232:16241 Coq.Classes.Morphisms <> respectful def
R16253:16262 PL.Imp <> aexp_equiv def
R16265:16274 PL.Imp <> bexp_equiv def
prf 16338:16346 <> BLe_congr
R16351:16356 Coq.Classes.Morphisms <> Proper class
R16401:16403 PL.Imp <> BLe constr
R16369:16373 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R16359:16368 PL.Imp <> aexp_equiv def
R16384:16388 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R16374:16383 PL.Imp <> aexp_equiv def
R16389:16398 PL.Imp <> bexp_equiv def
R16422:16427 Coq.Classes.Morphisms <> Proper class
R16430:16439 Coq.Classes.Morphisms <> respectful def
R16451:16460 PL.Imp <> aexp_equiv def
R16463:16472 PL.Imp <> bexp_equiv def
prf 16536:16545 <> BAnd_congr
R16550:16555 Coq.Classes.Morphisms <> Proper class
R16600:16603 PL.Imp <> BAnd constr
R16568:16572 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R16558:16567 PL.Imp <> bexp_equiv def
R16583:16587 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R16573:16582 PL.Imp <> bexp_equiv def
R16588:16597 PL.Imp <> bexp_equiv def
R16622:16627 Coq.Classes.Morphisms <> Proper class
R16630:16639 Coq.Classes.Morphisms <> respectful def
R16651:16660 PL.Imp <> bexp_equiv def
prf 16724:16733 <> BNot_congr
R16736:16741 Coq.Classes.Morphisms <> Proper class
R16771:16774 PL.Imp <> BNot constr
R16754:16758 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R16744:16753 PL.Imp <> bexp_equiv def
R16759:16768 PL.Imp <> bexp_equiv def
R16793:16798 Coq.Classes.Morphisms <> Proper class
R16801:16810 Coq.Classes.Morphisms <> respectful def
R16822:16831 PL.Imp <> bexp_equiv def
def 17121:17129 <> com_equiv
R17139:17141 PL.Imp <> com ind
binder 17132:17133 <> c1:218
binder 17135:17136 <> c2:219
R17155:17166 PL.Imp <> equiv def
R17180:17184 PL.Imp <> ceval def
R17186:17187 PL.Imp <> c2:219 var
R17169:17173 PL.Imp <> ceval def
R17175:17176 PL.Imp <> c1:218 var
prf 17198:17211 <> com_equiv_refl
R17214:17222 Coq.Classes.RelationClasses <> Reflexive class
R17224:17232 PL.Imp <> com_equiv def
R17251:17259 Coq.Classes.RelationClasses <> Reflexive class
R17262:17270 PL.Imp <> com_equiv def
prf 17310:17322 <> com_equiv_sym
R17325:17333 Coq.Classes.RelationClasses <> Symmetric class
R17335:17343 PL.Imp <> com_equiv def
R17362:17370 Coq.Classes.RelationClasses <> Symmetric class
R17373:17381 PL.Imp <> com_equiv def
prf 17434:17448 <> com_equiv_trans
R17451:17460 Coq.Classes.RelationClasses <> Transitive class
R17462:17470 PL.Imp <> com_equiv def
R17489:17498 Coq.Classes.RelationClasses <> Transitive class
R17501:17509 PL.Imp <> com_equiv def
prf 17566:17575 <> CAss_congr
R17589:17591 PL.Imp <> var def
binder 17586:17586 <> X:220
R17597:17602 Coq.Classes.Morphisms <> Proper class
R17632:17635 PL.Imp <> CAss constr
R17637:17637 PL.Imp <> X:220 var
R17615:17619 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R17605:17614 PL.Imp <> aexp_equiv def
R17620:17628 PL.Imp <> com_equiv def
R17657:17662 Coq.Classes.Morphisms <> Proper class
R17665:17674 Coq.Classes.Morphisms <> respectful def
R17686:17695 PL.Imp <> aexp_equiv def
R17698:17706 PL.Imp <> com_equiv def
R17709:17720 PL.Imp <> equiv def
R17772:17781 PL.Imp <> ceval_CAss thm
R17772:17781 PL.Imp <> ceval_CAss thm
R17772:17781 PL.Imp <> ceval_CAss thm
R17772:17781 PL.Imp <> ceval_CAss thm
R17772:17781 PL.Imp <> ceval_CAss thm
R17793:17802 PL.Imp <> equiv def
prf 17872:17881 <> CSeq_congr
R17884:17889 Coq.Classes.Morphisms <> Proper class
R17931:17934 PL.Imp <> CSeq constr
R17901:17905 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R17892:17900 PL.Imp <> com_equiv def
R17915:17919 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R17906:17914 PL.Imp <> com_equiv def
R17920:17928 PL.Imp <> com_equiv def
R17953:17958 Coq.Classes.Morphisms <> Proper class
R17961:17970 Coq.Classes.Morphisms <> respectful def
R17982:17990 PL.Imp <> com_equiv def
R18033:18042 PL.Imp <> ceval_CSeq thm
R18033:18042 PL.Imp <> ceval_CSeq thm
R18033:18042 PL.Imp <> ceval_CSeq thm
R18033:18042 PL.Imp <> ceval_CSeq thm
R18033:18042 PL.Imp <> ceval_CSeq thm
prf 18089:18097 <> CIf_congr
R18102:18107 Coq.Classes.Morphisms <> Proper class
R18164:18166 PL.Imp <> CIf constr
R18120:18124 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R18110:18119 PL.Imp <> bexp_equiv def
R18134:18138 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R18125:18133 PL.Imp <> com_equiv def
R18148:18152 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R18139:18147 PL.Imp <> com_equiv def
R18153:18161 PL.Imp <> com_equiv def
R18185:18190 Coq.Classes.Morphisms <> Proper class
R18193:18202 Coq.Classes.Morphisms <> respectful def
R18214:18223 PL.Imp <> bexp_equiv def
R18226:18234 PL.Imp <> com_equiv def
R18284:18292 PL.Imp <> ceval_CIf thm
R18284:18292 PL.Imp <> ceval_CIf thm
R18284:18292 PL.Imp <> ceval_CIf thm
R18284:18292 PL.Imp <> ceval_CIf thm
R18284:18292 PL.Imp <> ceval_CIf thm
R18304:18309 PL.Imp <> if_sem def
prf 18369:18380 <> CWhile_congr
R18385:18390 Coq.Classes.Morphisms <> Proper class
R18433:18438 PL.Imp <> CWhile constr
R18403:18407 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R18393:18402 PL.Imp <> bexp_equiv def
R18417:18421 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R18408:18416 PL.Imp <> com_equiv def
R18422:18430 PL.Imp <> com_equiv def
R18457:18462 Coq.Classes.Morphisms <> Proper class
R18465:18474 Coq.Classes.Morphisms <> respectful def
R18486:18495 PL.Imp <> bexp_equiv def
R18498:18506 PL.Imp <> com_equiv def
R18545:18556 PL.Imp <> ceval_CWhile thm
R18545:18556 PL.Imp <> ceval_CWhile thm
R18545:18556 PL.Imp <> ceval_CWhile thm
R18545:18556 PL.Imp <> ceval_CWhile thm
R18545:18556 PL.Imp <> ceval_CWhile thm
R18568:18575 PL.Imp <> loop_sem def
R18586:18606 PL.Imp <> Rel_equiv_omega_union thm
R18586:18606 PL.Imp <> Rel_equiv_omega_union thm
prf 18726:18743 <> loop_sem_unrolling
binder 18753:18753 <> b:221
R18764:18767 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18773:18776 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18768:18772 PL.Imp <> state def
R18759:18763 PL.Imp <> state def
binder 18756:18756 <> R:222
R18786:18797 PL.Imp <> equiv def
R18815:18820 PL.Imp <> if_sem def
R18857:18865 PL.Imp <> id def
R18825:18837 PL.Imp <> concat def
R18842:18849 PL.Imp <> loop_sem def
R18853:18853 PL.Imp <> R:222 var
R18851:18851 PL.Imp <> b:221 var
R18839:18839 PL.Imp <> R:222 var
R18822:18822 PL.Imp <> b:221 var
R18800:18807 PL.Imp <> loop_sem def
R18811:18811 PL.Imp <> R:222 var
R18809:18809 PL.Imp <> b:221 var
R18895:18906 PL.Imp <> equiv def
R18934:18936 Coq.Init.Logic <> iff def
R18965:18972 PL.Imp <> loop_sem def
R18975:18992 PL.Imp <> omega_union def
R19072:19077 PL.Imp <> if_sem def
R19080:19091 PL.Imp <> union def
R19127:19139 PL.Imp <> concat def
R19142:19150 PL.Imp <> id def
R19234:19239 PL.Imp <> if_sem def
R19242:19253 PL.Imp <> union def
R19281:19293 PL.Imp <> concat def
R19314:19326 PL.Imp <> concat def
R19468:19475 PL.Imp <> loop_sem def
R19478:19495 PL.Imp <> omega_union def
R19541:19546 PL.Imp <> if_sem def
R19549:19553 Coq.Relations.Relation_Operators <> union def
R19572:19579 PL.Imp <> loop_sem def
R19582:19599 PL.Imp <> omega_union def
R19673:19685 PL.Imp <> concat def
R19688:19696 PL.Imp <> id def
R19787:19799 PL.Imp <> concat def
R19855:19867 PL.Imp <> concat def
R19919:19926 PL.Imp <> loop_sem def
R19929:19946 PL.Imp <> omega_union def
R19993:19993 Coq.Init.Datatypes <> S constr
R19993:19993 Coq.Init.Datatypes <> S constr
R20021:20033 PL.Imp <> concat def
R20089:20101 PL.Imp <> concat def
prf 20164:20177 <> loop_unrolling
binder 20188:20188 <> b:223
binder 20190:20190 <> c:224
R20195:20203 PL.Imp <> com_equiv def
R20238:20240 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R20242:20248 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R20275:20281 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R20286:20291 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R20241:20241 PL.Imp <> b:223 var
R20250:20253 PL.Imp <> ::imp_scope:x_';;'_x not
R20249:20249 PL.Imp <> c:224 var
R20254:20259 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R20261:20264 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R20266:20274 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R20260:20260 PL.Imp <> b:223 var
R20265:20265 PL.Imp <> c:224 var
R20282:20285 PL.Imp <> ::imp_scope:'Skip' not
R20210:20215 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R20217:20220 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R20222:20230 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R20216:20216 PL.Imp <> b:223 var
R20221:20221 PL.Imp <> c:224 var
R20321:20329 PL.Imp <> com_equiv def
R20342:20350 PL.Imp <> ceval_CIf thm
R20353:20362 PL.Imp <> ceval_CSeq thm
R20365:20375 PL.Imp <> ceval_CSkip thm
R20342:20350 PL.Imp <> ceval_CIf thm
R20342:20350 PL.Imp <> ceval_CIf thm
R20353:20362 PL.Imp <> ceval_CSeq thm
R20353:20362 PL.Imp <> ceval_CSeq thm
R20365:20375 PL.Imp <> ceval_CSkip thm
R20365:20375 PL.Imp <> ceval_CSkip thm
R20388:20399 PL.Imp <> ceval_CWhile thm
R20388:20399 PL.Imp <> ceval_CWhile thm
R20388:20399 PL.Imp <> ceval_CWhile thm
R20410:20427 PL.Imp <> loop_sem_unrolling thm
R20410:20427 PL.Imp <> loop_sem_unrolling thm
prf 20442:20450 <> seq_assoc
binder 20461:20462 <> c1:225
binder 20464:20465 <> c2:226
binder 20467:20468 <> c3:227
R20473:20481 PL.Imp <> com_equiv def
R20501:20503 PL.Imp <> ::imp_scope:x_';;'_x not
R20510:20510 PL.Imp <> ::imp_scope:x_';;'_x not
R20499:20500 PL.Imp <> c1:225 var
R20506:20507 PL.Imp <> ::imp_scope:x_';;'_x not
R20504:20505 PL.Imp <> c2:226 var
R20508:20509 PL.Imp <> c3:227 var
R20484:20484 PL.Imp <> ::imp_scope:x_';;'_x not
R20491:20493 PL.Imp <> ::imp_scope:x_';;'_x not
R20487:20488 PL.Imp <> ::imp_scope:x_';;'_x not
R20485:20486 PL.Imp <> c1:225 var
R20489:20490 PL.Imp <> c2:226 var
R20494:20495 PL.Imp <> c3:227 var
R20540:20548 PL.Imp <> com_equiv def
R20563:20572 PL.Imp <> ceval_CSeq thm
R20563:20572 PL.Imp <> ceval_CSeq thm
R20563:20572 PL.Imp <> ceval_CSeq thm
R20563:20572 PL.Imp <> ceval_CSeq thm
R20563:20572 PL.Imp <> ceval_CSeq thm
R20563:20572 PL.Imp <> ceval_CSeq thm
R20563:20572 PL.Imp <> ceval_CSeq thm
R20583:20598 PL.Imp <> Rel_concat_assoc thm
R20583:20598 PL.Imp <> Rel_concat_assoc thm
ind 20756:20764 <> aexp_halt
constr 20787:20792 <> AH_num
R20771:20774 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R20767:20770 PL.Imp <> aexp ind
binder 20803:20803 <> n:230
R20806:20814 PL.Imp <> aexp_halt:228 ind
R20817:20820 PL.Imp <> ANum constr
R20822:20822 PL.Imp <> n:230 var
ind 20837:20841 <> astep
constr 20882:20886 <> AS_Id
constr 20953:20960 <> AS_Plus1
constr 21074:21081 <> AS_Plus2
constr 21217:21223 <> AS_Plus
constr 21317:21325 <> AS_Minus1
constr 21441:21449 <> AS_Minus2
constr 21587:21594 <> AS_Minus
constr 21689:21696 <> AS_Mult1
constr 21810:21817 <> AS_Mult2
constr 21953:21959 <> AS_Mult
R20850:20853 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R20858:20861 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R20866:20869 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R20862:20865 PL.Imp <> aexp ind
R20854:20857 PL.Imp <> aexp ind
R20845:20849 PL.Imp <> state def
binder 20897:20898 <> st:233
binder 20900:20900 <> X:234
R20909:20913 PL.Imp <> astep:231 ind
R20935:20938 PL.Imp <> ANum constr
R20941:20942 PL.Imp <> st:233 var
R20944:20944 PL.Imp <> X:234 var
R20927:20929 PL.Imp <> AId constr
R20931:20931 PL.Imp <> X:234 var
R20915:20916 PL.Imp <> st:233 var
binder 20971:20972 <> st:235
binder 20974:20975 <> a1:236
binder 20977:20979 <> a1':237
binder 20981:20982 <> a2:238
R21014:21023 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21024:21028 PL.Imp <> astep:231 ind
R21056:21060 PL.Imp <> APlus constr
R21066:21067 PL.Imp <> a2:238 var
R21062:21064 PL.Imp <> a1':237 var
R21042:21046 PL.Imp <> APlus constr
R21051:21052 PL.Imp <> a2:238 var
R21048:21049 PL.Imp <> a1:236 var
R21030:21031 PL.Imp <> st:235 var
R20991:20995 PL.Imp <> astep:231 ind
R21011:21013 PL.Imp <> a1':237 var
R21008:21009 PL.Imp <> a1:236 var
R20997:20998 PL.Imp <> st:235 var
binder 21092:21093 <> st:239
binder 21095:21096 <> a1:240
binder 21098:21099 <> a2:241
binder 21101:21103 <> a2':242
R21124:21133 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21157:21166 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21167:21171 PL.Imp <> astep:231 ind
R21199:21203 PL.Imp <> APlus constr
R21208:21210 PL.Imp <> a2':242 var
R21205:21206 PL.Imp <> a1:240 var
R21185:21189 PL.Imp <> APlus constr
R21194:21195 PL.Imp <> a2:241 var
R21191:21192 PL.Imp <> a1:240 var
R21173:21174 PL.Imp <> st:239 var
R21134:21138 PL.Imp <> astep:231 ind
R21154:21156 PL.Imp <> a2':242 var
R21151:21152 PL.Imp <> a2:241 var
R21140:21141 PL.Imp <> st:239 var
R21112:21120 PL.Imp <> aexp_halt ind
R21122:21123 PL.Imp <> a1:240 var
binder 21234:21235 <> st:243
binder 21237:21238 <> n1:244
binder 21240:21241 <> n2:245
R21250:21254 PL.Imp <> astep:231 ind
R21296:21299 PL.Imp <> ANum constr
R21304:21306 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R21302:21303 PL.Imp <> n1:244 var
R21307:21308 PL.Imp <> n2:245 var
R21268:21272 PL.Imp <> APlus constr
R21285:21288 PL.Imp <> ANum constr
R21290:21291 PL.Imp <> n2:245 var
R21275:21278 PL.Imp <> ANum constr
R21280:21281 PL.Imp <> n1:244 var
R21256:21257 PL.Imp <> st:243 var
binder 21336:21337 <> st:246
binder 21339:21340 <> a1:247
binder 21342:21344 <> a1':248
binder 21346:21347 <> a2:249
R21379:21388 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21389:21393 PL.Imp <> astep:231 ind
R21422:21427 PL.Imp <> AMinus constr
R21433:21434 PL.Imp <> a2:249 var
R21429:21431 PL.Imp <> a1':248 var
R21407:21412 PL.Imp <> AMinus constr
R21417:21418 PL.Imp <> a2:249 var
R21414:21415 PL.Imp <> a1:247 var
R21395:21396 PL.Imp <> st:246 var
R21356:21360 PL.Imp <> astep:231 ind
R21376:21378 PL.Imp <> a1':248 var
R21373:21374 PL.Imp <> a1:247 var
R21362:21363 PL.Imp <> st:246 var
binder 21460:21461 <> st:250
binder 21463:21464 <> a1:251
binder 21466:21467 <> a2:252
binder 21469:21471 <> a2':253
R21492:21501 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21525:21534 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21535:21539 PL.Imp <> astep:231 ind
R21568:21573 PL.Imp <> AMinus constr
R21578:21580 PL.Imp <> a2':253 var
R21575:21576 PL.Imp <> a1:251 var
R21553:21558 PL.Imp <> AMinus constr
R21563:21564 PL.Imp <> a2:252 var
R21560:21561 PL.Imp <> a1:251 var
R21541:21542 PL.Imp <> st:250 var
R21502:21506 PL.Imp <> astep:231 ind
R21522:21524 PL.Imp <> a2':253 var
R21519:21520 PL.Imp <> a2:252 var
R21508:21509 PL.Imp <> st:250 var
R21480:21488 PL.Imp <> aexp_halt ind
R21490:21491 PL.Imp <> a1:251 var
binder 21605:21606 <> st:254
binder 21608:21609 <> n1:255
binder 21611:21612 <> n2:256
R21621:21625 PL.Imp <> astep:231 ind
R21668:21671 PL.Imp <> ANum constr
R21676:21678 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R21674:21675 PL.Imp <> n1:255 var
R21679:21680 PL.Imp <> n2:256 var
R21639:21644 PL.Imp <> AMinus constr
R21657:21660 PL.Imp <> ANum constr
R21662:21663 PL.Imp <> n2:256 var
R21647:21650 PL.Imp <> ANum constr
R21652:21653 PL.Imp <> n1:255 var
R21627:21628 PL.Imp <> st:254 var
binder 21707:21708 <> st:257
binder 21710:21711 <> a1:258
binder 21713:21715 <> a1':259
binder 21717:21718 <> a2:260
R21750:21759 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21760:21764 PL.Imp <> astep:231 ind
R21792:21796 PL.Imp <> AMult constr
R21802:21803 PL.Imp <> a2:260 var
R21798:21800 PL.Imp <> a1':259 var
R21778:21782 PL.Imp <> AMult constr
R21787:21788 PL.Imp <> a2:260 var
R21784:21785 PL.Imp <> a1:258 var
R21766:21767 PL.Imp <> st:257 var
R21727:21731 PL.Imp <> astep:231 ind
R21747:21749 PL.Imp <> a1':259 var
R21744:21745 PL.Imp <> a1:258 var
R21733:21734 PL.Imp <> st:257 var
binder 21828:21829 <> st:261
binder 21831:21832 <> a1:262
binder 21834:21835 <> a2:263
binder 21837:21839 <> a2':264
R21860:21869 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21893:21902 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21903:21907 PL.Imp <> astep:231 ind
R21935:21939 PL.Imp <> AMult constr
R21944:21946 PL.Imp <> a2':264 var
R21941:21942 PL.Imp <> a1:262 var
R21921:21925 PL.Imp <> AMult constr
R21930:21931 PL.Imp <> a2:263 var
R21927:21928 PL.Imp <> a1:262 var
R21909:21910 PL.Imp <> st:261 var
R21870:21874 PL.Imp <> astep:231 ind
R21890:21892 PL.Imp <> a2':264 var
R21887:21888 PL.Imp <> a2:263 var
R21876:21877 PL.Imp <> st:261 var
R21848:21856 PL.Imp <> aexp_halt ind
R21858:21859 PL.Imp <> a1:262 var
binder 21970:21971 <> st:265
binder 21973:21974 <> n1:266
binder 21976:21977 <> n2:267
R21986:21990 PL.Imp <> astep:231 ind
R22032:22035 PL.Imp <> ANum constr
R22040:22042 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R22038:22039 PL.Imp <> n1:266 var
R22043:22044 PL.Imp <> n2:267 var
R22004:22008 PL.Imp <> AMult constr
R22021:22024 PL.Imp <> ANum constr
R22026:22027 PL.Imp <> n2:267 var
R22011:22014 PL.Imp <> ANum constr
R22016:22017 PL.Imp <> n1:266 var
R21992:21993 PL.Imp <> st:265 var
ind 22060:22068 <> bexp_halt
constr 22091:22097 <> BH_True
constr 22121:22128 <> BH_False
R22075:22078 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22071:22074 PL.Imp <> bexp ind
R22101:22109 PL.Imp <> bexp_halt:268 ind
R22111:22115 PL.Imp <> BTrue constr
R22132:22140 PL.Imp <> bexp_halt:268 ind
R22142:22147 PL.Imp <> BFalse constr
ind 22161:22165 <> bstep
constr 22207:22212 <> BS_Eq1
constr 22322:22327 <> BS_Eq2
constr 22459:22468 <> BS_Eq_True
constr 22565:22575 <> BS_Eq_False
constr 22675:22680 <> BS_Le1
constr 22790:22795 <> BS_Le2
constr 22927:22936 <> BS_Le_True
constr 23034:23044 <> BS_Le_False
constr 23143:23152 <> BS_NotStep
constr 23255:23264 <> BS_NotTrue
constr 23326:23336 <> BS_NotFalse
constr 23399:23408 <> BS_AndStep
constr 23519:23528 <> BS_AndTrue
constr 23588:23598 <> BS_AndFalse
R22174:22177 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22182:22185 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22190:22193 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22186:22189 PL.Imp <> bexp ind
R22178:22181 PL.Imp <> bexp ind
R22169:22173 PL.Imp <> state def
binder 22223:22224 <> st:272
binder 22226:22227 <> a1:273
binder 22229:22231 <> a1':274
binder 22233:22234 <> a2:275
R22266:22275 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22276:22280 PL.Imp <> bstep:270 ind
R22306:22308 PL.Imp <> BEq constr
R22314:22315 PL.Imp <> a2:275 var
R22310:22312 PL.Imp <> a1':274 var
R22294:22296 PL.Imp <> BEq constr
R22301:22302 PL.Imp <> a2:275 var
R22298:22299 PL.Imp <> a1:273 var
R22282:22283 PL.Imp <> st:272 var
R22243:22247 PL.Imp <> astep ind
R22263:22265 PL.Imp <> a1':274 var
R22260:22261 PL.Imp <> a1:273 var
R22249:22250 PL.Imp <> st:272 var
binder 22338:22339 <> st:276
binder 22341:22342 <> a1:277
binder 22344:22345 <> a2:278
binder 22347:22349 <> a2':279
R22370:22379 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22403:22412 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22413:22417 PL.Imp <> bstep:270 ind
R22443:22445 PL.Imp <> BEq constr
R22450:22452 PL.Imp <> a2':279 var
R22447:22448 PL.Imp <> a1:277 var
R22431:22433 PL.Imp <> BEq constr
R22438:22439 PL.Imp <> a2:278 var
R22435:22436 PL.Imp <> a1:277 var
R22419:22420 PL.Imp <> st:276 var
R22380:22384 PL.Imp <> astep ind
R22400:22402 PL.Imp <> a2':279 var
R22397:22398 PL.Imp <> a2:278 var
R22386:22387 PL.Imp <> st:276 var
R22358:22366 PL.Imp <> aexp_halt ind
R22368:22369 PL.Imp <> a1:277 var
binder 22479:22480 <> st:280
binder 22482:22483 <> n1:281
binder 22485:22486 <> n2:282
R22502:22511 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22512:22516 PL.Imp <> bstep:270 ind
R22555:22559 PL.Imp <> BTrue constr
R22530:22532 PL.Imp <> BEq constr
R22545:22548 PL.Imp <> ANum constr
R22550:22551 PL.Imp <> n2:282 var
R22535:22538 PL.Imp <> ANum constr
R22540:22541 PL.Imp <> n1:281 var
R22518:22519 PL.Imp <> st:280 var
R22497:22499 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22495:22496 PL.Imp <> n1:281 var
R22500:22501 PL.Imp <> n2:282 var
binder 22586:22587 <> st:283
binder 22589:22590 <> n1:284
binder 22592:22593 <> n2:285
R22610:22619 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22620:22624 PL.Imp <> bstep:270 ind
R22663:22668 PL.Imp <> BFalse constr
R22638:22640 PL.Imp <> BEq constr
R22653:22656 PL.Imp <> ANum constr
R22658:22659 PL.Imp <> n2:285 var
R22643:22646 PL.Imp <> ANum constr
R22648:22649 PL.Imp <> n1:284 var
R22626:22627 PL.Imp <> st:283 var
R22604:22607 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R22602:22603 PL.Imp <> n1:284 var
R22608:22609 PL.Imp <> n2:285 var
binder 22691:22692 <> st:286
binder 22694:22695 <> a1:287
binder 22697:22699 <> a1':288
binder 22701:22702 <> a2:289
R22734:22743 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22744:22748 PL.Imp <> bstep:270 ind
R22774:22776 PL.Imp <> BLe constr
R22782:22783 PL.Imp <> a2:289 var
R22778:22780 PL.Imp <> a1':288 var
R22762:22764 PL.Imp <> BLe constr
R22769:22770 PL.Imp <> a2:289 var
R22766:22767 PL.Imp <> a1:287 var
R22750:22751 PL.Imp <> st:286 var
R22711:22715 PL.Imp <> astep ind
R22731:22733 PL.Imp <> a1':288 var
R22728:22729 PL.Imp <> a1:287 var
R22717:22718 PL.Imp <> st:286 var
binder 22806:22807 <> st:290
binder 22809:22810 <> a1:291
binder 22812:22813 <> a2:292
binder 22815:22817 <> a2':293
R22838:22847 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22871:22880 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22881:22885 PL.Imp <> bstep:270 ind
R22911:22913 PL.Imp <> BLe constr
R22918:22920 PL.Imp <> a2':293 var
R22915:22916 PL.Imp <> a1:291 var
R22899:22901 PL.Imp <> BLe constr
R22906:22907 PL.Imp <> a2:292 var
R22903:22904 PL.Imp <> a1:291 var
R22887:22888 PL.Imp <> st:290 var
R22848:22852 PL.Imp <> astep ind
R22868:22870 PL.Imp <> a2':293 var
R22865:22866 PL.Imp <> a2:292 var
R22854:22855 PL.Imp <> st:290 var
R22826:22834 PL.Imp <> aexp_halt ind
R22836:22837 PL.Imp <> a1:291 var
binder 22947:22948 <> st:294
binder 22950:22951 <> n1:295
binder 22953:22954 <> n2:296
R22971:22980 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22981:22985 PL.Imp <> bstep:270 ind
R23024:23028 PL.Imp <> BTrue constr
R22999:23001 PL.Imp <> BLe constr
R23014:23017 PL.Imp <> ANum constr
R23019:23020 PL.Imp <> n2:296 var
R23004:23007 PL.Imp <> ANum constr
R23009:23010 PL.Imp <> n1:295 var
R22987:22988 PL.Imp <> st:294 var
R22965:22968 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R22963:22964 PL.Imp <> n1:295 var
R22969:22970 PL.Imp <> n2:296 var
binder 23055:23056 <> st:297
binder 23058:23059 <> n1:298
binder 23061:23062 <> n2:299
R23078:23087 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23088:23092 PL.Imp <> bstep:270 ind
R23131:23136 PL.Imp <> BFalse constr
R23106:23108 PL.Imp <> BLe constr
R23121:23124 PL.Imp <> ANum constr
R23126:23127 PL.Imp <> n2:299 var
R23111:23114 PL.Imp <> ANum constr
R23116:23117 PL.Imp <> n1:298 var
R23094:23095 PL.Imp <> st:297 var
R23073:23075 Coq.ZArith.BinInt <> ::Z_scope:x_'>'_x not
R23071:23072 PL.Imp <> n1:298 var
R23076:23077 PL.Imp <> n2:299 var
binder 23163:23164 <> st:300
binder 23166:23167 <> b1:301
binder 23169:23171 <> b1':302
R23203:23212 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23213:23217 PL.Imp <> bstep:270 ind
R23241:23244 PL.Imp <> BNot constr
R23246:23248 PL.Imp <> b1':302 var
R23231:23234 PL.Imp <> BNot constr
R23236:23237 PL.Imp <> b1:301 var
R23219:23220 PL.Imp <> st:300 var
R23180:23184 PL.Imp <> bstep:270 ind
R23200:23202 PL.Imp <> b1':302 var
R23197:23198 PL.Imp <> b1:301 var
R23186:23187 PL.Imp <> st:300 var
binder 23275:23276 <> st:303
R23285:23289 PL.Imp <> bstep:270 ind
R23315:23320 PL.Imp <> BFalse constr
R23303:23306 PL.Imp <> BNot constr
R23308:23312 PL.Imp <> BTrue constr
R23291:23292 PL.Imp <> st:303 var
binder 23347:23348 <> st:304
R23357:23361 PL.Imp <> bstep:270 ind
R23388:23392 PL.Imp <> BTrue constr
R23375:23378 PL.Imp <> BNot constr
R23380:23385 PL.Imp <> BFalse constr
R23363:23364 PL.Imp <> st:304 var
binder 23419:23420 <> st:305
binder 23422:23423 <> b1:306
binder 23425:23427 <> b1':307
binder 23429:23430 <> b2:308
R23462:23471 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23472:23476 PL.Imp <> bstep:270 ind
R23502:23505 PL.Imp <> BAnd constr
R23511:23512 PL.Imp <> b2:308 var
R23507:23509 PL.Imp <> b1':307 var
R23489:23492 PL.Imp <> BAnd constr
R23497:23498 PL.Imp <> b2:308 var
R23494:23495 PL.Imp <> b1:306 var
R23478:23479 PL.Imp <> st:305 var
R23439:23443 PL.Imp <> bstep:270 ind
R23459:23461 PL.Imp <> b1':307 var
R23456:23457 PL.Imp <> b1:306 var
R23445:23446 PL.Imp <> st:305 var
binder 23539:23540 <> st:309
binder 23542:23542 <> b:310
R23551:23555 PL.Imp <> bstep:270 ind
R23582:23582 PL.Imp <> b:310 var
R23568:23571 PL.Imp <> BAnd constr
R23579:23579 PL.Imp <> b:310 var
R23573:23577 PL.Imp <> BTrue constr
R23557:23558 PL.Imp <> st:309 var
binder 23609:23610 <> st:311
binder 23612:23612 <> b:312
R23621:23625 PL.Imp <> bstep:270 ind
R23653:23658 PL.Imp <> BFalse constr
R23638:23641 PL.Imp <> BAnd constr
R23650:23650 PL.Imp <> b:312 var
R23643:23648 PL.Imp <> BFalse constr
R23627:23628 PL.Imp <> st:311 var
sec 23670:23674 <> cstep
ind 23711:23715 <> cstep
constr 23765:23774 <> CS_AssStep
constr 23866:23871 <> CS_Ass
constr 24010:24019 <> CS_SeqStep
constr 24132:24137 <> CS_Seq
constr 24197:24205 <> CS_IfStep
constr 24355:24363 <> CS_IfTrue
constr 24446:24455 <> CS_IfFalse
constr 24539:24546 <> CS_While
R23719:23719 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23731:23735 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23736:23736 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23748:23752 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23740:23742 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R23737:23739 PL.Imp <> com ind
R23743:23747 PL.Imp <> state def
R23723:23725 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R23720:23722 PL.Imp <> com ind
R23726:23730 PL.Imp <> state def
binder 23785:23786 <> st:315
binder 23788:23788 <> X:316
binder 23790:23790 <> a:317
binder 23792:23793 <> a':318
R23815:23824 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23825:23829 PL.Imp <> cstep:313 ind
R23846:23846 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23856:23857 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23860:23860 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23847:23850 PL.Imp <> CAss constr
R23854:23855 PL.Imp <> a':318 var
R23852:23852 PL.Imp <> X:316 var
R23858:23859 PL.Imp <> st:315 var
R23831:23831 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23840:23841 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23844:23844 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23832:23835 PL.Imp <> CAss constr
R23839:23839 PL.Imp <> a:317 var
R23837:23837 PL.Imp <> X:316 var
R23842:23843 PL.Imp <> st:315 var
R23802:23806 PL.Imp <> astep ind
R23813:23814 PL.Imp <> a':318 var
R23811:23811 PL.Imp <> a:317 var
R23808:23809 PL.Imp <> st:315 var
binder 23882:23884 <> st1:319
binder 23886:23888 <> st2:320
binder 23890:23890 <> X:321
binder 23892:23892 <> n:322
R23910:23919 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23920:23920 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23954:23964 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23965:23969 PL.Imp <> cstep:313 ind
R23994:23994 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23999:24000 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24004:24004 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23995:23998 PL.Imp <> ::imp_scope:'Skip' not
R24001:24003 PL.Imp <> st2:320 var
R23971:23971 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23987:23988 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23992:23992 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23972:23975 PL.Imp <> CAss constr
R23980:23983 PL.Imp <> ANum constr
R23985:23985 PL.Imp <> n:322 var
R23977:23977 PL.Imp <> X:321 var
R23989:23991 PL.Imp <> st1:319 var
binder 23928:23928 <> Y:323
R23937:23940 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23946:23948 Coq.Init.Logic <> ::type_scope:x_'='_x not
R23941:23943 PL.Imp <> st1:319 var
R23945:23945 PL.Imp <> Y:323 var
R23949:23951 PL.Imp <> st2:320 var
R23953:23953 PL.Imp <> Y:323 var
R23932:23935 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R23931:23931 PL.Imp <> X:321 var
R23936:23936 PL.Imp <> Y:323 var
R23906:23908 Coq.Init.Logic <> ::type_scope:x_'='_x not
R23901:23903 PL.Imp <> st2:320 var
R23905:23905 PL.Imp <> X:321 var
R23909:23909 PL.Imp <> n:322 var
binder 24030:24031 <> st:324
binder 24033:24034 <> c1:325
binder 24036:24038 <> c1':326
binder 24040:24042 <> st':327
binder 24044:24045 <> c2:328
R24079:24088 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24089:24093 PL.Imp <> cstep:313 ind
R24111:24111 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24121:24122 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24126:24126 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24115:24118 PL.Imp <> ::imp_scope:x_';;'_x not
R24112:24114 PL.Imp <> c1':326 var
R24119:24120 PL.Imp <> c2:328 var
R24123:24125 PL.Imp <> st':327 var
R24095:24095 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24104:24106 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24109:24109 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24098:24101 PL.Imp <> ::imp_scope:x_';;'_x not
R24096:24097 PL.Imp <> c1:325 var
R24102:24103 PL.Imp <> c2:328 var
R24107:24108 PL.Imp <> st:324 var
R24054:24058 PL.Imp <> cstep:313 ind
R24069:24069 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24073:24074 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24078:24078 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24070:24072 PL.Imp <> c1':326 var
R24075:24077 PL.Imp <> st':327 var
R24060:24060 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24063:24064 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24067:24067 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24061:24062 PL.Imp <> c1:325 var
R24065:24066 PL.Imp <> st:324 var
binder 24148:24149 <> st:329
binder 24151:24152 <> c2:330
R24161:24165 PL.Imp <> cstep:313 ind
R24184:24184 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24187:24188 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24191:24191 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24185:24186 PL.Imp <> c2:330 var
R24189:24190 PL.Imp <> st:329 var
R24167:24167 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24178:24179 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24182:24182 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24172:24175 PL.Imp <> ::imp_scope:x_';;'_x not
R24168:24171 PL.Imp <> ::imp_scope:'Skip' not
R24176:24177 PL.Imp <> c2:330 var
R24180:24181 PL.Imp <> st:329 var
binder 24216:24217 <> st:331
binder 24219:24219 <> b:332
binder 24221:24222 <> b':333
binder 24224:24225 <> c1:334
binder 24227:24228 <> c2:335
R24250:24259 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24260:24264 PL.Imp <> cstep:313 ind
R24316:24316 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24345:24346 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24349:24349 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24317:24319 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24322:24328 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24331:24336 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24339:24344 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24320:24321 PL.Imp <> b':333 var
R24329:24330 PL.Imp <> c1:334 var
R24337:24338 PL.Imp <> c2:335 var
R24347:24348 PL.Imp <> st:331 var
R24274:24274 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24302:24303 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24306:24306 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24275:24277 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24279:24285 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24288:24293 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24296:24301 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24278:24278 PL.Imp <> b:332 var
R24286:24287 PL.Imp <> c1:334 var
R24294:24295 PL.Imp <> c2:335 var
R24304:24305 PL.Imp <> st:331 var
R24237:24241 PL.Imp <> bstep ind
R24248:24249 PL.Imp <> b':333 var
R24246:24246 PL.Imp <> b:332 var
R24243:24244 PL.Imp <> st:331 var
binder 24374:24375 <> st:336
binder 24377:24378 <> c1:337
binder 24380:24381 <> c2:338
R24390:24394 PL.Imp <> cstep:313 ind
R24433:24433 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24436:24437 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24440:24440 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24434:24435 PL.Imp <> c1:337 var
R24438:24439 PL.Imp <> st:336 var
R24396:24396 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24427:24428 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24431:24431 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24397:24399 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24405:24410 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24413:24418 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24421:24426 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24400:24404 PL.Imp <> BTrue constr
R24411:24412 PL.Imp <> c1:337 var
R24419:24420 PL.Imp <> c2:338 var
R24429:24430 PL.Imp <> st:336 var
binder 24466:24467 <> st:339
binder 24469:24470 <> c1:340
binder 24472:24473 <> c2:341
R24482:24486 PL.Imp <> cstep:313 ind
R24526:24526 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24529:24530 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24533:24533 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24527:24528 PL.Imp <> c2:341 var
R24531:24532 PL.Imp <> st:339 var
R24488:24488 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24520:24521 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24524:24524 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24489:24491 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24498:24503 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24506:24511 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24514:24519 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24492:24497 PL.Imp <> BFalse constr
R24504:24505 PL.Imp <> c1:340 var
R24512:24513 PL.Imp <> c2:341 var
R24522:24523 PL.Imp <> st:339 var
binder 24557:24558 <> st:342
binder 24560:24560 <> b:343
binder 24562:24562 <> c:344
R24571:24575 PL.Imp <> cstep:313 ind
R24621:24621 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24675:24676 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24679:24679 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24622:24624 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24626:24632 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24658:24664 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24669:24674 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24625:24625 PL.Imp <> b:343 var
R24634:24636 PL.Imp <> ::imp_scope:x_';;'_x not
R24633:24633 PL.Imp <> c:344 var
R24637:24642 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R24644:24647 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R24649:24657 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R24643:24643 PL.Imp <> b:343 var
R24648:24648 PL.Imp <> c:344 var
R24665:24668 PL.Imp <> ::imp_scope:'Skip' not
R24677:24678 PL.Imp <> st:342 var
R24585:24585 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24607:24608 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24611:24611 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24586:24591 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R24593:24596 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R24598:24606 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R24592:24592 PL.Imp <> b:343 var
R24597:24597 PL.Imp <> c:344 var
R24609:24610 PL.Imp <> st:342 var
R24687:24691 PL.Imp cstep <> sec
def 24706:24716 <> multi_astep
R24723:24727 PL.Imp <> state def
binder 24719:24720 <> st:345
R24735:24738 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24743:24746 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24739:24742 PL.Imp <> aexp ind
R24731:24734 PL.Imp <> aexp ind
R24755:24769 PL.RTClosure <> clos_refl_trans ind
R24772:24776 PL.Imp <> astep ind
R24778:24779 PL.Imp <> st:345 var
def 24795:24805 <> multi_bstep
R24812:24816 PL.Imp <> state def
binder 24808:24809 <> st:346
R24824:24827 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24832:24835 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24828:24831 PL.Imp <> bexp ind
R24820:24823 PL.Imp <> bexp ind
R24844:24858 PL.RTClosure <> clos_refl_trans ind
R24861:24865 PL.Imp <> bstep ind
R24867:24868 PL.Imp <> st:346 var
def 24884:24894 <> multi_cstep
R24908:24911 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24923:24926 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24915:24917 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R24912:24914 PL.Imp <> com ind
R24918:24922 PL.Imp <> state def
R24900:24902 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R24897:24899 PL.Imp <> com ind
R24903:24907 PL.Imp <> state def
R24935:24949 PL.RTClosure <> clos_refl_trans ind
R24951:24955 PL.Imp <> cstep ind
mod 25151:25161 <> Assertion_S
ind 25175:25178 Assertion_S term
constr 25194:25197 Assertion_S TNum
constr 25211:25217 Assertion_S TDenote
constr 25234:25238 Assertion_S TPlus
constr 25259:25264 Assertion_S TMinus
constr 25285:25289 Assertion_S TMult
R25204:25204 Coq.Numbers.BinNums <> Z ind
binder 25200:25200 <> n:349
R25224:25227 PL.Imp <> aexp ind
binder 25220:25220 <> a:350
R25249:25252 PL.Imp <> term:347 ind
binder 25241:25242 <> t1:351
binder 25244:25245 <> t2:352
R25275:25278 PL.Imp <> term:347 ind
binder 25267:25268 <> t1:353
binder 25270:25271 <> t2:354
R25300:25303 PL.Imp <> term:347 ind
binder 25292:25293 <> t1:355
binder 25295:25296 <> t2:356
R25311:25336 PL.Imp Assertion_S TNum constr
R25431:25435 PL.Imp Assertion_S TPlus constr
not 25419:25419 Assertion_S ::term_scope:x_'+'_x
R25511:25516 PL.Imp Assertion_S TMinus constr
not 25499:25499 Assertion_S ::term_scope:x_'-'_x
R25592:25596 PL.Imp Assertion_S TMult constr
not 25580:25580 Assertion_S ::term_scope:x_'*'_x
R25674:25680 PL.Imp Assertion_S TDenote constr
not 25660:25660 Assertion_S ::term_scope:'{['_x_']}'
ind 25750:25758 Assertion_S Assertion
constr 25774:25776 Assertion_S DLe
constr 25797:25799 Assertion_S DLt
constr 25820:25822 Assertion_S DEq
constr 25843:25846 Assertion_S DInj
constr 25862:25866 Assertion_S DProp
constr 25882:25884 Assertion_S DOr
constr 25910:25913 Assertion_S DAnd
constr 25939:25942 Assertion_S DNot
constr 25963:25969 Assertion_S DExists
constr 25995:26001 Assertion_S DForall
R25787:25790 PL.Imp Assertion_S term ind
binder 25779:25780 <> t1:359
binder 25782:25783 <> t2:360
R25810:25813 PL.Imp Assertion_S term ind
binder 25802:25803 <> t1:361
binder 25805:25806 <> t2:362
R25833:25836 PL.Imp Assertion_S term ind
binder 25825:25826 <> t1:363
binder 25828:25829 <> t2:364
R25852:25855 PL.Imp <> bexp ind
binder 25849:25849 <> b:365
binder 25869:25869 <> P:366
R25895:25903 PL.Imp <> Assertion:357 ind
binder 25887:25888 <> d1:367
binder 25890:25891 <> d2:368
R25924:25932 PL.Imp <> Assertion:357 ind
binder 25916:25917 <> d1:369
binder 25919:25920 <> d2:370
R25948:25956 PL.Imp <> Assertion:357 ind
binder 25945:25945 <> d:371
R25976:25979 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25980:25988 PL.Imp <> Assertion:357 ind
R25975:25975 Coq.Numbers.BinNums <> Z ind
binder 25972:25972 <> d:372
R26008:26011 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26012:26020 PL.Imp <> Assertion:357 ind
R26007:26007 Coq.Numbers.BinNums <> Z ind
binder 26004:26004 <> d:373
R26025:26064 PL.Imp Assertion_S DProp constr
R26170:26172 PL.Imp Assertion_S DLe constr
not 26157:26157 Assertion_S ::assert_scope:x_'<='_x
R26268:26270 PL.Imp Assertion_S DLt constr
not 26254:26254 Assertion_S ::assert_scope:x_'<'_x
R26364:26366 PL.Imp Assertion_S DEq constr
not 26352:26352 Assertion_S ::assert_scope:x_'='_x
R26462:26465 PL.Imp Assertion_S DInj constr
not 26448:26448 Assertion_S ::assert_scope:'{['_x_']}'
R26550:26552 PL.Imp Assertion_S DOr constr
not 26535:26535 Assertion_S ::assert_scope:x_'OR'_x
R26634:26637 PL.Imp Assertion_S DAnd constr
not 26618:26618 Assertion_S ::assert_scope:x_'AND'_x
R26717:26720 PL.Imp Assertion_S DNot constr
not 26703:26703 Assertion_S ::assert_scope:'NOT'_x
R26809:26815 PL.Imp Assertion_S DExists constr
R26825:26825 Coq.Numbers.BinNums <> Z ind
binder 26822:26822 <> x:374
not 26785:26785 Assertion_S ::assert_scope:'EXISTS'_x_','_x
R26938:26944 PL.Imp Assertion_S DForall constr
R26954:26954 Coq.Numbers.BinNums <> Z ind
binder 26951:26951 <> x:375
not 26914:26914 Assertion_S ::assert_scope:'FORALL'_x_','_x
def 27046:27056 Assertion_S eqb_compute
R27062:27065 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R27069:27072 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R27073:27076 Coq.Init.Datatypes <> bool ind
R27066:27068 Coq.Init.Datatypes <> nat ind
R27059:27061 Coq.Init.Datatypes <> nat ind
R27098:27100 Coq.Init.Datatypes <> nat ind
binder 27092:27092 <> n:376
binder 27094:27094 <> m:377
R27116:27119 Coq.Init.Datatypes <> bool ind
R27132:27132 PL.Imp <> n:376 var
R27158:27158 PL.Imp <> m:377 var
R27189:27192 Coq.Init.Datatypes <> true constr
R27209:27209 Coq.Init.Datatypes <> S constr
R27216:27220 Coq.Init.Datatypes <> false constr
R27243:27243 Coq.Init.Datatypes <> S constr
R27257:27257 PL.Imp <> m:377 var
R27287:27291 Coq.Init.Datatypes <> false constr
R27307:27307 Coq.Init.Datatypes <> S constr
R27315:27317 PL.Imp <> eqb:378 var
sec 27357:27361 Assertion_S subst
var 27374:27374 Assertion_S.subst X
R27377:27379 PL.Imp <> var def
var 27391:27391 Assertion_S.subst a
R27394:27397 PL.Imp <> aexp ind
def 27410:27417 Assertion_S aexp_sub
R27424:27427 PL.Imp <> aexp ind
binder 27420:27421 <> a0:384
R27431:27434 PL.Imp <> aexp ind
R27449:27450 PL.Imp <> a0:384 var
R27463:27466 PL.Imp <> ANum constr
R27473:27476 PL.Imp <> ANum constr
R27486:27488 PL.Imp <> AId constr
R27508:27518 PL.Imp Assertion_S eqb_compute def
R27520:27520 PL.Imp <> Assertion_S.subst.X var
R27556:27558 PL.Imp <> AId constr
R27539:27539 PL.Imp <> Assertion_S.subst.a var
R27569:27573 PL.Imp <> APlus constr
R27584:27588 PL.Imp <> APlus constr
R27605:27612 PL.Imp <> aexp_sub:385 def
R27591:27598 PL.Imp <> aexp_sub:385 def
R27624:27629 PL.Imp <> AMinus constr
R27640:27645 PL.Imp <> AMinus constr
R27662:27669 PL.Imp <> aexp_sub:385 def
R27648:27655 PL.Imp <> aexp_sub:385 def
R27681:27685 PL.Imp <> AMult constr
R27696:27700 PL.Imp <> AMult constr
R27717:27724 PL.Imp <> aexp_sub:385 def
R27703:27710 PL.Imp <> aexp_sub:385 def
def 27749:27756 Assertion_S bexp_sub
R27762:27765 PL.Imp <> bexp ind
binder 27759:27759 <> b:387
R27769:27772 PL.Imp <> bexp ind
R27787:27787 PL.Imp <> b:387 var
R27800:27804 PL.Imp <> BTrue constr
R27809:27813 PL.Imp <> BTrue constr
R27821:27826 PL.Imp <> BFalse constr
R27831:27836 PL.Imp <> BFalse constr
R27844:27846 PL.Imp <> BEq constr
R27857:27859 PL.Imp <> BEq constr
R27876:27883 PL.Imp Assertion_S aexp_sub def
R27862:27869 PL.Imp Assertion_S aexp_sub def
R27895:27897 PL.Imp <> BLe constr
R27908:27910 PL.Imp <> BLe constr
R27927:27934 PL.Imp Assertion_S aexp_sub def
R27913:27920 PL.Imp Assertion_S aexp_sub def
R27946:27949 PL.Imp <> BNot constr
R27956:27959 PL.Imp <> BNot constr
R27962:27969 PL.Imp <> bexp_sub:388 def
R27971:27971 PL.Imp <> b:387 var
R27980:27983 PL.Imp <> BAnd constr
R27994:27997 PL.Imp <> BAnd constr
R28014:28021 PL.Imp <> bexp_sub:388 def
R28000:28007 PL.Imp <> bexp_sub:388 def
def 28046:28053 Assertion_S term_sub
R28059:28062 PL.Imp Assertion_S term ind
binder 28056:28056 <> t:390
R28078:28078 PL.Imp <> t:390 var
R28091:28094 PL.Imp Assertion_S TNum constr
R28101:28104 PL.Imp Assertion_S TNum constr
R28114:28120 PL.Imp Assertion_S TDenote constr
R28127:28133 PL.Imp Assertion_S TDenote constr
R28136:28143 PL.Imp Assertion_S aexp_sub def
R28154:28158 PL.Imp Assertion_S TPlus constr
R28169:28173 PL.Imp Assertion_S TPlus constr
R28190:28197 PL.Imp <> term_sub:391 def
R28176:28183 PL.Imp <> term_sub:391 def
R28209:28214 PL.Imp Assertion_S TMinus constr
R28225:28230 PL.Imp Assertion_S TMinus constr
R28247:28254 PL.Imp <> term_sub:391 def
R28233:28240 PL.Imp <> term_sub:391 def
R28266:28270 PL.Imp Assertion_S TMult constr
R28281:28285 PL.Imp Assertion_S TMult constr
R28302:28309 PL.Imp <> term_sub:391 def
R28288:28295 PL.Imp <> term_sub:391 def
def 28334:28341 Assertion_S assn_sub
R28347:28355 PL.Imp Assertion_S Assertion ind
binder 28344:28344 <> d:393
R28359:28367 PL.Imp Assertion_S Assertion ind
R28382:28382 PL.Imp <> d:393 var
R28395:28397 PL.Imp Assertion_S DLe constr
R28408:28410 PL.Imp Assertion_S DLe constr
R28427:28434 PL.Imp Assertion_S term_sub def
R28413:28420 PL.Imp Assertion_S term_sub def
R28446:28448 PL.Imp Assertion_S DLt constr
R28459:28461 PL.Imp Assertion_S DLt constr
R28478:28485 PL.Imp Assertion_S term_sub def
R28464:28471 PL.Imp Assertion_S term_sub def
R28497:28499 PL.Imp Assertion_S DEq constr
R28510:28512 PL.Imp Assertion_S DEq constr
R28529:28536 PL.Imp Assertion_S term_sub def
R28515:28522 PL.Imp Assertion_S term_sub def
R28548:28551 PL.Imp Assertion_S DInj constr
R28558:28561 PL.Imp Assertion_S DInj constr
R28564:28571 PL.Imp Assertion_S bexp_sub def
R28582:28586 PL.Imp Assertion_S DProp constr
R28593:28597 PL.Imp Assertion_S DProp constr
R28607:28609 PL.Imp Assertion_S DOr constr
R28620:28622 PL.Imp Assertion_S DOr constr
R28639:28646 PL.Imp <> assn_sub:394 def
R28625:28632 PL.Imp <> assn_sub:394 def
R28658:28661 PL.Imp Assertion_S DAnd constr
R28672:28675 PL.Imp Assertion_S DAnd constr
R28692:28699 PL.Imp <> assn_sub:394 def
R28678:28685 PL.Imp <> assn_sub:394 def
R28711:28714 PL.Imp Assertion_S DNot constr
R28721:28724 PL.Imp Assertion_S DNot constr
R28727:28734 PL.Imp <> assn_sub:394 def
R28736:28736 PL.Imp <> d:393 var
R28745:28751 PL.Imp Assertion_S DExists constr
R28758:28764 PL.Imp Assertion_S DExists constr
R28774:28774 Coq.Numbers.BinNums <> Z ind
binder 28771:28771 <> z:396
R28779:28786 PL.Imp <> assn_sub:394 def
R28789:28789 PL.Imp <> d:393 var
R28791:28791 PL.Imp <> z:396 var
R28801:28807 PL.Imp Assertion_S DForall constr
R28814:28820 PL.Imp Assertion_S DForall constr
R28830:28830 Coq.Numbers.BinNums <> Z ind
binder 28827:28827 <> z:397
R28835:28842 PL.Imp <> assn_sub:394 def
R28845:28845 PL.Imp <> d:393 var
R28847:28847 PL.Imp <> z:397 var
R28865:28869 PL.Imp Assertion_S.subst <> sec
def 28884:28894 Assertion_S aexp_denote
R28901:28905 PL.Imp <> state def
binder 28897:28898 <> st:398
R28912:28915 PL.Imp <> aexp ind
binder 28909:28909 <> a:399
R28919:28919 Coq.Numbers.BinNums <> Z ind
R28926:28930 PL.Imp <> aeval def
R28934:28935 PL.Imp <> st:398 var
R28932:28932 PL.Imp <> a:399 var
def 28950:28960 Assertion_S bexp_denote
R28967:28971 PL.Imp <> state def
binder 28963:28964 <> st:400
R28978:28981 PL.Imp <> bexp ind
binder 28975:28975 <> b:401
R28995:28999 PL.Imp <> beval def
R29003:29004 PL.Imp <> st:400 var
R29001:29001 PL.Imp <> b:401 var
def 29017:29027 Assertion_S term_denote
R29034:29038 PL.Imp <> state def
binder 29030:29031 <> st:402
R29045:29048 PL.Imp Assertion_S term ind
binder 29042:29042 <> t:403
R29052:29052 Coq.Numbers.BinNums <> Z ind
R29065:29065 PL.Imp <> t:403 var
R29076:29079 PL.Imp Assertion_S TNum constr
R29092:29098 PL.Imp Assertion_S TDenote constr
R29105:29115 PL.Imp Assertion_S aexp_denote def
R29117:29118 PL.Imp <> st:402 var
R29126:29130 PL.Imp Assertion_S TPlus constr
R29141:29141 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R29159:29163 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R29181:29181 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R29142:29152 PL.Imp <> term_denote:404 def
R29154:29155 PL.Imp <> st:402 var
R29164:29174 PL.Imp <> term_denote:404 def
R29176:29177 PL.Imp <> st:402 var
R29187:29192 PL.Imp Assertion_S TMinus constr
R29203:29203 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R29221:29225 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R29243:29243 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R29204:29214 PL.Imp <> term_denote:404 def
R29216:29217 PL.Imp <> st:402 var
R29226:29236 PL.Imp <> term_denote:404 def
R29238:29239 PL.Imp <> st:402 var
R29249:29253 PL.Imp Assertion_S TMult constr
R29264:29264 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R29282:29286 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R29304:29304 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R29265:29275 PL.Imp <> term_denote:404 def
R29277:29278 PL.Imp <> st:402 var
R29287:29297 PL.Imp <> term_denote:404 def
R29299:29300 PL.Imp <> st:402 var
def 29323:29338 Assertion_S Assertion_denote
R29345:29349 PL.Imp <> state def
binder 29341:29342 <> st:406
R29356:29364 PL.Imp Assertion_S Assertion ind
binder 29353:29353 <> d:407
R29384:29384 PL.Imp <> d:407 var
R29395:29397 PL.Imp Assertion_S DLe constr
R29408:29408 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R29426:29431 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R29449:29449 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R29409:29419 PL.Imp Assertion_S term_denote def
R29421:29422 PL.Imp <> st:406 var
R29432:29442 PL.Imp Assertion_S term_denote def
R29444:29445 PL.Imp <> st:406 var
R29455:29457 PL.Imp Assertion_S DLt constr
R29468:29468 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R29486:29490 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R29508:29508 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R29469:29479 PL.Imp Assertion_S term_denote def
R29481:29482 PL.Imp <> st:406 var
R29491:29501 PL.Imp Assertion_S term_denote def
R29503:29504 PL.Imp <> st:406 var
R29514:29516 PL.Imp Assertion_S DEq constr
R29527:29527 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29545:29549 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29567:29567 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29528:29538 PL.Imp Assertion_S term_denote def
R29540:29541 PL.Imp <> st:406 var
R29550:29560 PL.Imp Assertion_S term_denote def
R29562:29563 PL.Imp <> st:406 var
R29573:29576 PL.Imp Assertion_S DInj constr
R29583:29593 PL.Imp Assertion_S bexp_denote def
R29595:29596 PL.Imp <> st:406 var
R29604:29608 PL.Imp Assertion_S DProp constr
R29621:29623 PL.Imp Assertion_S DOr constr
R29634:29634 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R29657:29662 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R29685:29685 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R29635:29650 PL.Imp <> Assertion_denote:408 def
R29652:29653 PL.Imp <> st:406 var
R29663:29678 PL.Imp <> Assertion_denote:408 def
R29680:29681 PL.Imp <> st:406 var
R29691:29694 PL.Imp Assertion_S DAnd constr
R29705:29705 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R29728:29733 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R29756:29756 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R29706:29721 PL.Imp <> Assertion_denote:408 def
R29723:29724 PL.Imp <> st:406 var
R29734:29749 PL.Imp <> Assertion_denote:408 def
R29751:29752 PL.Imp <> st:406 var
R29762:29765 PL.Imp Assertion_S DNot constr
R29772:29774 Coq.Init.Logic <> ::type_scope:'~'_x not
R29796:29796 Coq.Init.Logic <> ::type_scope:'~'_x not
R29775:29790 PL.Imp <> Assertion_denote:408 def
R29795:29795 PL.Imp <> d:407 var
R29792:29793 PL.Imp <> st:406 var
R29802:29808 PL.Imp Assertion_S DExists constr
R29815:29821 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R29823:29824 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 29822:29822 <> k:410
R29825:29840 PL.Imp <> Assertion_denote:408 def
R29846:29846 PL.Imp <> d:407 var
R29848:29848 PL.Imp <> k:410 var
R29842:29843 PL.Imp <> st:406 var
R29855:29861 PL.Imp Assertion_S DForall constr
binder 29875:29875 <> k:411
R29878:29893 PL.Imp <> Assertion_denote:408 def
R29899:29899 PL.Imp <> d:407 var
R29901:29901 PL.Imp <> k:411 var
R29895:29896 PL.Imp <> st:406 var
def 29923:29929 Assertion_S derives
R29941:29944 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29954:29957 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29945:29953 PL.Imp Assertion_S Assertion ind
R29932:29940 PL.Imp Assertion_S Assertion ind
R29979:29987 PL.Imp Assertion_S Assertion ind
binder 29972:29973 <> d1:412
binder 29975:29976 <> d2:413
binder 30002:30003 <> st:414
R30028:30031 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30032:30047 PL.Imp Assertion_S Assertion_denote def
R30052:30053 PL.Imp <> d2:413 var
R30049:30050 PL.Imp <> st:414 var
R30006:30021 PL.Imp Assertion_S Assertion_denote def
R30026:30027 PL.Imp <> d1:412 var
R30023:30024 PL.Imp <> st:414 var
R30065:30071 PL.Imp Assertion_S derives def
def 30086:30097 Assertion_S equiv_assert
R30105:30113 PL.Imp Assertion_S Assertion ind
binder 30100:30100 <> P:415
binder 30102:30102 <> Q:416
R30138:30141 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R30127:30133 PL.Imp Assertion_S derives def
R30137:30137 PL.Imp <> Q:416 var
R30135:30135 PL.Imp <> P:415 var
R30142:30148 PL.Imp Assertion_S derives def
R30152:30152 PL.Imp <> P:415 var
R30150:30150 PL.Imp <> Q:416 var
ax 30166:30177 Assertion_S hoare_triple
R30189:30192 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30196:30199 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30209:30212 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30200:30208 PL.Imp Assertion_S Assertion ind
R30193:30195 PL.Imp <> com ind
R30180:30188 PL.Imp Assertion_S Assertion ind
R30247:30253 PL.Imp Assertion_S derives def
not 30229:30229 Assertion_S :::x_'|--'_x
R30346:30357 PL.Imp Assertion_S equiv_assert def
not 30325:30325 Assertion_S :::x_'--||--'_x
R30435:30446 PL.Imp Assertion_S hoare_triple defax
not 30407:30407 Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}'
prf 30496:30507 Assertion_S FOL_complete
R30524:30532 PL.Imp Assertion_S Assertion ind
binder 30517:30518 <> d1:418
binder 30520:30521 <> d2:419
R30537:30537 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30597:30603 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30606:30610 PL.Imp Assertion_S :::x_'|--'_x not
R30604:30605 PL.Imp <> d1:418 var
R30611:30612 PL.Imp <> d2:419 var
binder 30545:30546 <> st:420
R30571:30574 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30575:30590 PL.Imp Assertion_S Assertion_denote def
R30595:30596 PL.Imp <> d2:419 var
R30592:30593 PL.Imp <> st:420 var
R30549:30564 PL.Imp Assertion_S Assertion_denote def
R30569:30570 PL.Imp <> d1:418 var
R30566:30567 PL.Imp <> st:420 var
sec 30657:30661 Assertion_S simpl
def 30674:30683 Assertion_S aexp_simpl
R30689:30692 PL.Imp <> aexp ind
binder 30686:30686 <> a:421
R30696:30699 PL.Imp Assertion_S term ind
R30714:30714 PL.Imp <> a:421 var
R30727:30730 PL.Imp <> ANum constr
R30737:30740 PL.Imp Assertion_S TNum constr
R30750:30752 PL.Imp <> AId constr
R30759:30765 PL.Imp Assertion_S TDenote constr
R30768:30770 PL.Imp <> AId constr
R30781:30785 PL.Imp <> APlus constr
R30796:30800 PL.Imp Assertion_S TPlus constr
R30819:30828 PL.Imp <> aexp_simpl:422 def
R30803:30812 PL.Imp <> aexp_simpl:422 def
R30840:30845 PL.Imp <> AMinus constr
R30856:30861 PL.Imp Assertion_S TMinus constr
R30880:30889 PL.Imp <> aexp_simpl:422 def
R30864:30873 PL.Imp <> aexp_simpl:422 def
R30901:30905 PL.Imp <> AMult constr
R30916:30920 PL.Imp Assertion_S TMult constr
R30939:30948 PL.Imp <> aexp_simpl:422 def
R30923:30932 PL.Imp <> aexp_simpl:422 def
def 30973:30982 Assertion_S bexp_simpl
R30988:30991 PL.Imp <> bexp ind
binder 30985:30985 <> b:424
R30995:31003 PL.Imp Assertion_S Assertion ind
R31018:31018 PL.Imp <> b:424 var
R31031:31035 PL.Imp <> BTrue constr
R31040:31044 PL.Imp Assertion_S DProp constr
R31046:31049 Coq.Init.Logic <> True ind
R31057:31062 PL.Imp <> BFalse constr
R31067:31071 PL.Imp Assertion_S DProp constr
R31073:31077 Coq.Init.Logic <> False ind
R31085:31087 PL.Imp <> BEq constr
R31098:31100 PL.Imp Assertion_S DEq constr
R31119:31128 PL.Imp Assertion_S aexp_simpl def
R31103:31112 PL.Imp Assertion_S aexp_simpl def
R31140:31142 PL.Imp <> BLe constr
R31153:31155 PL.Imp Assertion_S DLe constr
R31174:31183 PL.Imp Assertion_S aexp_simpl def
R31158:31167 PL.Imp Assertion_S aexp_simpl def
R31195:31198 PL.Imp <> BNot constr
R31205:31208 PL.Imp Assertion_S DNot constr
R31211:31220 PL.Imp <> bexp_simpl:425 def
R31222:31222 PL.Imp <> b:424 var
R31231:31234 PL.Imp <> BAnd constr
R31245:31248 PL.Imp Assertion_S DAnd constr
R31267:31276 PL.Imp <> bexp_simpl:425 def
R31251:31260 PL.Imp <> bexp_simpl:425 def
def 31301:31310 Assertion_S term_simpl
R31316:31319 PL.Imp Assertion_S term ind
binder 31313:31313 <> t:427
R31335:31335 PL.Imp <> t:427 var
R31348:31351 PL.Imp Assertion_S TNum constr
R31358:31361 PL.Imp Assertion_S TNum constr
R31371:31377 PL.Imp Assertion_S TDenote constr
R31384:31393 PL.Imp Assertion_S aexp_simpl def
R31403:31407 PL.Imp Assertion_S TPlus constr
R31418:31422 PL.Imp Assertion_S TPlus constr
R31441:31450 PL.Imp <> term_simpl:428 def
R31425:31434 PL.Imp <> term_simpl:428 def
R31462:31467 PL.Imp Assertion_S TMinus constr
R31478:31483 PL.Imp Assertion_S TMinus constr
R31502:31511 PL.Imp <> term_simpl:428 def
R31486:31495 PL.Imp <> term_simpl:428 def
R31523:31527 PL.Imp Assertion_S TMult constr
R31538:31542 PL.Imp Assertion_S TMult constr
R31561:31570 PL.Imp <> term_simpl:428 def
R31545:31554 PL.Imp <> term_simpl:428 def
def 31595:31604 Assertion_S assn_simpl
R31610:31618 PL.Imp Assertion_S Assertion ind
binder 31607:31607 <> d:430
R31622:31630 PL.Imp Assertion_S Assertion ind
R31645:31645 PL.Imp <> d:430 var
R31658:31660 PL.Imp Assertion_S DLe constr
R31671:31673 PL.Imp Assertion_S DLe constr
R31692:31701 PL.Imp Assertion_S term_simpl def
R31676:31685 PL.Imp Assertion_S term_simpl def
R31713:31715 PL.Imp Assertion_S DLt constr
R31726:31728 PL.Imp Assertion_S DLt constr
R31747:31756 PL.Imp Assertion_S term_simpl def
R31731:31740 PL.Imp Assertion_S term_simpl def
R31768:31770 PL.Imp Assertion_S DEq constr
R31781:31783 PL.Imp Assertion_S DEq constr
R31802:31811 PL.Imp Assertion_S term_simpl def
R31786:31795 PL.Imp Assertion_S term_simpl def
R31823:31826 PL.Imp Assertion_S DInj constr
R31833:31842 PL.Imp Assertion_S bexp_simpl def
R31852:31856 PL.Imp Assertion_S DProp constr
R31863:31867 PL.Imp Assertion_S DProp constr
R31877:31879 PL.Imp Assertion_S DOr constr
R31890:31892 PL.Imp Assertion_S DOr constr
R31911:31920 PL.Imp <> assn_simpl:431 def
R31895:31904 PL.Imp <> assn_simpl:431 def
R31932:31935 PL.Imp Assertion_S DAnd constr
R31946:31949 PL.Imp Assertion_S DAnd constr
R31968:31977 PL.Imp <> assn_simpl:431 def
R31952:31961 PL.Imp <> assn_simpl:431 def
R31989:31992 PL.Imp Assertion_S DNot constr
R31999:32002 PL.Imp Assertion_S DNot constr
R32005:32014 PL.Imp <> assn_simpl:431 def
R32016:32016 PL.Imp <> d:430 var
R32025:32031 PL.Imp Assertion_S DExists constr
R32038:32044 PL.Imp Assertion_S DExists constr
R32054:32054 Coq.Numbers.BinNums <> Z ind
binder 32051:32051 <> z:433
R32059:32068 PL.Imp <> assn_simpl:431 def
R32071:32071 PL.Imp <> d:430 var
R32073:32073 PL.Imp <> z:433 var
R32083:32089 PL.Imp Assertion_S DForall constr
R32096:32102 PL.Imp Assertion_S DForall constr
R32112:32112 Coq.Numbers.BinNums <> Z ind
binder 32109:32109 <> z:434
R32117:32126 PL.Imp <> assn_simpl:431 def
R32129:32129 PL.Imp <> d:430 var
R32131:32131 PL.Imp <> z:434 var
ind 32155:32169 Assertion_S elim_trivial_ex
constr 32210:32231 Assertion_S elim_trivial_ex_kernal
constr 32353:32371 Assertion_S elim_trivial_ex_ex'
constr 32514:32533 Assertion_S elim_trivial_ex_all'
constr 32676:32693 Assertion_S elim_trivial_ex_or
constr 32857:32875 Assertion_S elim_trivial_ex_and
constr 33041:33059 Assertion_S elim_trivial_ex_not
constr 33171:33190 Assertion_S elim_trivial_ex_atom
R32181:32184 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32194:32197 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32185:32193 PL.Imp Assertion_S Assertion ind
R32172:32180 PL.Imp Assertion_S Assertion ind
R32253:32261 PL.Imp Assertion_S Assertion ind
binder 32247:32247 <> d:437
binder 32249:32250 <> d':438
R32292:32303 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32304:32318 PL.Imp <> elim_trivial_ex:435 ind
R32346:32347 PL.Imp <> d':438 var
R32321:32327 PL.Imp Assertion_S DExists constr
R32337:32337 Coq.Numbers.BinNums <> Z ind
binder 32334:32334 <> z:439
R32342:32342 PL.Imp <> d:437 var
R32272:32286 PL.Imp <> elim_trivial_ex:435 ind
R32290:32291 PL.Imp <> d':438 var
R32288:32288 PL.Imp <> d:437 var
R32394:32397 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32398:32406 PL.Imp Assertion_S Assertion ind
R32393:32393 Coq.Numbers.BinNums <> Z ind
binder 32387:32387 <> d:440
binder 32389:32390 <> d':441
R32417:32417 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32456:32468 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32469:32483 PL.Imp <> elim_trivial_ex:435 ind
R32498:32504 PL.Imp Assertion_S DExists constr
R32506:32507 PL.Imp <> d':441 var
R32486:32492 PL.Imp Assertion_S DExists constr
R32494:32494 PL.Imp <> d:440 var
binder 32425:32425 <> z:442
R32428:32442 PL.Imp <> elim_trivial_ex:435 ind
R32451:32452 PL.Imp <> d':441 var
R32454:32454 PL.Imp <> z:442 var
R32445:32445 PL.Imp <> d:440 var
R32447:32447 PL.Imp <> z:442 var
R32556:32559 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32560:32568 PL.Imp Assertion_S Assertion ind
R32555:32555 Coq.Numbers.BinNums <> Z ind
binder 32549:32549 <> d:443
binder 32551:32552 <> d':444
R32579:32579 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32618:32630 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32631:32645 PL.Imp <> elim_trivial_ex:435 ind
R32660:32666 PL.Imp Assertion_S DForall constr
R32668:32669 PL.Imp <> d':444 var
R32648:32654 PL.Imp Assertion_S DForall constr
R32656:32656 PL.Imp <> d:443 var
binder 32587:32587 <> z:445
R32590:32604 PL.Imp <> elim_trivial_ex:435 ind
R32613:32614 PL.Imp <> d':444 var
R32616:32616 PL.Imp <> z:445 var
R32607:32607 PL.Imp <> d:443 var
R32609:32609 PL.Imp <> z:445 var
R32724:32732 PL.Imp Assertion_S Assertion ind
binder 32709:32710 <> d1:446
binder 32712:32713 <> d2:447
binder 32715:32717 <> d1':448
binder 32719:32721 <> d2':449
R32765:32776 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32799:32810 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32811:32825 PL.Imp <> elim_trivial_ex:435 ind
R32840:32842 PL.Imp Assertion_S DOr constr
R32848:32850 PL.Imp <> d2':449 var
R32844:32846 PL.Imp <> d1':448 var
R32828:32830 PL.Imp Assertion_S DOr constr
R32835:32836 PL.Imp <> d2:447 var
R32832:32833 PL.Imp <> d1:446 var
R32777:32791 PL.Imp <> elim_trivial_ex:435 ind
R32796:32798 PL.Imp <> d2':449 var
R32793:32794 PL.Imp <> d2:447 var
R32743:32757 PL.Imp <> elim_trivial_ex:435 ind
R32762:32764 PL.Imp <> d1':448 var
R32759:32760 PL.Imp <> d1:446 var
R32906:32914 PL.Imp Assertion_S Assertion ind
binder 32891:32892 <> d1:450
binder 32894:32895 <> d2:451
binder 32897:32899 <> d1':452
binder 32901:32903 <> d2':453
R32947:32958 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32981:32992 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32993:33007 PL.Imp <> elim_trivial_ex:435 ind
R33023:33026 PL.Imp Assertion_S DAnd constr
R33032:33034 PL.Imp <> d2':453 var
R33028:33030 PL.Imp <> d1':452 var
R33010:33013 PL.Imp Assertion_S DAnd constr
R33018:33019 PL.Imp <> d2:451 var
R33015:33016 PL.Imp <> d1:450 var
R32959:32973 PL.Imp <> elim_trivial_ex:435 ind
R32978:32980 PL.Imp <> d2':453 var
R32975:32976 PL.Imp <> d2:451 var
R32925:32939 PL.Imp <> elim_trivial_ex:435 ind
R32944:32946 PL.Imp <> d1':452 var
R32941:32942 PL.Imp <> d1:450 var
R33081:33089 PL.Imp Assertion_S Assertion ind
binder 33075:33075 <> d:454
binder 33077:33078 <> d':455
R33120:33131 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33132:33146 PL.Imp <> elim_trivial_ex:435 ind
R33158:33161 PL.Imp Assertion_S DNot constr
R33163:33164 PL.Imp <> d':455 var
R33149:33152 PL.Imp Assertion_S DNot constr
R33154:33154 PL.Imp <> d:454 var
R33100:33114 PL.Imp <> elim_trivial_ex:435 ind
R33118:33119 PL.Imp <> d':455 var
R33116:33116 PL.Imp <> d:454 var
R33209:33217 PL.Imp Assertion_S Assertion ind
binder 33206:33206 <> d:456
R33228:33242 PL.Imp <> elim_trivial_ex:435 ind
R33246:33246 PL.Imp <> d:456 var
R33244:33244 PL.Imp <> d:456 var
prf 33256:33273 Assertion_S elim_trivial_ex_ex
R33296:33299 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33300:33308 PL.Imp Assertion_S Assertion ind
R33295:33295 Coq.Numbers.BinNums <> Z ind
binder 33289:33289 <> d:457
binder 33291:33292 <> d':458
R33319:33319 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33381:33393 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33394:33408 PL.Imp Assertion_S elim_trivial_ex ind
R33423:33429 PL.Imp Assertion_S DExists constr
R33431:33432 PL.Imp <> d':458 var
R33411:33417 PL.Imp Assertion_S DExists constr
R33419:33419 PL.Imp <> d:457 var
binder 33327:33327 <> z:459
R33330:33336 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R33340:33341 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 33337:33339 <> d'':460
R33367:33370 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R33342:33356 PL.Imp Assertion_S elim_trivial_ex ind
R33364:33366 PL.Imp <> d'':460 var
R33359:33359 PL.Imp <> d:457 var
R33361:33361 PL.Imp <> z:459 var
R33374:33376 Coq.Init.Logic <> ::type_scope:x_'='_x not
R33371:33373 PL.Imp <> d'':460 var
R33377:33378 PL.Imp <> d':458 var
R33380:33380 PL.Imp <> z:459 var
R33462:33480 PL.Imp Assertion_S elim_trivial_ex_ex' constr
R33462:33480 PL.Imp Assertion_S elim_trivial_ex_ex' constr
prf 33574:33592 Assertion_S elim_trivial_ex_all
R33615:33618 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33619:33627 PL.Imp Assertion_S Assertion ind
R33614:33614 Coq.Numbers.BinNums <> Z ind
binder 33608:33608 <> d:461
binder 33610:33611 <> d':462
R33638:33638 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33700:33712 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33713:33727 PL.Imp Assertion_S elim_trivial_ex ind
R33742:33748 PL.Imp Assertion_S DForall constr
R33750:33751 PL.Imp <> d':462 var
R33730:33736 PL.Imp Assertion_S DForall constr
R33738:33738 PL.Imp <> d:461 var
binder 33646:33646 <> z:463
R33649:33655 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R33659:33660 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 33656:33658 <> d'':464
R33686:33689 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R33661:33675 PL.Imp Assertion_S elim_trivial_ex ind
R33683:33685 PL.Imp <> d'':464 var
R33678:33678 PL.Imp <> d:461 var
R33680:33680 PL.Imp <> z:463 var
R33693:33695 Coq.Init.Logic <> ::type_scope:x_'='_x not
R33690:33692 PL.Imp <> d'':464 var
R33696:33697 PL.Imp <> d':462 var
R33699:33699 PL.Imp <> z:463 var
R33781:33800 PL.Imp Assertion_S elim_trivial_ex_all' constr
R33781:33800 PL.Imp Assertion_S elim_trivial_ex_all' constr
R33892:33896 PL.Imp Assertion_S.simpl <> sec
ax 33906:33918 Assertion_S simpl_derives
binder 33928:33928 <> P:465
binder 33930:33930 <> Q:466
R33942:33946 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R33936:33940 PL.Imp Assertion_S :::x_'|--'_x not
R33935:33935 PL.Imp <> P:465 var
R33941:33941 PL.Imp <> Q:466 var
R33959:33963 PL.Imp Assertion_S :::x_'|--'_x not
R33947:33956 PL.Imp Assertion_S assn_simpl def
R33958:33958 PL.Imp <> P:465 var
R33964:33973 PL.Imp Assertion_S assn_simpl def
R33975:33975 PL.Imp <> Q:466 var
ax 33985:33996 Assertion_S simpl_triple
binder 34006:34006 <> P:468
binder 34008:34008 <> c:469
binder 34010:34010 <> Q:470
R34028:34032 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R34015:34016 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34018:34020 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34022:34024 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34026:34027 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34017:34017 PL.Imp <> P:468 var
R34021:34021 PL.Imp <> c:469 var
R34025:34025 PL.Imp <> Q:470 var
R34033:34034 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34047:34049 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34051:34053 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34066:34067 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34035:34044 PL.Imp Assertion_S assn_simpl def
R34046:34046 PL.Imp <> P:468 var
R34050:34050 PL.Imp <> c:469 var
R34054:34063 PL.Imp Assertion_S assn_simpl def
R34065:34065 PL.Imp <> Q:470 var
ax 34077:34099 Assertion_S elim_trivial_ex_derives
binder 34109:34109 <> P:472
binder 34111:34111 <> Q:473
binder 34113:34114 <> P':474
binder 34116:34117 <> Q':475
R34142:34145 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R34167:34171 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R34193:34193 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R34179:34183 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R34173:34177 PL.Imp Assertion_S :::x_'|--'_x not
R34172:34172 PL.Imp <> P:472 var
R34178:34178 PL.Imp <> Q:473 var
R34186:34190 PL.Imp Assertion_S :::x_'|--'_x not
R34184:34185 PL.Imp <> P':474 var
R34191:34192 PL.Imp <> Q':475 var
R34146:34160 PL.Imp Assertion_S elim_trivial_ex ind
R34165:34166 PL.Imp <> Q':475 var
R34162:34162 PL.Imp <> Q:473 var
R34122:34136 PL.Imp Assertion_S elim_trivial_ex ind
R34140:34141 PL.Imp <> P':474 var
R34138:34138 PL.Imp <> P:472 var
ax 34203:34224 Assertion_S elim_trivial_ex_triple
binder 34234:34234 <> P:477
binder 34236:34236 <> c:478
binder 34238:34238 <> Q:479
binder 34240:34241 <> P':480
binder 34243:34244 <> Q':481
R34269:34272 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R34294:34298 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R34332:34332 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R34312:34316 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R34299:34300 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34302:34304 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34306:34308 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34310:34311 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34301:34301 PL.Imp <> P:477 var
R34305:34305 PL.Imp <> c:478 var
R34309:34309 PL.Imp <> Q:479 var
R34317:34318 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34321:34323 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34325:34327 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34330:34331 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34319:34320 PL.Imp <> P':480 var
R34324:34324 PL.Imp <> c:478 var
R34328:34329 PL.Imp <> Q':481 var
R34273:34287 PL.Imp Assertion_S elim_trivial_ex ind
R34292:34293 PL.Imp <> Q':481 var
R34289:34289 PL.Imp <> Q:479 var
R34249:34263 PL.Imp Assertion_S elim_trivial_ex ind
R34267:34268 PL.Imp <> P':480 var
R34265:34265 PL.Imp <> P:477 var
R34340:34350 PL.Imp Assertion_S <> mod
mod 34361:34384 <> Concrete_Pretty_Printing
ind 34414:34416 Concrete_Pretty_Printing var
constr 34445:34460 Concrete_Pretty_Printing var_name_trivial
rec 34414:34416 Concrete_Pretty_Printing var
proj 34445:34460 Concrete_Pretty_Printing var_name_trivial
R34429:34431 PL.Imp <> var def
binder 34419:34426 <> var_name:483
R34471:34473 Coq.Init.Logic <> ::type_scope:x_'='_x not
R34463:34470 PL.Imp <> var_name:483 var
R34474:34481 PL.Imp <> var_name:483 var
R34531:34533 PL.Imp Concrete_Pretty_Printing var class
R34598:34600 PL.Imp Concrete_Pretty_Printing var class
R34588:34594 Coq.Init.Logic <> eq_refl constr
R34645:34645 Coq.Init.Datatypes <> S constr
not 34662:34662 Concrete_Pretty_Printing :::'new_var()'
def 34717:34719 Concrete_Pretty_Printing AId
binder 34722:34729 <> var_name:486
R34737:34739 PL.Imp Concrete_Pretty_Printing var class
R34741:34748 PL.Imp <> var_name:486 var
binder 34733:34733 <> X:487
R34752:34755 PL.Imp <> aexp ind
R34760:34762 PL.Imp <> AId constr
R34764:34771 PL.Imp <> var_name:486 var
R34775:34801 PL.Imp Concrete_Pretty_Printing AId def
def 34816:34819 Concrete_Pretty_Printing CAss
binder 34822:34829 <> var_name:488
R34838:34840 PL.Imp Concrete_Pretty_Printing var class
R34842:34849 PL.Imp <> var_name:488 var
binder 34833:34833 <> v:489
R34857:34860 PL.Imp <> aexp ind
binder 34853:34853 <> a:490
R34864:34866 PL.Imp <> com ind
R34873:34876 PL.Imp <> CAss constr
R34887:34887 PL.Imp <> a:490 var
R34878:34885 PL.Imp <> var_name:488 var
R34918:34921 PL.Imp Concrete_Pretty_Printing CAss def
not 34900:34900 Concrete_Pretty_Printing ::imp_scope:x_'::='_x
def 34967:34974 Concrete_Pretty_Printing aexp_sub
binder 34977:34984 <> var_name:491
R34992:34994 PL.Imp Concrete_Pretty_Printing var class
R34996:35003 PL.Imp <> var_name:491 var
binder 34988:34988 <> X:492
binder 35006:35006 <> a:493
binder 35008:35009 <> a0:494
R35014:35021 PL.Imp Assertion_S aexp_sub def
R35034:35035 PL.Imp <> a0:494 var
R35032:35032 PL.Imp <> a:493 var
R35023:35030 PL.Imp <> var_name:491 var
def 35050:35057 Concrete_Pretty_Printing bexp_sub
binder 35060:35067 <> var_name:495
R35075:35077 PL.Imp Concrete_Pretty_Printing var class
R35079:35086 PL.Imp <> var_name:495 var
binder 35071:35071 <> X:496
binder 35089:35089 <> a:497
binder 35091:35091 <> b:498
R35096:35103 PL.Imp Assertion_S bexp_sub def
R35116:35116 PL.Imp <> b:498 var
R35114:35114 PL.Imp <> a:497 var
R35105:35112 PL.Imp <> var_name:495 var
def 35131:35138 Concrete_Pretty_Printing term_sub
binder 35141:35148 <> var_name:499
R35156:35158 PL.Imp Concrete_Pretty_Printing var class
R35160:35167 PL.Imp <> var_name:499 var
binder 35152:35152 <> X:500
binder 35170:35170 <> a:501
binder 35172:35172 <> t:502
R35177:35184 PL.Imp Assertion_S term_sub def
R35197:35197 PL.Imp <> t:502 var
R35195:35195 PL.Imp <> a:501 var
R35186:35193 PL.Imp <> var_name:499 var
def 35212:35219 Concrete_Pretty_Printing assn_sub
binder 35222:35229 <> var_name:503
R35237:35239 PL.Imp Concrete_Pretty_Printing var class
R35241:35248 PL.Imp <> var_name:503 var
binder 35233:35233 <> X:504
binder 35251:35251 <> a:505
binder 35253:35253 <> d:506
R35258:35265 PL.Imp Assertion_S assn_sub def
R35278:35278 PL.Imp <> d:506 var
R35276:35276 PL.Imp <> a:505 var
R35267:35274 PL.Imp <> var_name:503 var
R35292:35299 PL.Imp Concrete_Pretty_Printing aexp_sub def
R35292:35299 PL.Imp Concrete_Pretty_Printing aexp_sub def
R35349:35356 PL.Imp Concrete_Pretty_Printing bexp_sub def
R35349:35356 PL.Imp Concrete_Pretty_Printing bexp_sub def
R35405:35412 PL.Imp Concrete_Pretty_Printing term_sub def
R35405:35412 PL.Imp Concrete_Pretty_Printing term_sub def
R35461:35468 PL.Imp Concrete_Pretty_Printing assn_sub def
R35461:35468 PL.Imp Concrete_Pretty_Printing assn_sub def
R35537:35544 PL.Imp Concrete_Pretty_Printing assn_sub def
not 35517:35517 Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']'
R35641:35648 PL.Imp Concrete_Pretty_Printing aexp_sub def
not 35620:35620 Concrete_Pretty_Printing ::imp_scope:x_'['_x_'|->'_x_']'
ind 35721:35723 Concrete_Pretty_Printing dec
constr 35754:35758 Concrete_Pretty_Printing DCEnd
constr 35795:35801 Concrete_Pretty_Printing DCSeq_A
constr 35858:35864 Concrete_Pretty_Printing DCSeq_C
ind 35922:35930 Concrete_Pretty_Printing decorated
constr 35945:35951 Concrete_Pretty_Printing DCBegin
ind 35978:35981 Concrete_Pretty_Printing dcom
constr 35997:36002 Concrete_Pretty_Printing DCSkip
constr 36015:36019 Concrete_Pretty_Printing DCAss
constr 36081:36084 Concrete_Pretty_Printing DCIf
constr 36131:36137 Concrete_Pretty_Printing DCWhile
R35730:35733 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R35738:35741 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R35734:35737 Coq.Init.Datatypes <> bool ind
R35726:35729 Coq.Init.Datatypes <> bool ind
R35764:35772 PL.Imp Assertion_S Assertion ind
binder 35761:35761 <> a:513
R35776:35778 PL.Imp <> dec:507 ind
R35785:35789 Coq.Init.Datatypes <> false constr
R35780:35783 Coq.Init.Datatypes <> true constr
binder 35804:35805 <> f1:514
binder 35807:35808 <> f2:515
R35815:35823 PL.Imp Assertion_S Assertion ind
binder 35812:35812 <> a:516
R35830:35832 PL.Imp <> dec:507 ind
R35837:35838 PL.Imp <> f2:515 var
R35834:35835 PL.Imp <> f1:514 var
binder 35827:35827 <> c:517
R35842:35844 PL.Imp <> dec:507 ind
R35851:35852 PL.Imp <> f2:515 var
R35846:35849 Coq.Init.Datatypes <> true constr
binder 35867:35868 <> f1:518
binder 35870:35871 <> f2:519
R35879:35882 PL.Imp <> dcom:509 ind
binder 35875:35876 <> c1:520
R35889:35891 PL.Imp <> dec:507 ind
R35896:35897 PL.Imp <> f2:519 var
R35893:35894 PL.Imp <> f1:518 var
binder 35886:35886 <> c:521
R35901:35903 PL.Imp <> dec:507 ind
R35911:35914 Coq.Init.Datatypes <> true constr
R35905:35909 Coq.Init.Datatypes <> false constr
R35957:35959 PL.Imp <> dec:507 ind
R35966:35969 Coq.Init.Datatypes <> true constr
R35961:35964 Coq.Init.Datatypes <> true constr
binder 35954:35954 <> c:522
R36006:36009 PL.Imp <> dcom:509 ind
R36041:36043 Coq.Init.Datatypes <> nat ind
binder 36031:36038 <> var_name:523
R36060:36063 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36068:36071 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36072:36075 PL.Imp <> dcom:509 ind
R36064:36067 PL.Imp <> aexp ind
R36048:36050 PL.Imp Concrete_Pretty_Printing var class
R36052:36059 PL.Imp <> var_name:523 var
R36092:36095 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36105:36108 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36118:36121 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36122:36125 PL.Imp <> dcom:509 ind
R36109:36117 PL.Imp <> decorated:508 ind
R36096:36104 PL.Imp <> decorated:508 ind
R36088:36091 PL.Imp <> bexp ind
R36145:36148 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36158:36161 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36162:36165 PL.Imp <> dcom:509 ind
R36149:36157 PL.Imp <> decorated:508 ind
R36141:36144 PL.Imp <> bexp ind
R36333:36338 PL.Imp Concrete_Pretty_Printing DCSkip constr
not 36318:36318 Concrete_Pretty_Printing ::dcom_scope:'Skip'
R36381:36385 PL.Imp Concrete_Pretty_Printing DCAss constr
not 36363:36363 Concrete_Pretty_Printing ::dcom_scope:x_'::='_x
R36469:36475 PL.Imp Concrete_Pretty_Printing DCWhile constr
not 36433:36433 Concrete_Pretty_Printing ::dcom_scope:'While'_x_'Do'_x_'EndWhile'
R36584:36587 PL.Imp Concrete_Pretty_Printing DCIf constr
not 36540:36540 Concrete_Pretty_Printing ::dcom_scope:'If'_x_'Then'_x_'Else'_x_'EndIf'
R36682:36688 PL.Imp Concrete_Pretty_Printing DCSeq_A constr
R36690:36693 Coq.Init.Datatypes <> true constr
not 36657:36657 Concrete_Pretty_Printing ::dcom_scope:x_'*/'_'/*'_x
R36787:36793 PL.Imp Concrete_Pretty_Printing DCSeq_C constr
R36800:36803 Coq.Init.Datatypes <> true constr
R36795:36798 Coq.Init.Datatypes <> true constr
not 36762:36762 Concrete_Pretty_Printing ::dcom_scope:x_';;'_'/*'_x
R36890:36896 PL.Imp Concrete_Pretty_Printing DCSeq_C constr
R36903:36907 Coq.Init.Datatypes <> false constr
R36898:36901 Coq.Init.Datatypes <> true constr
not 36870:36870 Concrete_Pretty_Printing ::dcom_scope:x_'/*'_x
R36994:37000 PL.Imp Concrete_Pretty_Printing DCSeq_A constr
R37002:37006 Coq.Init.Datatypes <> false constr
not 36974:36974 Concrete_Pretty_Printing ::dcom_scope:x_'*/'_x
R37095:37101 PL.Imp Concrete_Pretty_Printing DCSeq_C constr
R37109:37112 Coq.Init.Datatypes <> true constr
R37103:37107 Coq.Init.Datatypes <> false constr
not 37075:37075 Concrete_Pretty_Printing ::dcom_scope:x_';;'_x
R37192:37196 PL.Imp Concrete_Pretty_Printing DCEnd constr
not 37179:37179 Concrete_Pretty_Printing ::dcom_scope:x_'*/'
R37272:37278 PL.Imp Concrete_Pretty_Printing DCBegin constr
not 37259:37259 Concrete_Pretty_Printing ::dcom_scope:'/*'_x
mod 37340:37363 <> Concrete_Pretty_Printing.sample_decorated_program
inst 37412:37412 Concrete_Pretty_Printing.sample_decorated_program X
R37415:37417 PL.Imp Concrete_Pretty_Printing var class
R37422:37430 PL.Imp Concrete_Pretty_Printing :::'new_var()' not
inst 37448:37448 Concrete_Pretty_Printing.sample_decorated_program Y
R37451:37453 PL.Imp Concrete_Pretty_Printing var class
R37458:37466 PL.Imp Concrete_Pretty_Printing :::'new_var()' not
def 37481:37483 Concrete_Pretty_Printing.sample_decorated_program dc1
R37491:37491 Coq.Numbers.BinNums <> Z ind
binder 37486:37486 <> m:524
binder 37488:37488 <> n:525
R37496:37504 PL.Imp Concrete_Pretty_Printing decorated ind
R37511:37513 PL.Imp Concrete_Pretty_Printing ::dcom_scope:'/*'_x not
R37520:37525 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_x not
R37515:37518 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R37519:37519 PL.Imp <> m:524 var
R37533:37537 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_';;'_x not
R37527:37531 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'::='_x not
R37526:37526 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37532:37532 PL.Imp <> m:524 var
R37545:37552 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_';;'_'/*'_x not
R37539:37543 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'::='_x not
R37538:37538 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R37589:37594 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_x not
R37574:37578 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R37570:37572 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R37562:37564 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R37554:37556 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R37553:37553 PL.Imp <> n:525 var
R37557:37558 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37560:37561 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37559:37559 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R37565:37566 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37568:37569 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37567:37567 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37573:37573 PL.Imp <> m:524 var
R37580:37583 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R37584:37585 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37587:37588 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37586:37586 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37764:37769 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'/*'_x not
R37595:37600 PL.Imp Concrete_Pretty_Printing ::dcom_scope:'While'_x_'Do'_x_'EndWhile' not
R37607:37614 PL.Imp Concrete_Pretty_Printing ::dcom_scope:'While'_x_'Do'_x_'EndWhile' not
R37753:37763 PL.Imp Concrete_Pretty_Printing ::dcom_scope:'While'_x_'Do'_x_'EndWhile' not
R37602:37605 PL.Imp <> ::imp_scope:x_'<='_x not
R37601:37601 PL.Imp <> n:525 var
R37606:37606 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37615:37617 PL.Imp Concrete_Pretty_Printing ::dcom_scope:'/*'_x not
R37669:37676 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_x not
R37654:37658 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R37639:37643 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R37635:37637 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R37627:37629 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R37619:37621 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R37618:37618 PL.Imp <> n:525 var
R37622:37623 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37625:37626 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37624:37624 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R37630:37631 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37633:37634 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37632:37632 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37638:37638 PL.Imp <> m:524 var
R37645:37648 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R37649:37650 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37652:37653 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37651:37651 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37659:37660 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R37667:37668 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R37662:37665 PL.Imp <> ::imp_scope:x_'<='_x not
R37661:37661 PL.Imp <> n:525 var
R37666:37666 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37688:37694 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_';;'_x not
R37678:37682 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'::='_x not
R37677:37677 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37684:37686 PL.Imp <> ::imp_scope:x_'-'_x not
R37683:37683 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37687:37687 PL.Imp <> n:525 var
R37706:37713 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'/*'_x not
R37696:37700 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'::='_x not
R37695:37695 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R37702:37704 PL.Imp <> ::imp_scope:x_'+'_x not
R37701:37701 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R37750:37752 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/' not
R37735:37739 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R37731:37733 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R37723:37725 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R37715:37717 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R37714:37714 PL.Imp <> n:525 var
R37718:37719 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37721:37722 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37720:37720 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R37726:37727 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37729:37730 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37728:37728 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37734:37734 PL.Imp <> m:524 var
R37741:37744 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R37745:37746 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37748:37749 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37747:37747 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37825:37833 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_'/*'_x not
R37806:37810 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R37791:37795 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R37787:37789 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R37779:37781 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R37771:37773 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R37770:37770 PL.Imp <> n:525 var
R37774:37775 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37777:37778 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37776:37776 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R37782:37783 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37785:37786 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37784:37784 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37790:37790 PL.Imp <> m:524 var
R37797:37800 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R37801:37802 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37804:37805 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37803:37803 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37811:37814 PL.Imp Assertion_S ::assert_scope:'NOT'_x not
R37815:37816 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R37823:37824 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R37818:37821 PL.Imp <> ::imp_scope:x_'<='_x not
R37817:37817 PL.Imp <> n:525 var
R37822:37822 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37884:37886 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/' not
R37870:37874 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R37855:37859 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R37851:37853 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R37843:37845 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R37835:37837 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R37834:37834 PL.Imp <> n:525 var
R37838:37839 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37841:37842 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37840:37840 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R37846:37847 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37849:37850 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37848:37848 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37854:37854 PL.Imp <> m:524 var
R37861:37864 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R37865:37866 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37868:37869 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37867:37867 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37880:37882 PL.Imp Assertion_S ::assert_scope:x_'<'_x not
R37875:37876 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37878:37879 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37877:37877 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37883:37883 PL.Imp <> n:525 var
def 37901:37903 Concrete_Pretty_Printing.sample_decorated_program dc2
R37911:37911 Coq.Numbers.BinNums <> Z ind
binder 37906:37906 <> m:526
binder 37908:37908 <> n:527
R37916:37924 PL.Imp Concrete_Pretty_Printing decorated ind
R37931:37933 PL.Imp Concrete_Pretty_Printing ::dcom_scope:'/*'_x not
R37940:37945 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_x not
R37935:37938 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R37939:37939 PL.Imp <> m:526 var
R37953:37960 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_';;'_'/*'_x not
R37947:37951 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'::='_x not
R37946:37946 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37952:37952 PL.Imp <> m:526 var
R37991:37999 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_'/*'_x not
R37961:37967 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
R37969:37970 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
binder 37968:37968 <> x:528
R37977:37981 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R37972:37975 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R37976:37976 PL.Imp <> m:526 var
R37987:37989 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R37982:37983 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37985:37986 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37984:37984 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37990:37990 PL.Imp <> m:526 var
R38020:38025 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_x not
R38006:38010 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38001:38004 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38005:38005 PL.Imp <> m:526 var
R38016:38018 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38011:38012 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38014:38015 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38013:38013 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38019:38019 PL.Imp <> m:526 var
R38033:38040 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_';;'_'/*'_x not
R38027:38031 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'::='_x not
R38026:38026 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38085:38093 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_'/*'_x not
R38041:38047 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
R38049:38050 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
binder 38048:38048 <> y:529
R38071:38075 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38057:38061 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38052:38055 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38056:38056 PL.Imp <> m:526 var
R38067:38069 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38062:38063 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38065:38066 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38064:38064 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38070:38070 PL.Imp <> m:526 var
R38081:38083 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38076:38077 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38079:38080 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38078:38078 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38130:38135 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_x not
R38115:38119 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38111:38113 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38103:38105 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38095:38097 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R38094:38094 PL.Imp <> n:527 var
R38098:38099 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38101:38102 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38100:38100 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38106:38107 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38109:38110 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38108:38108 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38114:38114 PL.Imp <> m:526 var
R38121:38124 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38125:38126 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38128:38129 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38127:38127 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38754:38759 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'/*'_x not
R38136:38141 PL.Imp Concrete_Pretty_Printing ::dcom_scope:'While'_x_'Do'_x_'EndWhile' not
R38148:38155 PL.Imp Concrete_Pretty_Printing ::dcom_scope:'While'_x_'Do'_x_'EndWhile' not
R38743:38753 PL.Imp Concrete_Pretty_Printing ::dcom_scope:'While'_x_'Do'_x_'EndWhile' not
R38143:38146 PL.Imp <> ::imp_scope:x_'<='_x not
R38142:38142 PL.Imp <> n:527 var
R38147:38147 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38156:38158 PL.Imp Concrete_Pretty_Printing ::dcom_scope:'/*'_x not
R38210:38217 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_x not
R38195:38199 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38180:38184 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38176:38178 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38168:38170 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38160:38162 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R38159:38159 PL.Imp <> n:527 var
R38163:38164 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38166:38167 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38165:38165 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38171:38172 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38174:38175 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38173:38173 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38179:38179 PL.Imp <> m:526 var
R38186:38189 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38190:38191 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38193:38194 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38192:38192 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38200:38201 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R38208:38209 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R38203:38206 PL.Imp <> ::imp_scope:x_'<='_x not
R38202:38202 PL.Imp <> n:527 var
R38207:38207 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38229:38238 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_';;'_'/*'_x not
R38219:38223 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'::='_x not
R38218:38218 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38225:38227 PL.Imp <> ::imp_scope:x_'-'_x not
R38224:38224 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38228:38228 PL.Imp <> n:527 var
R38339:38349 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_'/*'_x not
R38239:38245 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
R38247:38248 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
binder 38246:38246 <> x:530
R38317:38321 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38285:38306 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38270:38274 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38266:38268 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38258:38260 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38250:38252 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R38249:38249 PL.Imp <> n:527 var
R38253:38254 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38256:38257 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38255:38255 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38261:38262 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38264:38265 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38263:38263 PL.Imp <> x:530 var
R38269:38269 PL.Imp <> m:526 var
R38276:38279 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38280:38281 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38283:38284 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38282:38282 PL.Imp <> x:530 var
R38307:38308 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R38315:38316 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R38310:38313 PL.Imp <> ::imp_scope:x_'<='_x not
R38309:38309 PL.Imp <> n:527 var
R38314:38314 PL.Imp <> x:530 var
R38327:38329 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38322:38323 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38325:38326 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38324:38324 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38330:38331 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38337:38338 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38333:38335 PL.Imp <> ::imp_scope:x_'-'_x not
R38332:38332 PL.Imp <> x:530 var
R38336:38336 PL.Imp <> n:527 var
R38434:38444 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_'/*'_x not
R38350:38356 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
R38358:38359 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
binder 38357:38357 <> x:531
R38416:38420 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38388:38409 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38377:38381 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38373:38375 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38369:38371 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38361:38363 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R38360:38360 PL.Imp <> n:527 var
R38364:38365 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38367:38368 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38366:38366 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38372:38372 PL.Imp <> x:531 var
R38376:38376 PL.Imp <> m:526 var
R38383:38386 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38387:38387 PL.Imp <> x:531 var
R38411:38414 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38410:38410 PL.Imp <> n:527 var
R38415:38415 PL.Imp <> x:531 var
R38426:38428 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38421:38422 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38424:38425 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38423:38423 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38430:38432 PL.Imp Assertion_S ::term_scope:x_'-'_x not
R38429:38429 PL.Imp <> x:531 var
R38433:38433 PL.Imp <> n:527 var
R38485:38492 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_x not
R38470:38474 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38466:38468 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38462:38464 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38454:38456 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38446:38448 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R38445:38445 PL.Imp <> n:527 var
R38449:38450 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38452:38453 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38451:38451 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38457:38458 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38460:38461 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38459:38459 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38465:38465 PL.Imp <> n:527 var
R38469:38469 PL.Imp <> m:526 var
R38476:38479 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38480:38481 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38483:38484 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38482:38482 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38504:38511 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'/*'_x not
R38494:38498 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'::='_x not
R38493:38493 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38500:38502 PL.Imp <> ::imp_scope:x_'+'_x not
R38499:38499 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38601:38611 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_'/*'_x not
R38512:38518 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
R38520:38521 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
binder 38519:38519 <> y:532
R38562:38583 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38547:38551 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38543:38545 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38539:38541 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38531:38533 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38523:38525 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R38522:38522 PL.Imp <> n:527 var
R38526:38527 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38529:38530 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38528:38528 PL.Imp <> y:532 var
R38534:38535 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38537:38538 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38536:38536 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38542:38542 PL.Imp <> n:527 var
R38546:38546 PL.Imp <> m:526 var
R38553:38556 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38557:38558 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38560:38561 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38559:38559 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38589:38591 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38584:38585 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38587:38588 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38586:38586 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38592:38593 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38599:38600 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38595:38597 PL.Imp <> ::imp_scope:x_'+'_x not
R38594:38594 PL.Imp <> y:532 var
R38693:38703 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_'/*'_x not
R38612:38618 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
R38620:38621 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
binder 38619:38619 <> y:533
R38658:38679 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38643:38647 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38639:38641 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38635:38637 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38627:38629 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38623:38625 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R38622:38622 PL.Imp <> n:527 var
R38626:38626 PL.Imp <> y:533 var
R38630:38631 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38633:38634 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38632:38632 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38638:38638 PL.Imp <> n:527 var
R38642:38642 PL.Imp <> m:526 var
R38649:38652 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38653:38654 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38656:38657 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38655:38655 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38685:38687 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38680:38681 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38683:38684 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38682:38682 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38689:38691 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38688:38688 PL.Imp <> y:533 var
R38740:38742 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/' not
R38725:38729 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38721:38723 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38713:38715 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38705:38707 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R38704:38704 PL.Imp <> n:527 var
R38708:38709 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38711:38712 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38710:38710 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38716:38717 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38719:38720 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38718:38718 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38724:38724 PL.Imp <> m:526 var
R38731:38734 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38735:38736 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38738:38739 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38737:38737 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38815:38823 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_'/*'_x not
R38796:38800 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38781:38785 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38777:38779 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38769:38771 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38761:38763 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R38760:38760 PL.Imp <> n:527 var
R38764:38765 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38767:38768 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38766:38766 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38772:38773 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38775:38776 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38774:38774 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38780:38780 PL.Imp <> m:526 var
R38787:38790 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38791:38792 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38794:38795 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38793:38793 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38801:38804 PL.Imp Assertion_S ::assert_scope:'NOT'_x not
R38805:38806 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R38813:38814 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R38808:38811 PL.Imp <> ::imp_scope:x_'<='_x not
R38807:38807 PL.Imp <> n:527 var
R38812:38812 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38874:38876 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/' not
R38860:38864 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38845:38849 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38841:38843 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38833:38835 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38825:38827 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R38824:38824 PL.Imp <> n:527 var
R38828:38829 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38831:38832 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38830:38830 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38836:38837 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38839:38840 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38838:38838 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38844:38844 PL.Imp <> m:526 var
R38851:38854 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38855:38856 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38858:38859 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38857:38857 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38870:38872 PL.Imp Assertion_S ::assert_scope:x_'<'_x not
R38865:38866 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38868:38869 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38867:38867 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38873:38873 PL.Imp <> n:527 var
R38884:38907 PL.Imp Concrete_Pretty_Printing.sample_decorated_program <> mod
R38915:38938 PL.Imp Concrete_Pretty_Printing <> mod
mod 38949:38958 <> slow_minus
sec 38969:38978 slow_minus slow_minus
var 39025:39025 slow_minus.slow_minus m
var 39027:39027 slow_minus.slow_minus p
R39030:39030 Coq.Numbers.BinNums <> Z ind
inst 39043:39043 slow_minus X
R39046:39048 PL.Imp Concrete_Pretty_Printing var class
R39053:39061 PL.Imp Concrete_Pretty_Printing :::'new_var()' not
inst 39073:39073 slow_minus Y
R39076:39078 PL.Imp Concrete_Pretty_Printing var class
R39083:39091 PL.Imp Concrete_Pretty_Printing :::'new_var()' not
inst 39103:39103 slow_minus Z
R39106:39108 PL.Imp Concrete_Pretty_Printing var class
R39113:39121 PL.Imp Concrete_Pretty_Printing :::'new_var()' not
inst 39133:39133 slow_minus W
R39136:39138 PL.Imp Concrete_Pretty_Printing var class
R39143:39151 PL.Imp Concrete_Pretty_Printing :::'new_var()' not
inst 39163:39164 slow_minus ID
R39167:39169 PL.Imp Concrete_Pretty_Printing var class
R39174:39182 PL.Imp Concrete_Pretty_Printing :::'new_var()' not
def 39197:39200 slow_minus prog
R39203:39205 PL.Imp <> com ind
R39221:39227 PL.Imp <> ::imp_scope:x_';;'_x not
R39215:39219 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R39214:39214 PL.Imp slow_minus X inst
R39220:39220 PL.Imp <> slow_minus.slow_minus.m var
R39235:39241 PL.Imp <> ::imp_scope:x_';;'_x not
R39229:39233 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R39228:39228 PL.Imp slow_minus Z inst
R39234:39234 PL.Imp <> slow_minus.slow_minus.p var
R39242:39247 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R39257:39266 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R39298:39310 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R39248:39249 PL.Imp <> ::imp_scope:'!'_x not
R39256:39256 PL.Imp <> ::imp_scope:'!'_x not
R39251:39254 PL.Imp <> ::imp_scope:x_'=='_x not
R39250:39250 PL.Imp slow_minus X inst
R39278:39286 PL.Imp <> ::imp_scope:x_';;'_x not
R39268:39272 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R39267:39267 PL.Imp slow_minus Z inst
R39274:39276 PL.Imp <> ::imp_scope:x_'-'_x not
R39273:39273 PL.Imp slow_minus Z inst
R39288:39292 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R39287:39287 PL.Imp slow_minus X inst
R39294:39296 PL.Imp <> ::imp_scope:x_'-'_x not
R39293:39293 PL.Imp slow_minus X inst
def 39325:39329 slow_minus prog2
R39332:39334 PL.Imp <> com ind
R39354:39360 PL.Imp <> ::imp_scope:x_';;'_x not
R39344:39348 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R39343:39343 PL.Imp slow_minus X inst
R39350:39352 PL.Imp <> ::imp_scope:x_'+'_x not
R39349:39349 PL.Imp slow_minus X inst
R39353:39353 PL.Imp slow_minus Y inst
R39372:39378 PL.Imp <> ::imp_scope:x_';;'_x not
R39362:39366 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R39361:39361 PL.Imp slow_minus Y inst
R39368:39370 PL.Imp <> ::imp_scope:x_'-'_x not
R39367:39367 PL.Imp slow_minus X inst
R39371:39371 PL.Imp slow_minus Y inst
R39380:39384 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R39379:39379 PL.Imp slow_minus X inst
R39386:39388 PL.Imp <> ::imp_scope:x_'-'_x not
R39385:39385 PL.Imp slow_minus X inst
R39389:39389 PL.Imp slow_minus Y inst
def 39404:39408 slow_minus prog3
R39411:39413 PL.Imp <> com ind
R39420:39422 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R39429:39436 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R39448:39455 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R39519:39526 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R39424:39427 PL.Imp <> ::imp_scope:x_'<='_x not
R39423:39423 PL.Imp slow_minus X inst
R39428:39428 PL.Imp slow_minus Y inst
R39438:39442 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R39437:39437 PL.Imp slow_minus Z inst
R39444:39446 PL.Imp <> ::imp_scope:x_'-'_x not
R39443:39443 PL.Imp slow_minus X inst
R39447:39447 PL.Imp slow_minus Y inst
R39456:39458 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R39465:39477 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R39482:39494 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R39506:39518 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R39460:39463 PL.Imp <> ::imp_scope:x_'<='_x not
R39459:39459 PL.Imp slow_minus X inst
R39464:39464 PL.Imp slow_minus Y inst
R39478:39481 PL.Imp <> ::imp_scope:'Skip' not
R39496:39500 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R39495:39495 PL.Imp slow_minus Z inst
R39502:39504 PL.Imp <> ::imp_scope:x_'-'_x not
R39501:39501 PL.Imp slow_minus Y inst
R39505:39505 PL.Imp slow_minus X inst
R39534:39543 PL.Imp slow_minus.slow_minus <> sec
R39550:39559 PL.Imp slow_minus <> mod
mod 39570:39584 <> Assertion_S_Tac
R39652:39684 PL.Imp Concrete_Pretty_Printing assn_sub def
R39687:39719 PL.Imp Concrete_Pretty_Printing aexp_sub def
R39806:39808 PL.Imp <> AId constr
R39806:39808 PL.Imp <> AId constr
R39846:39848 PL.Imp <> AId constr
R39846:39848 PL.Imp <> AId constr
R39882:39909 PL.Imp Concrete_Pretty_Printing AId def
R40000:40032 PL.Imp Concrete_Pretty_Printing assn_sub def
R40035:40067 PL.Imp Concrete_Pretty_Printing aexp_sub def
R40171:40173 PL.Imp <> AId constr
R40171:40173 PL.Imp <> AId constr
R40211:40213 PL.Imp <> AId constr
R40211:40213 PL.Imp <> AId constr
R40247:40274 PL.Imp Concrete_Pretty_Printing AId def
R40364:40366 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40368:40371 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40373:40376 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40378:40380 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40364:40366 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40368:40371 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40373:40376 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40378:40380 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40444:40448 PL.Imp Assertion_S :::x_'|--'_x not
R40444:40448 PL.Imp Assertion_S :::x_'|--'_x not
R40468:40480 PL.Imp Assertion_S simpl_derives prfax
R40399:40410 PL.Imp Assertion_S simpl_triple prfax
R40561:40563 PL.Imp <> AId constr
R40561:40563 PL.Imp <> AId constr
R40601:40603 PL.Imp <> AId constr
R40601:40603 PL.Imp <> AId constr
R40637:40664 PL.Imp Concrete_Pretty_Printing AId def
R40752:40754 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40756:40759 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40761:40764 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40766:40768 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40752:40754 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40756:40759 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40761:40764 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40766:40768 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40839:40843 PL.Imp Assertion_S :::x_'|--'_x not
R40839:40843 PL.Imp Assertion_S :::x_'|--'_x not
R40863:40875 PL.Imp Assertion_S simpl_derives prfax
R40787:40798 PL.Imp Assertion_S simpl_triple prfax
R40968:40970 PL.Imp <> AId constr
R40968:40970 PL.Imp <> AId constr
R41008:41010 PL.Imp <> AId constr
R41008:41010 PL.Imp <> AId constr
R41044:41071 PL.Imp Concrete_Pretty_Printing AId def
R41174:41195 PL.Imp Assertion_S elim_trivial_ex_kernal constr
R41238:41255 PL.Imp Assertion_S elim_trivial_ex_ex thm
R41371:41373 Coq.Init.Logic <> ::type_scope:x_'='_x not
R41371:41373 Coq.Init.Logic <> ::type_scope:x_'='_x not
R41527:41545 PL.Imp Assertion_S elim_trivial_ex_all thm
R41661:41663 Coq.Init.Logic <> ::type_scope:x_'='_x not
R41661:41663 Coq.Init.Logic <> ::type_scope:x_'='_x not
R41816:41833 PL.Imp Assertion_S elim_trivial_ex_or constr
R41875:41893 PL.Imp Assertion_S elim_trivial_ex_and constr
R41935:41953 PL.Imp Assertion_S elim_trivial_ex_not constr
R41995:42014 PL.Imp Assertion_S elim_trivial_ex_atom constr
R42075:42077 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42079:42082 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42084:42087 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42089:42091 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42075:42077 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42079:42082 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42084:42087 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42089:42091 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42179:42183 PL.Imp Assertion_S :::x_'|--'_x not
R42179:42183 PL.Imp Assertion_S :::x_'|--'_x not
R42204:42226 PL.Imp Assertion_S elim_trivial_ex_derives prfax
R42111:42132 PL.Imp Assertion_S elim_trivial_ex_triple prfax
R42331:42333 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42335:42338 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42340:42343 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42345:42347 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42331:42333 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42335:42338 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42340:42343 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42345:42347 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42437:42441 PL.Imp Assertion_S :::x_'|--'_x not
R42437:42441 PL.Imp Assertion_S :::x_'|--'_x not
R42462:42484 PL.Imp Assertion_S elim_trivial_ex_derives prfax
R42367:42388 PL.Imp Assertion_S elim_trivial_ex_triple prfax
R42751:42755 PL.Imp Assertion_S :::x_'|--'_x not
R42751:42755 PL.Imp Assertion_S :::x_'|--'_x not
R42874:42885 PL.Imp Assertion_S FOL_complete thm
R42934:42949 PL.Imp Assertion_S Assertion_denote def
R42951:42961 PL.Imp Assertion_S term_denote def
R43012:43022 PL.Imp Assertion_S aexp_denote def
R43028:43055 PL.Imp Concrete_Pretty_Printing AId def
R43012:43022 PL.Imp Assertion_S aexp_denote def
R43028:43055 PL.Imp Concrete_Pretty_Printing AId def
R43123:43133 PL.Imp Assertion_S aexp_denote def
R43139:43166 PL.Imp Concrete_Pretty_Printing AId def
R43301:43315 PL.Imp Assertion_S_Tac <> mod
mod 43326:43344 <> Axiomatic_semantics
ax 43387:43395 Axiomatic_semantics hoare_seq
R43414:43422 PL.Imp Assertion_S Assertion ind
binder 43407:43407 <> P:536
binder 43409:43409 <> Q:537
binder 43411:43411 <> R:538
R43433:43435 PL.Imp <> com ind
binder 43426:43427 <> c1:539
binder 43429:43430 <> c2:540
R43455:43460 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43475:43480 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43481:43482 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43484:43486 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43493:43495 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43497:43498 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43483:43483 PL.Imp <> P:536 var
R43489:43490 PL.Imp <> ::imp_scope:x_';;'_x not
R43487:43488 PL.Imp <> c1:539 var
R43491:43492 PL.Imp <> c2:540 var
R43496:43496 PL.Imp <> R:538 var
R43461:43462 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43464:43466 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43469:43471 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43473:43474 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43463:43463 PL.Imp <> Q:537 var
R43467:43468 PL.Imp <> c2:540 var
R43472:43472 PL.Imp <> R:538 var
R43441:43442 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43444:43446 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43449:43451 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43453:43454 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43443:43443 PL.Imp <> P:536 var
R43447:43448 PL.Imp <> c1:539 var
R43452:43452 PL.Imp <> Q:537 var
ax 43508:43517 Axiomatic_semantics hoare_skip
binder 43528:43528 <> P:542
R43533:43534 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43536:43538 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43543:43545 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43547:43548 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43535:43535 PL.Imp <> P:542 var
R43539:43542 PL.Imp <> ::imp_scope:'Skip' not
R43546:43546 PL.Imp <> P:542 var
ax 43558:43565 Axiomatic_semantics hoare_if
binder 43576:43576 <> P:544
binder 43578:43578 <> Q:545
binder 43580:43580 <> b:546
binder 43582:43583 <> c1:547
binder 43585:43586 <> c2:548
R43619:43624 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43657:43662 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43663:43665 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43667:43670 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43697:43700 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43702:43704 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43666:43666 PL.Imp <> P:544 var
R43671:43673 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R43675:43680 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R43683:43688 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R43691:43696 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R43674:43674 PL.Imp <> b:546 var
R43681:43682 PL.Imp <> c1:547 var
R43689:43690 PL.Imp <> c2:548 var
R43701:43701 PL.Imp <> Q:545 var
R43625:43627 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43643:43646 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43649:43652 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43654:43656 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43629:43633 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R43628:43628 PL.Imp <> P:544 var
R43634:43637 PL.Imp Assertion_S ::assert_scope:'NOT'_x not
R43638:43639 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R43641:43642 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R43640:43640 PL.Imp <> b:546 var
R43647:43648 PL.Imp <> c2:548 var
R43653:43653 PL.Imp <> Q:545 var
R43591:43593 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43605:43608 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43611:43614 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43616:43618 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43595:43599 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R43594:43594 PL.Imp <> P:544 var
R43600:43601 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R43603:43604 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R43602:43602 PL.Imp <> b:546 var
R43609:43610 PL.Imp <> c1:547 var
R43615:43615 PL.Imp <> Q:545 var
ax 43714:43724 Axiomatic_semantics hoare_while
binder 43735:43735 <> P:550
binder 43737:43737 <> b:551
binder 43739:43739 <> c:552
R43769:43774 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43775:43776 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43778:43780 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43802:43805 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43821:43823 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43777:43777 PL.Imp <> P:550 var
R43781:43786 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R43788:43791 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R43793:43801 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R43787:43787 PL.Imp <> b:551 var
R43792:43792 PL.Imp <> c:552 var
R43807:43811 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R43806:43806 PL.Imp <> P:550 var
R43812:43815 PL.Imp Assertion_S ::assert_scope:'NOT'_x not
R43816:43817 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R43819:43820 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R43818:43818 PL.Imp <> b:551 var
R43744:43746 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43758:43761 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43763:43765 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43767:43768 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43748:43752 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R43747:43747 PL.Imp <> P:550 var
R43753:43754 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R43756:43757 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R43755:43755 PL.Imp <> b:551 var
R43762:43762 PL.Imp <> c:552 var
R43766:43766 PL.Imp <> P:550 var
ax 43833:43846 Axiomatic_semantics hoare_asgn_fwd
binder 43857:43857 <> P:554
R43864:43866 PL.Imp Concrete_Pretty_Printing var class
binder 43861:43861 <> X:556
binder 43869:43869 <> E:557
R43874:43876 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43878:43883 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43891:43896 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43963:43965 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43877:43877 PL.Imp <> P:554 var
R43885:43889 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R43884:43884 PL.Imp <> X:556 var
R43890:43890 PL.Imp <> E:557 var
R43897:43903 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
R43905:43906 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
binder 43904:43904 <> x:558
R43918:43937 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R43908:43909 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R43911:43915 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R43917:43917 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R43910:43910 PL.Imp <> X:556 var
R43916:43916 PL.Imp <> x:558 var
R43907:43907 PL.Imp <> P:554 var
R43943:43945 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R43938:43939 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R43941:43942 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R43940:43940 PL.Imp <> X:556 var
R43946:43948 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R43960:43962 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R43950:43951 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'['_x_'|->'_x_']' not
R43953:43957 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'['_x_'|->'_x_']' not
R43959:43959 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'['_x_'|->'_x_']' not
R43952:43952 PL.Imp <> X:556 var
R43958:43958 PL.Imp <> x:558 var
R43949:43949 PL.Imp <> E:557 var
ax 43975:43991 Axiomatic_semantics hoare_consequence
R44015:44023 PL.Imp Assertion_S Assertion ind
binder 44003:44003 <> P:560
binder 44005:44006 <> P':561
binder 44008:44008 <> Q:562
binder 44010:44011 <> Q':563
binder 44026:44026 <> c:564
R44039:44044 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44060:44065 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44074:44079 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44080:44081 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44083:44085 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44087:44089 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44091:44092 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44082:44082 PL.Imp <> P:560 var
R44086:44086 PL.Imp <> c:564 var
R44090:44090 PL.Imp <> Q:562 var
R44068:44072 PL.Imp Assertion_S :::x_'|--'_x not
R44066:44067 PL.Imp <> Q':563 var
R44073:44073 PL.Imp <> Q:562 var
R44045:44046 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44049:44051 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44053:44055 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44058:44059 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44047:44048 PL.Imp <> P':561 var
R44052:44052 PL.Imp <> c:564 var
R44056:44057 PL.Imp <> Q':563 var
R44032:44036 PL.Imp Assertion_S :::x_'|--'_x not
R44031:44031 PL.Imp <> P:560 var
R44037:44038 PL.Imp <> P':561 var
ax 44102:44115 Axiomatic_semantics hoare_asgn_bwd
binder 44126:44126 <> P:566
R44133:44135 PL.Imp Concrete_Pretty_Printing var class
binder 44130:44130 <> X:568
binder 44138:44138 <> E:569
R44143:44145 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44158:44161 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44169:44172 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44174:44176 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44147:44149 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R44151:44155 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R44157:44157 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R44150:44150 PL.Imp <> X:568 var
R44156:44156 PL.Imp <> E:569 var
R44146:44146 PL.Imp <> P:566 var
R44163:44167 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R44162:44162 PL.Imp <> X:568 var
R44168:44168 PL.Imp <> E:569 var
R44173:44173 PL.Imp <> P:566 var
R44184:44202 PL.Imp Axiomatic_semantics <> mod
mod 44213:44229 <> Assertion_S_Rules
R44272:44278 PL.Imp Assertion_S derives def
prf 44288:44296 Assertion_S_Rules AND_left1
R44313:44321 PL.Imp Assertion_S Assertion ind
binder 44306:44306 <> P:571
binder 44308:44308 <> Q:572
binder 44310:44310 <> R:573
R44333:44338 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44346:44350 PL.Imp Assertion_S :::x_'|--'_x not
R44340:44344 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R44339:44339 PL.Imp <> P:571 var
R44345:44345 PL.Imp <> Q:572 var
R44351:44351 PL.Imp <> R:573 var
R44327:44331 PL.Imp Assertion_S :::x_'|--'_x not
R44326:44326 PL.Imp <> P:571 var
R44332:44332 PL.Imp <> R:573 var
prf 44434:44442 Assertion_S_Rules AND_left2
R44459:44467 PL.Imp Assertion_S Assertion ind
binder 44452:44452 <> P:574
binder 44454:44454 <> Q:575
binder 44456:44456 <> R:576
R44479:44484 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44492:44496 PL.Imp Assertion_S :::x_'|--'_x not
R44486:44490 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R44485:44485 PL.Imp <> P:574 var
R44491:44491 PL.Imp <> Q:575 var
R44497:44497 PL.Imp <> R:576 var
R44473:44477 PL.Imp Assertion_S :::x_'|--'_x not
R44472:44472 PL.Imp <> Q:575 var
R44478:44478 PL.Imp <> R:576 var
prf 44580:44588 Assertion_S_Rules AND_right
R44605:44613 PL.Imp Assertion_S Assertion ind
binder 44598:44598 <> P:577
binder 44600:44600 <> Q:578
binder 44602:44602 <> R:579
R44625:44630 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44638:44643 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44645:44649 PL.Imp Assertion_S :::x_'|--'_x not
R44644:44644 PL.Imp <> P:577 var
R44651:44655 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R44650:44650 PL.Imp <> Q:578 var
R44656:44656 PL.Imp <> R:579 var
R44632:44636 PL.Imp Assertion_S :::x_'|--'_x not
R44631:44631 PL.Imp <> P:577 var
R44637:44637 PL.Imp <> R:579 var
R44619:44623 PL.Imp Assertion_S :::x_'|--'_x not
R44618:44618 PL.Imp <> P:577 var
R44624:44624 PL.Imp <> Q:578 var
prf 44760:44766 Assertion_S_Rules OR_left
R44783:44791 PL.Imp Assertion_S Assertion ind
binder 44776:44776 <> P:580
binder 44778:44778 <> Q:581
binder 44780:44780 <> R:582
R44803:44808 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44816:44821 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44828:44832 PL.Imp Assertion_S :::x_'|--'_x not
R44823:44826 PL.Imp Assertion_S ::assert_scope:x_'OR'_x not
R44822:44822 PL.Imp <> P:580 var
R44827:44827 PL.Imp <> Q:581 var
R44833:44833 PL.Imp <> R:582 var
R44810:44814 PL.Imp Assertion_S :::x_'|--'_x not
R44809:44809 PL.Imp <> Q:581 var
R44815:44815 PL.Imp <> R:582 var
R44797:44801 PL.Imp Assertion_S :::x_'|--'_x not
R44796:44796 PL.Imp <> P:580 var
R44802:44802 PL.Imp <> R:582 var
prf 44937:44945 Assertion_S_Rules OR_right1
R44962:44970 PL.Imp Assertion_S Assertion ind
binder 44955:44955 <> P:583
binder 44957:44957 <> Q:584
binder 44959:44959 <> R:585
R44982:44987 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44989:44993 PL.Imp Assertion_S :::x_'|--'_x not
R44988:44988 PL.Imp <> P:583 var
R44995:44998 PL.Imp Assertion_S ::assert_scope:x_'OR'_x not
R44994:44994 PL.Imp <> Q:584 var
R44999:44999 PL.Imp <> R:585 var
R44976:44980 PL.Imp Assertion_S :::x_'|--'_x not
R44975:44975 PL.Imp <> P:583 var
R44981:44981 PL.Imp <> Q:584 var
prf 45082:45090 Assertion_S_Rules OR_right2
R45107:45115 PL.Imp Assertion_S Assertion ind
binder 45100:45100 <> P:586
binder 45102:45102 <> Q:587
binder 45104:45104 <> R:588
R45127:45132 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45134:45138 PL.Imp Assertion_S :::x_'|--'_x not
R45133:45133 PL.Imp <> P:586 var
R45140:45143 PL.Imp Assertion_S ::assert_scope:x_'OR'_x not
R45139:45139 PL.Imp <> Q:587 var
R45144:45144 PL.Imp <> R:588 var
R45121:45125 PL.Imp Assertion_S :::x_'|--'_x not
R45120:45120 PL.Imp <> P:586 var
R45126:45126 PL.Imp <> R:588 var
prf 45227:45229 Assertion_S_Rules LEM
R45244:45252 PL.Imp Assertion_S Assertion ind
binder 45239:45239 <> P:589
binder 45241:45241 <> Q:590
R45258:45262 PL.Imp Assertion_S :::x_'|--'_x not
R45257:45257 PL.Imp <> P:589 var
R45264:45267 PL.Imp Assertion_S ::assert_scope:x_'OR'_x not
R45263:45263 PL.Imp <> Q:590 var
R45268:45271 PL.Imp Assertion_S ::assert_scope:'NOT'_x not
R45272:45272 PL.Imp <> Q:590 var
prf 45335:45340 Assertion_S_Rules CONTRA
R45355:45363 PL.Imp Assertion_S Assertion ind
binder 45350:45350 <> P:591
binder 45352:45352 <> Q:592
R45379:45383 PL.Imp Assertion_S :::x_'|--'_x not
R45369:45373 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R45368:45368 PL.Imp <> P:591 var
R45374:45377 PL.Imp Assertion_S ::assert_scope:'NOT'_x not
R45378:45378 PL.Imp <> P:591 var
R45384:45384 PL.Imp <> Q:592 var
prf 45447:45455 Assertion_S_Rules Prop_left
binder 45466:45466 <> P:593
R45479:45487 PL.Imp Assertion_S Assertion ind
binder 45476:45476 <> Q:594
R45496:45501 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45503:45507 PL.Imp Assertion_S :::x_'|--'_x not
R45502:45502 PL.Imp <> P:593 var
R45508:45508 PL.Imp <> Q:594 var
R45493:45494 Coq.Init.Logic <> ::type_scope:'~'_x not
R45495:45495 PL.Imp <> P:593 var
prf 45571:45580 Assertion_S_Rules Prop_right
R45594:45602 PL.Imp Assertion_S Assertion ind
binder 45591:45591 <> P:595
binder 45606:45606 <> Q:596
R45619:45624 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45626:45630 PL.Imp Assertion_S :::x_'|--'_x not
R45625:45625 PL.Imp <> P:595 var
R45631:45631 PL.Imp <> Q:596 var
R45618:45618 PL.Imp <> Q:596 var
prf 45694:45703 Assertion_S_Rules False_left
R45717:45725 PL.Imp Assertion_S Assertion ind
binder 45714:45714 <> P:597
R45736:45740 PL.Imp Assertion_S :::x_'|--'_x not
R45731:45735 Coq.Init.Logic <> False ind
R45741:45741 PL.Imp <> P:597 var
R45769:45777 PL.Imp Assertion_S_Rules Prop_left thm
R45769:45777 PL.Imp Assertion_S_Rules Prop_left thm
prf 45801:45810 Assertion_S_Rules True_right
R45824:45832 PL.Imp Assertion_S Assertion ind
binder 45821:45821 <> P:598
R45839:45843 PL.Imp Assertion_S :::x_'|--'_x not
R45838:45838 PL.Imp <> P:598 var
R45844:45847 Coq.Init.Logic <> True ind
R45875:45884 PL.Imp Assertion_S_Rules Prop_right thm
R45875:45884 PL.Imp Assertion_S_Rules Prop_right thm
prf 45908:45918 Assertion_S_Rules FORALL_left
R45933:45936 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45937:45945 PL.Imp Assertion_S Assertion ind
R45932:45932 Coq.Numbers.BinNums <> Z ind
binder 45929:45929 <> P:599
R45952:45960 PL.Imp Assertion_S Assertion ind
binder 45949:45949 <> Q:600
R45967:45967 Coq.Numbers.BinNums <> Z ind
binder 45964:45964 <> x:601
R45982:45987 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46001:46005 PL.Imp Assertion_S :::x_'|--'_x not
R45988:45994 PL.Imp Assertion_S ::assert_scope:'FORALL'_x_','_x not
R45996:45997 PL.Imp Assertion_S ::assert_scope:'FORALL'_x_','_x not
binder 45995:45995 <> x:602
R45998:45998 PL.Imp <> P:599 var
R46000:46000 PL.Imp <> x:602 var
R46006:46006 PL.Imp <> Q:600 var
R45976:45980 PL.Imp Assertion_S :::x_'|--'_x not
R45973:45973 PL.Imp <> P:599 var
R45975:45975 PL.Imp <> x:601 var
R45981:45981 PL.Imp <> Q:600 var
prf 46074:46085 Assertion_S_Rules FORALL_right
R46099:46107 PL.Imp Assertion_S Assertion ind
binder 46096:46096 <> P:603
R46115:46118 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46119:46127 PL.Imp Assertion_S Assertion ind
R46114:46114 Coq.Numbers.BinNums <> Z ind
binder 46111:46111 <> Q:604
R46133:46133 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46153:46159 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46161:46165 PL.Imp Assertion_S :::x_'|--'_x not
R46160:46160 PL.Imp <> P:603 var
R46166:46172 PL.Imp Assertion_S ::assert_scope:'FORALL'_x_','_x not
R46174:46175 PL.Imp Assertion_S ::assert_scope:'FORALL'_x_','_x not
binder 46173:46173 <> x:605
R46176:46176 PL.Imp <> Q:604 var
R46178:46178 PL.Imp <> x:605 var
binder 46141:46141 <> x:606
R46145:46149 PL.Imp Assertion_S :::x_'|--'_x not
R46144:46144 PL.Imp <> P:603 var
R46150:46150 PL.Imp <> Q:604 var
R46152:46152 PL.Imp <> x:606 var
prf 46246:46256 Assertion_S_Rules EXISTS_left
R46271:46274 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46275:46283 PL.Imp Assertion_S Assertion ind
R46270:46270 Coq.Numbers.BinNums <> Z ind
binder 46267:46267 <> P:607
R46290:46298 PL.Imp Assertion_S Assertion ind
binder 46287:46287 <> Q:608
R46304:46304 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46324:46330 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46344:46348 PL.Imp Assertion_S :::x_'|--'_x not
R46331:46337 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
R46339:46340 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
binder 46338:46338 <> x:609
R46341:46341 PL.Imp <> P:607 var
R46343:46343 PL.Imp <> x:609 var
R46349:46349 PL.Imp <> Q:608 var
binder 46312:46312 <> x:610
R46318:46322 PL.Imp Assertion_S :::x_'|--'_x not
R46315:46315 PL.Imp <> P:607 var
R46317:46317 PL.Imp <> x:610 var
R46323:46323 PL.Imp <> Q:608 var
prf 46417:46428 Assertion_S_Rules EXISTS_right
R46442:46450 PL.Imp Assertion_S Assertion ind
binder 46439:46439 <> P:611
R46458:46461 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46462:46470 PL.Imp Assertion_S Assertion ind
R46457:46457 Coq.Numbers.BinNums <> Z ind
binder 46454:46454 <> Q:612
R46477:46477 Coq.Numbers.BinNums <> Z ind
binder 46474:46474 <> x:613
R46492:46497 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46499:46503 PL.Imp Assertion_S :::x_'|--'_x not
R46498:46498 PL.Imp <> P:611 var
R46504:46510 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
R46512:46513 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
binder 46511:46511 <> x:614
R46514:46514 PL.Imp <> Q:612 var
R46516:46516 PL.Imp <> x:614 var
R46484:46488 PL.Imp Assertion_S :::x_'|--'_x not
R46483:46483 PL.Imp <> P:611 var
R46489:46489 PL.Imp <> Q:612 var
R46491:46491 PL.Imp <> x:613 var
prf 46584:46595 Assertion_S_Rules derives_refl
R46609:46617 PL.Imp Assertion_S Assertion ind
binder 46606:46606 <> P:615
R46624:46628 PL.Imp Assertion_S :::x_'|--'_x not
R46623:46623 PL.Imp <> P:615 var
R46629:46629 PL.Imp <> P:615 var
binder 46662:46664 <> rho:616
binder 46666:46666 <> H:617
R46671:46671 PL.Imp <> H:617 var
binder 46662:46664 <> rho:618
binder 46666:46666 <> H:619
R46671:46671 PL.Imp <> H:619 var
prf 46687:46699 Assertion_S_Rules derives_trans
R46717:46725 PL.Imp Assertion_S Assertion ind
binder 46710:46710 <> P:620
binder 46712:46712 <> Q:621
binder 46714:46714 <> R:622
R46738:46743 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46751:46756 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46758:46762 PL.Imp Assertion_S :::x_'|--'_x not
R46757:46757 PL.Imp <> P:620 var
R46763:46763 PL.Imp <> R:622 var
R46745:46749 PL.Imp Assertion_S :::x_'|--'_x not
R46744:46744 PL.Imp <> Q:621 var
R46750:46750 PL.Imp <> R:622 var
R46732:46736 PL.Imp Assertion_S :::x_'|--'_x not
R46731:46731 PL.Imp <> P:620 var
R46737:46737 PL.Imp <> Q:621 var
binder 46796:46798 <> rho:623
binder 46800:46801 <> HH:624
R46820:46821 PL.Imp <> HH:624 var
R46816:46818 PL.Imp <> rho:623 var
R46809:46811 PL.Imp <> rho:623 var
binder 46796:46798 <> rho:625
binder 46800:46801 <> HH:626
R46820:46821 PL.Imp <> HH:626 var
R46816:46818 PL.Imp <> rho:625 var
R46809:46811 PL.Imp <> rho:625 var
R46836:46852 PL.Imp Assertion_S_Rules <> mod
mod 46863:46875 <> Derived_Rules
prf 46977:46997 Derived_Rules hoare_consequence_pre
binder 47007:47007 <> P:627
binder 47009:47010 <> P':628
binder 47012:47012 <> Q:629
binder 47014:47014 <> c:630
R47027:47032 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R47051:47056 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R47057:47059 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47061:47064 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47066:47069 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47071:47073 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47060:47060 PL.Imp <> P:627 var
R47065:47065 PL.Imp <> c:630 var
R47070:47070 PL.Imp <> Q:629 var
R47033:47035 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47038:47041 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47043:47046 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47048:47050 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47036:47037 PL.Imp <> P':628 var
R47042:47042 PL.Imp <> c:630 var
R47047:47047 PL.Imp <> Q:629 var
R47020:47024 PL.Imp Assertion_S :::x_'|--'_x not
R47019:47019 PL.Imp <> P:627 var
R47025:47026 PL.Imp <> P':628 var
R47102:47118 PL.Imp Axiomatic_semantics hoare_consequence prfax
R47102:47118 PL.Imp Axiomatic_semantics hoare_consequence prfax
R47158:47169 PL.Imp Assertion_S_Rules derives_refl thm
R47158:47169 PL.Imp Assertion_S_Rules derives_refl thm
prf 47188:47209 Derived_Rules hoare_consequence_post
binder 47219:47219 <> P:631
binder 47221:47221 <> Q:632
binder 47223:47224 <> Q':633
binder 47226:47226 <> c:634
R47249:47254 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R47263:47268 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R47269:47271 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47273:47276 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47278:47281 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47283:47285 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47272:47272 PL.Imp <> P:631 var
R47277:47277 PL.Imp <> c:634 var
R47282:47282 PL.Imp <> Q:632 var
R47257:47261 PL.Imp Assertion_S :::x_'|--'_x not
R47255:47256 PL.Imp <> Q':633 var
R47262:47262 PL.Imp <> Q:632 var
R47231:47233 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47235:47238 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47240:47243 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47246:47248 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47234:47234 PL.Imp <> P:631 var
R47239:47239 PL.Imp <> c:634 var
R47244:47245 PL.Imp <> Q':633 var
R47314:47330 PL.Imp Axiomatic_semantics hoare_consequence prfax
R47314:47330 PL.Imp Axiomatic_semantics hoare_consequence prfax
R47343:47354 PL.Imp Assertion_S_Rules derives_refl thm
R47343:47354 PL.Imp Assertion_S_Rules derives_refl thm
prf 47400:47412 Derived_Rules hoare_if_weak
binder 47423:47423 <> P:635
binder 47425:47425 <> Q:636
binder 47427:47427 <> b:637
binder 47429:47430 <> c1:638
binder 47432:47433 <> c2:639
R47452:47457 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R47472:47477 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R47478:47479 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47481:47483 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47510:47512 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47514:47515 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47480:47480 PL.Imp <> P:635 var
R47484:47486 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R47488:47493 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R47496:47501 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R47504:47509 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R47487:47487 PL.Imp <> b:637 var
R47494:47495 PL.Imp <> c1:638 var
R47502:47503 PL.Imp <> c2:639 var
R47513:47513 PL.Imp <> Q:636 var
R47458:47459 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47461:47463 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47466:47468 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47470:47471 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47460:47460 PL.Imp <> P:635 var
R47464:47465 PL.Imp <> c2:639 var
R47469:47469 PL.Imp <> Q:636 var
R47438:47439 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47441:47443 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47446:47448 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47450:47451 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47440:47440 PL.Imp <> P:635 var
R47444:47445 PL.Imp <> c1:638 var
R47449:47449 PL.Imp <> Q:636 var
R47543:47550 PL.Imp Axiomatic_semantics hoare_if prfax
R47543:47550 PL.Imp Axiomatic_semantics hoare_if prfax
R47564:47584 PL.Imp Derived_Rules hoare_consequence_pre thm
R47564:47584 PL.Imp Derived_Rules hoare_consequence_pre thm
R47617:47625 PL.Imp Assertion_S_Rules AND_left1 thm
R47617:47625 PL.Imp Assertion_S_Rules AND_left1 thm
R47638:47649 PL.Imp Assertion_S_Rules derives_refl thm
R47638:47649 PL.Imp Assertion_S_Rules derives_refl thm
R47663:47683 PL.Imp Derived_Rules hoare_consequence_pre thm
R47663:47683 PL.Imp Derived_Rules hoare_consequence_pre thm
R47717:47725 PL.Imp Assertion_S_Rules AND_left1 thm
R47717:47725 PL.Imp Assertion_S_Rules AND_left1 thm
R47738:47749 PL.Imp Assertion_S_Rules derives_refl thm
R47738:47749 PL.Imp Assertion_S_Rules derives_refl thm
prf 47768:47781 Derived_Rules hoare_asgn_seq
binder 47791:47791 <> P:640
R47798:47800 PL.Imp Concrete_Pretty_Printing var class
binder 47795:47795 <> X:642
binder 47803:47803 <> E:643
binder 47805:47805 <> c:644
binder 47807:47807 <> Q:645
R47879:47884 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R47885:47887 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47889:47892 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47905:47908 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47910:47912 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47888:47888 PL.Imp <> P:640 var
R47900:47903 PL.Imp <> ::imp_scope:x_';;'_x not
R47894:47898 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R47893:47893 PL.Imp <> X:642 var
R47899:47899 PL.Imp <> E:643 var
R47904:47904 PL.Imp <> c:644 var
R47909:47909 PL.Imp <> Q:645 var
R47812:47814 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47866:47869 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47871:47874 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47876:47878 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47815:47821 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
R47823:47824 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
binder 47822:47822 <> x:646
R47836:47840 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R47826:47827 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R47829:47833 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R47835:47835 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R47828:47828 PL.Imp <> X:642 var
R47834:47834 PL.Imp <> x:646 var
R47825:47825 PL.Imp <> P:640 var
R47846:47848 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R47841:47842 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R47844:47845 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R47843:47843 PL.Imp <> X:642 var
R47849:47851 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R47863:47865 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R47853:47854 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'['_x_'|->'_x_']' not
R47856:47860 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'['_x_'|->'_x_']' not
R47862:47862 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'['_x_'|->'_x_']' not
R47855:47855 PL.Imp <> X:642 var
R47861:47861 PL.Imp <> x:646 var
R47852:47852 PL.Imp <> E:643 var
R47870:47870 PL.Imp <> c:644 var
R47875:47875 PL.Imp <> Q:645 var
R47941:47949 PL.Imp Axiomatic_semantics hoare_seq prfax
R47941:47949 PL.Imp Axiomatic_semantics hoare_seq prfax
R47962:47975 PL.Imp Axiomatic_semantics hoare_asgn_fwd prfax
R47962:47975 PL.Imp Axiomatic_semantics hoare_asgn_fwd prfax
prf 48007:48023 Derived_Rules hoare_asgn_conseq
binder 48033:48033 <> P:647
R48040:48042 PL.Imp Concrete_Pretty_Printing var class
binder 48037:48037 <> X:649
binder 48045:48045 <> E:650
binder 48047:48047 <> Q:651
R48109:48114 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R48115:48117 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R48119:48122 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R48130:48133 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R48135:48137 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R48118:48118 PL.Imp <> P:647 var
R48124:48128 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R48123:48123 PL.Imp <> X:649 var
R48129:48129 PL.Imp <> E:650 var
R48134:48134 PL.Imp <> Q:651 var
R48103:48107 PL.Imp Assertion_S :::x_'|--'_x not
R48052:48058 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
R48060:48061 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
binder 48059:48059 <> x:652
R48073:48077 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R48063:48064 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R48066:48070 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R48072:48072 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R48065:48065 PL.Imp <> X:649 var
R48071:48071 PL.Imp <> x:652 var
R48062:48062 PL.Imp <> P:647 var
R48083:48085 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R48078:48079 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R48081:48082 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R48080:48080 PL.Imp <> X:649 var
R48086:48088 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R48100:48102 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R48090:48091 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'['_x_'|->'_x_']' not
R48093:48097 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'['_x_'|->'_x_']' not
R48099:48099 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'['_x_'|->'_x_']' not
R48092:48092 PL.Imp <> X:649 var
R48098:48098 PL.Imp <> x:652 var
R48089:48089 PL.Imp <> E:650 var
R48108:48108 PL.Imp <> Q:651 var
R48166:48187 PL.Imp Derived_Rules hoare_consequence_post thm
R48166:48187 PL.Imp Derived_Rules hoare_consequence_post thm
R48200:48213 PL.Imp Axiomatic_semantics hoare_asgn_fwd prfax
R48200:48213 PL.Imp Axiomatic_semantics hoare_asgn_fwd prfax
R48239:48251 PL.Imp Derived_Rules <> mod
mod 48401:48411 <> Assertion_D
def 48459:48469 Assertion_D logical_var
R48480:48482 Coq.Init.Datatypes <> nat ind
ind 48496:48500 Assertion_D aexp'
constr 48516:48520 Assertion_D ANum'
constr 48537:48540 Assertion_D AId'
constr 48555:48560 Assertion_D APlus'
constr 48582:48588 Assertion_D AMinus'
constr 48610:48615 Assertion_D AMult'
ind 48638:48641 Assertion_D term
constr 48657:48660 Assertion_D TNum
constr 48674:48676 Assertion_D TId
constr 48699:48705 Assertion_D TDenote
constr 48723:48727 Assertion_D TPlus
constr 48748:48753 Assertion_D TMinus
constr 48774:48778 Assertion_D TMult
R48527:48530 PL.Imp <> term:654 ind
binder 48523:48523 <> t:657
R48546:48548 PL.Imp <> var def
binder 48543:48543 <> X:658
R48571:48575 PL.Imp <> aexp':653 ind
binder 48563:48564 <> a1:659
binder 48566:48567 <> a2:660
R48599:48603 PL.Imp <> aexp':653 ind
binder 48591:48592 <> a1:661
binder 48594:48595 <> a2:662
R48626:48630 PL.Imp <> aexp':653 ind
binder 48618:48619 <> a1:663
binder 48621:48622 <> a2:664
R48667:48667 Coq.Numbers.BinNums <> Z ind
binder 48663:48663 <> n:665
R48682:48692 PL.Imp Assertion_D logical_var def
binder 48679:48679 <> x:666
R48712:48716 PL.Imp <> aexp':653 ind
binder 48708:48708 <> a:667
R48738:48741 PL.Imp <> term:654 ind
binder 48730:48731 <> t1:668
binder 48733:48734 <> t2:669
R48764:48767 PL.Imp <> term:654 ind
binder 48756:48757 <> t1:670
binder 48759:48760 <> t2:671
R48789:48792 PL.Imp <> term:654 ind
binder 48781:48782 <> t1:672
binder 48784:48785 <> t2:673
ind 48807:48811 Assertion_D bexp'
constr 48827:48832 Assertion_D BTrue'
constr 48838:48844 Assertion_D BFalse'
constr 48850:48853 Assertion_D BEq'
constr 48875:48878 Assertion_D BLe'
constr 48900:48904 Assertion_D BNot'
constr 48922:48926 Assertion_D BAnd'
R48864:48868 PL.Imp Assertion_D aexp' ind
binder 48856:48857 <> a1:676
binder 48859:48860 <> a2:677
R48889:48893 PL.Imp Assertion_D aexp' ind
binder 48881:48882 <> a1:678
binder 48884:48885 <> a2:679
R48911:48915 PL.Imp <> bexp':674 ind
binder 48907:48907 <> b:680
R48937:48941 PL.Imp <> bexp':674 ind
binder 48929:48930 <> b1:681
binder 48932:48933 <> b2:682
R48946:48976 PL.Imp Assertion_D ANum' constr
R48979:49007 PL.Imp Assertion_D AId' constr
R49136:49141 PL.Imp Assertion_D APlus' constr
not 49124:49124 Assertion_D ::vimp_scope:x_'+'_x
R49217:49223 PL.Imp Assertion_D AMinus' constr
not 49205:49205 Assertion_D ::vimp_scope:x_'-'_x
R49299:49304 PL.Imp Assertion_D AMult' constr
not 49287:49287 Assertion_D ::vimp_scope:x_'*'_x
R49381:49384 PL.Imp Assertion_D BLe' constr
not 49368:49368 Assertion_D ::vimp_scope:x_'<='_x
R49459:49462 PL.Imp Assertion_D BEq' constr
not 49446:49446 Assertion_D ::vimp_scope:x_'=='_x
R49537:49541 PL.Imp Assertion_D BAnd' constr
not 49524:49524 Assertion_D ::vimp_scope:x_'&&'_x
R49617:49621 PL.Imp Assertion_D BNot' constr
not 49605:49605 Assertion_D ::vimp_scope:'!'_x
R49676:49701 PL.Imp Assertion_D TNum constr
R49704:49737 PL.Imp Assertion_D TId constr
R49831:49835 PL.Imp Assertion_D TPlus constr
not 49819:49819 Assertion_D ::term_scope:x_'+'_x
R49911:49916 PL.Imp Assertion_D TMinus constr
not 49899:49899 Assertion_D ::term_scope:x_'-'_x
R49992:49996 PL.Imp Assertion_D TMult constr
not 49980:49980 Assertion_D ::term_scope:x_'*'_x
R50074:50080 PL.Imp Assertion_D TDenote constr
not 50060:50060 Assertion_D ::term_scope:'{['_x_']}'
def 50219:50222 Assertion_D ainj
R50228:50231 PL.Imp <> aexp ind
binder 50225:50225 <> a:683
R50235:50239 PL.Imp Assertion_D aexp' ind
R50252:50252 PL.Imp <> a:683 var
R50263:50266 PL.Imp <> ANum constr
R50280:50284 PL.Imp Assertion_D ANum' constr
R50287:50290 PL.Imp Assertion_D TNum constr
R50299:50301 PL.Imp <> AId constr
R50316:50319 PL.Imp Assertion_D AId' constr
R50327:50331 PL.Imp <> APlus constr
R50344:50349 PL.Imp Assertion_D APlus' constr
R50362:50365 PL.Imp <> ainj:684 def
R50352:50355 PL.Imp <> ainj:684 def
R50375:50380 PL.Imp <> AMinus constr
R50392:50398 PL.Imp Assertion_D AMinus' constr
R50411:50414 PL.Imp <> ainj:684 def
R50401:50404 PL.Imp <> ainj:684 def
R50424:50428 PL.Imp <> AMult constr
R50441:50446 PL.Imp Assertion_D AMult' constr
R50459:50462 PL.Imp <> ainj:684 def
R50449:50452 PL.Imp <> ainj:684 def
def 50485:50488 Assertion_D binj
R50495:50498 PL.Imp <> bexp ind
binder 50491:50491 <> b:686
R50502:50506 PL.Imp Assertion_D bexp' ind
R50519:50519 PL.Imp <> b:686 var
R50530:50534 PL.Imp <> BTrue constr
R50545:50550 PL.Imp Assertion_D BTrue' constr
R50556:50561 PL.Imp <> BFalse constr
R50571:50577 PL.Imp Assertion_D BFalse' constr
R50583:50585 PL.Imp <> BEq constr
R50598:50601 PL.Imp Assertion_D BEq' constr
R50614:50617 PL.Imp Assertion_D ainj def
R50604:50607 PL.Imp Assertion_D ainj def
R50627:50629 PL.Imp <> BLe constr
R50642:50645 PL.Imp Assertion_D BLe' constr
R50658:50661 PL.Imp Assertion_D ainj def
R50648:50651 PL.Imp Assertion_D ainj def
R50671:50674 PL.Imp <> BNot constr
R50686:50690 PL.Imp Assertion_D BNot' constr
R50693:50696 PL.Imp <> binj:687 def
R50706:50709 PL.Imp <> BAnd constr
R50721:50725 PL.Imp Assertion_D BAnd' constr
R50738:50741 PL.Imp <> binj:687 def
R50728:50731 PL.Imp <> binj:687 def
R50931:50959 PL.Imp Assertion_D ainj def
R50962:50990 PL.Imp Assertion_D binj def
ind 51004:51012 Assertion_D Assertion
constr 51028:51033 Assertion_D AssnLe
constr 51054:51059 Assertion_D AssnLt
constr 51080:51085 Assertion_D AssnEq
constr 51106:51115 Assertion_D AssnDenote
constr 51132:51137 Assertion_D AssnOr
constr 51163:51169 Assertion_D AssnAnd
constr 51195:51202 Assertion_D AssnImpl
constr 51228:51234 Assertion_D AssnNot
constr 51255:51264 Assertion_D AssnExists
constr 51302:51311 Assertion_D AssnForall
R51044:51047 PL.Imp Assertion_D term ind
binder 51036:51037 <> t1:691
binder 51039:51040 <> t2:692
R51070:51073 PL.Imp Assertion_D term ind
binder 51062:51063 <> t1:693
binder 51065:51066 <> t2:694
R51096:51099 PL.Imp Assertion_D term ind
binder 51088:51089 <> t1:695
binder 51091:51092 <> t2:696
R51121:51125 PL.Imp Assertion_D bexp' ind
binder 51118:51118 <> b:697
R51148:51156 PL.Imp <> Assertion:689 ind
binder 51140:51141 <> P1:698
binder 51143:51144 <> P2:699
R51180:51188 PL.Imp <> Assertion:689 ind
binder 51172:51173 <> P1:700
binder 51175:51176 <> P2:701
R51213:51221 PL.Imp <> Assertion:689 ind
binder 51205:51206 <> P1:702
binder 51208:51209 <> P2:703
R51240:51248 PL.Imp <> Assertion:689 ind
binder 51237:51237 <> P:704
R51270:51280 PL.Imp Assertion_D logical_var def
binder 51267:51267 <> x:705
R51287:51295 PL.Imp <> Assertion:689 ind
binder 51284:51284 <> P:706
R51317:51327 PL.Imp Assertion_D logical_var def
binder 51314:51314 <> x:707
R51334:51342 PL.Imp <> Assertion:689 ind
binder 51331:51331 <> P:708
R51450:51455 PL.Imp Assertion_D AssnLe constr
not 51437:51437 Assertion_D ::assert_scope:x_'<='_x
R51551:51556 PL.Imp Assertion_D AssnLt constr
not 51537:51537 Assertion_D ::assert_scope:x_'<'_x
R51650:51655 PL.Imp Assertion_D AssnEq constr
not 51638:51638 Assertion_D ::assert_scope:x_'='_x
R51751:51760 PL.Imp Assertion_D AssnDenote constr
not 51737:51737 Assertion_D ::assert_scope:'{['_x_']}'
R51848:51853 PL.Imp Assertion_D AssnOr constr
not 51831:51831 Assertion_D ::assert_scope:x_'OR'_x
R51939:51945 PL.Imp Assertion_D AssnAnd constr
not 51921:51921 Assertion_D ::assert_scope:x_'AND'_x
R52033:52040 PL.Imp Assertion_D AssnImpl constr
not 52013:52013 Assertion_D ::assert_scope:x_'IMPLY'_x
R52123:52129 PL.Imp Assertion_D AssnNot constr
not 52109:52109 Assertion_D ::assert_scope:'NOT'_x
R52218:52227 PL.Imp Assertion_D AssnExists constr
not 52194:52194 Assertion_D ::assert_scope:'EXISTS'_x_','_x
R52330:52339 PL.Imp Assertion_D AssnForall constr
not 52306:52306 Assertion_D ::assert_scope:'FORALL'_x_','_x
def 52418:52428 Assertion_D aexp_rename
def 52781:52791 Assertion_D term_rename
R52436:52446 PL.Imp Assertion_D logical_var def
binder 52431:52431 <> x:709
binder 52433:52433 <> y:710
R52453:52457 PL.Imp Assertion_D aexp' ind
binder 52450:52450 <> a:711
R52799:52809 PL.Imp Assertion_D logical_var def
binder 52794:52794 <> x:712
binder 52796:52796 <> y:713
R52816:52819 PL.Imp Assertion_D term ind
binder 52813:52813 <> t:714
R52461:52465 PL.Imp Assertion_D aexp' ind
R52480:52480 PL.Imp <> a:711 var
R52493:52497 PL.Imp Assertion_D ANum' constr
R52504:52508 PL.Imp Assertion_D ANum' constr
R52511:52521 PL.Imp <> term_rename:716 def
R52525:52525 PL.Imp <> y:710 var
R52523:52523 PL.Imp <> x:709 var
R52536:52539 PL.Imp Assertion_D AId' constr
R52546:52549 PL.Imp Assertion_D AId' constr
R52559:52564 PL.Imp Assertion_D APlus' constr
R52575:52580 PL.Imp Assertion_D APlus' constr
R52604:52614 PL.Imp <> aexp_rename:715 def
R52618:52618 PL.Imp <> y:710 var
R52616:52616 PL.Imp <> x:709 var
R52583:52593 PL.Imp <> aexp_rename:715 def
R52597:52597 PL.Imp <> y:710 var
R52595:52595 PL.Imp <> x:709 var
R52630:52636 PL.Imp Assertion_D AMinus' constr
R52647:52653 PL.Imp Assertion_D AMinus' constr
R52677:52687 PL.Imp <> aexp_rename:715 def
R52691:52691 PL.Imp <> y:710 var
R52689:52689 PL.Imp <> x:709 var
R52656:52666 PL.Imp <> aexp_rename:715 def
R52670:52670 PL.Imp <> y:710 var
R52668:52668 PL.Imp <> x:709 var
R52703:52708 PL.Imp Assertion_D AMult' constr
R52719:52724 PL.Imp Assertion_D AMult' constr
R52748:52758 PL.Imp <> aexp_rename:715 def
R52762:52762 PL.Imp <> y:710 var
R52760:52760 PL.Imp <> x:709 var
R52727:52737 PL.Imp <> aexp_rename:715 def
R52741:52741 PL.Imp <> y:710 var
R52739:52739 PL.Imp <> x:709 var
R52835:52835 PL.Imp <> t:714 var
R52848:52851 PL.Imp Assertion_D TNum constr
R52858:52861 PL.Imp Assertion_D TNum constr
R52871:52873 PL.Imp Assertion_D TId constr
R52893:52902 Coq.Arith.PeanoNat Nat eq_dec thm
R52904:52904 PL.Imp <> x:712 var
R52941:52943 PL.Imp Assertion_D TId constr
R52922:52924 PL.Imp Assertion_D TId constr
R52926:52926 PL.Imp <> y:713 var
R52954:52960 PL.Imp Assertion_D TDenote constr
R52967:52973 PL.Imp Assertion_D TDenote constr
R52976:52986 PL.Imp <> aexp_rename:715 def
R52990:52990 PL.Imp <> y:713 var
R52988:52988 PL.Imp <> x:712 var
R53001:53005 PL.Imp Assertion_D TPlus constr
R53016:53020 PL.Imp Assertion_D TPlus constr
R53044:53054 PL.Imp <> term_rename:716 def
R53058:53058 PL.Imp <> y:713 var
R53056:53056 PL.Imp <> x:712 var
R53023:53033 PL.Imp <> term_rename:716 def
R53037:53037 PL.Imp <> y:713 var
R53035:53035 PL.Imp <> x:712 var
R53070:53075 PL.Imp Assertion_D TMinus constr
R53086:53091 PL.Imp Assertion_D TMinus constr
R53115:53125 PL.Imp <> term_rename:716 def
R53129:53129 PL.Imp <> y:713 var
R53127:53127 PL.Imp <> x:712 var
R53094:53104 PL.Imp <> term_rename:716 def
R53108:53108 PL.Imp <> y:713 var
R53106:53106 PL.Imp <> x:712 var
R53141:53145 PL.Imp Assertion_D TMult constr
R53156:53160 PL.Imp Assertion_D TMult constr
R53184:53194 PL.Imp <> term_rename:716 def
R53198:53198 PL.Imp <> y:713 var
R53196:53196 PL.Imp <> x:712 var
R53163:53173 PL.Imp <> term_rename:716 def
R53177:53177 PL.Imp <> y:713 var
R53175:53175 PL.Imp <> x:712 var
def 53223:53233 Assertion_D bexp_rename
R53241:53251 PL.Imp Assertion_D logical_var def
binder 53236:53236 <> x:719
binder 53238:53238 <> y:720
R53258:53262 PL.Imp Assertion_D bexp' ind
binder 53255:53255 <> b:721
R53266:53270 PL.Imp Assertion_D bexp' ind
R53285:53285 PL.Imp <> b:721 var
R53298:53303 PL.Imp Assertion_D BTrue' constr
R53308:53313 PL.Imp Assertion_D BTrue' constr
R53321:53327 PL.Imp Assertion_D BFalse' constr
R53332:53338 PL.Imp Assertion_D BFalse' constr
R53346:53349 PL.Imp Assertion_D BEq' constr
R53360:53363 PL.Imp Assertion_D BEq' constr
R53387:53397 PL.Imp Assertion_D aexp_rename def
R53401:53401 PL.Imp <> y:720 var
R53399:53399 PL.Imp <> x:719 var
R53366:53376 PL.Imp Assertion_D aexp_rename def
R53380:53380 PL.Imp <> y:720 var
R53378:53378 PL.Imp <> x:719 var
R53413:53416 PL.Imp Assertion_D BLe' constr
R53427:53430 PL.Imp Assertion_D BLe' constr
R53454:53464 PL.Imp Assertion_D aexp_rename def
R53468:53468 PL.Imp <> y:720 var
R53466:53466 PL.Imp <> x:719 var
R53433:53443 PL.Imp Assertion_D aexp_rename def
R53447:53447 PL.Imp <> y:720 var
R53445:53445 PL.Imp <> x:719 var
R53480:53484 PL.Imp Assertion_D BNot' constr
R53491:53495 PL.Imp Assertion_D BNot' constr
R53498:53508 PL.Imp <> bexp_rename:722 def
R53514:53514 PL.Imp <> b:721 var
R53512:53512 PL.Imp <> y:720 var
R53510:53510 PL.Imp <> x:719 var
R53523:53527 PL.Imp Assertion_D BAnd' constr
R53538:53542 PL.Imp Assertion_D BAnd' constr
R53566:53576 PL.Imp <> bexp_rename:722 def
R53580:53580 PL.Imp <> y:720 var
R53578:53578 PL.Imp <> x:719 var
R53545:53555 PL.Imp <> bexp_rename:722 def
R53559:53559 PL.Imp <> y:720 var
R53557:53557 PL.Imp <> x:719 var
def 53605:53615 Assertion_D assn_rename
R53623:53633 PL.Imp Assertion_D logical_var def
binder 53618:53618 <> x:724
binder 53620:53620 <> y:725
R53640:53648 PL.Imp Assertion_D Assertion ind
binder 53637:53637 <> d:726
R53652:53660 PL.Imp Assertion_D Assertion ind
R53675:53675 PL.Imp <> d:726 var
R53688:53693 PL.Imp Assertion_D AssnLe constr
R53707:53712 PL.Imp Assertion_D AssnLe constr
R53736:53746 PL.Imp Assertion_D term_rename def
R53750:53750 PL.Imp <> y:725 var
R53748:53748 PL.Imp <> x:724 var
R53715:53725 PL.Imp Assertion_D term_rename def
R53729:53729 PL.Imp <> y:725 var
R53727:53727 PL.Imp <> x:724 var
R53762:53767 PL.Imp Assertion_D AssnLt constr
R53781:53786 PL.Imp Assertion_D AssnLt constr
R53810:53820 PL.Imp Assertion_D term_rename def
R53824:53824 PL.Imp <> y:725 var
R53822:53822 PL.Imp <> x:724 var
R53789:53799 PL.Imp Assertion_D term_rename def
R53803:53803 PL.Imp <> y:725 var
R53801:53801 PL.Imp <> x:724 var
R53836:53841 PL.Imp Assertion_D AssnEq constr
R53855:53860 PL.Imp Assertion_D AssnEq constr
R53884:53894 PL.Imp Assertion_D term_rename def
R53898:53898 PL.Imp <> y:725 var
R53896:53896 PL.Imp <> x:724 var
R53863:53873 PL.Imp Assertion_D term_rename def
R53877:53877 PL.Imp <> y:725 var
R53875:53875 PL.Imp <> x:724 var
R53910:53919 PL.Imp Assertion_D AssnDenote constr
R53929:53938 PL.Imp Assertion_D AssnDenote constr
R53941:53951 PL.Imp Assertion_D bexp_rename def
R53955:53955 PL.Imp <> y:725 var
R53953:53953 PL.Imp <> x:724 var
R53966:53971 PL.Imp Assertion_D AssnOr constr
R53985:53990 PL.Imp Assertion_D AssnOr constr
R54014:54024 PL.Imp <> assn_rename:727 def
R54028:54028 PL.Imp <> y:725 var
R54026:54026 PL.Imp <> x:724 var
R53993:54003 PL.Imp <> assn_rename:727 def
R54007:54007 PL.Imp <> y:725 var
R54005:54005 PL.Imp <> x:724 var
R54040:54046 PL.Imp Assertion_D AssnAnd constr
R54059:54065 PL.Imp Assertion_D AssnAnd constr
R54089:54099 PL.Imp <> assn_rename:727 def
R54103:54103 PL.Imp <> y:725 var
R54101:54101 PL.Imp <> x:724 var
R54068:54078 PL.Imp <> assn_rename:727 def
R54082:54082 PL.Imp <> y:725 var
R54080:54080 PL.Imp <> x:724 var
R54115:54122 PL.Imp Assertion_D AssnImpl constr
R54134:54141 PL.Imp Assertion_D AssnImpl constr
R54165:54175 PL.Imp <> assn_rename:727 def
R54179:54179 PL.Imp <> y:725 var
R54177:54177 PL.Imp <> x:724 var
R54144:54154 PL.Imp <> assn_rename:727 def
R54158:54158 PL.Imp <> y:725 var
R54156:54156 PL.Imp <> x:724 var
R54191:54197 PL.Imp Assertion_D AssnNot constr
R54210:54216 PL.Imp Assertion_D AssnNot constr
R54219:54229 PL.Imp <> assn_rename:727 def
R54233:54233 PL.Imp <> y:725 var
R54231:54231 PL.Imp <> x:724 var
R54244:54253 PL.Imp Assertion_D AssnExists constr
R54266:54275 Coq.Arith.PeanoNat Nat eq_dec thm
R54277:54277 PL.Imp <> x:724 var
R54358:54367 PL.Imp Assertion_D AssnExists constr
R54373:54383 PL.Imp <> assn_rename:727 def
R54387:54387 PL.Imp <> y:725 var
R54385:54385 PL.Imp <> x:724 var
R54312:54321 PL.Imp Assertion_D AssnExists constr
R54398:54407 PL.Imp Assertion_D AssnForall constr
R54420:54429 Coq.Arith.PeanoNat Nat eq_dec thm
R54431:54431 PL.Imp <> x:724 var
R54512:54521 PL.Imp Assertion_D AssnForall constr
R54527:54537 PL.Imp <> assn_rename:727 def
R54541:54541 PL.Imp <> y:725 var
R54539:54539 PL.Imp <> x:724 var
R54466:54475 PL.Imp Assertion_D AssnForall constr
def 54565:54576 Assertion_D aexp_max_var
def 54872:54883 Assertion_D term_max_var
R54582:54586 PL.Imp Assertion_D aexp' ind
binder 54579:54579 <> a:729
R54889:54892 PL.Imp Assertion_D term ind
binder 54886:54886 <> t:730
R54590:54600 PL.Imp Assertion_D logical_var def
R54896:54906 PL.Imp Assertion_D logical_var def
R54615:54615 PL.Imp <> a:729 var
R54628:54632 PL.Imp Assertion_D ANum' constr
R54639:54650 PL.Imp <> term_max_var:732 def
R54660:54663 PL.Imp Assertion_D AId' constr
R54670:54670 Coq.Init.Datatypes <> O constr
R54678:54683 PL.Imp Assertion_D APlus' constr
R54694:54696 Coq.Init.Peano <> max syndef
R54717:54728 PL.Imp <> aexp_max_var:731 def
R54699:54710 PL.Imp <> aexp_max_var:731 def
R54740:54746 PL.Imp Assertion_D AMinus' constr
R54757:54759 Coq.Init.Peano <> max syndef
R54780:54791 PL.Imp <> aexp_max_var:731 def
R54762:54773 PL.Imp <> aexp_max_var:731 def
R54803:54808 PL.Imp Assertion_D AMult' constr
R54819:54821 Coq.Init.Peano <> max syndef
R54842:54853 PL.Imp <> aexp_max_var:731 def
R54824:54835 PL.Imp <> aexp_max_var:731 def
R54921:54921 PL.Imp <> t:730 var
R54934:54937 PL.Imp Assertion_D TNum constr
R54944:54944 Coq.Init.Datatypes <> O constr
R54952:54954 PL.Imp Assertion_D TId constr
R54969:54975 PL.Imp Assertion_D TDenote constr
R54982:54993 PL.Imp <> aexp_max_var:731 def
R55003:55007 PL.Imp Assertion_D TPlus constr
R55018:55020 Coq.Init.Peano <> max syndef
R55041:55052 PL.Imp <> term_max_var:732 def
R55023:55034 PL.Imp <> term_max_var:732 def
R55064:55069 PL.Imp Assertion_D TMinus constr
R55080:55082 Coq.Init.Peano <> max syndef
R55103:55114 PL.Imp <> term_max_var:732 def
R55085:55096 PL.Imp <> term_max_var:732 def
R55126:55130 PL.Imp Assertion_D TMult constr
R55141:55143 Coq.Init.Peano <> max syndef
R55164:55175 PL.Imp <> term_max_var:732 def
R55146:55157 PL.Imp <> term_max_var:732 def
def 55200:55211 Assertion_D bexp_max_var
R55217:55221 PL.Imp Assertion_D bexp' ind
binder 55214:55214 <> b:735
R55225:55235 PL.Imp Assertion_D logical_var def
R55250:55250 PL.Imp <> b:735 var
R55263:55268 PL.Imp Assertion_D BTrue' constr
R55273:55273 Coq.Init.Datatypes <> O constr
R55281:55287 PL.Imp Assertion_D BFalse' constr
R55292:55292 Coq.Init.Datatypes <> O constr
R55300:55303 PL.Imp Assertion_D BEq' constr
R55314:55316 Coq.Init.Peano <> max syndef
R55337:55348 PL.Imp Assertion_D aexp_max_var def
R55319:55330 PL.Imp Assertion_D aexp_max_var def
R55360:55363 PL.Imp Assertion_D BLe' constr
R55374:55376 Coq.Init.Peano <> max syndef
R55397:55408 PL.Imp Assertion_D aexp_max_var def
R55379:55390 PL.Imp Assertion_D aexp_max_var def
R55420:55424 PL.Imp Assertion_D BNot' constr
R55431:55442 PL.Imp <> bexp_max_var:736 def
R55444:55444 PL.Imp <> b:735 var
R55452:55456 PL.Imp Assertion_D BAnd' constr
R55467:55469 Coq.Init.Peano <> max syndef
R55490:55501 PL.Imp <> bexp_max_var:736 def
R55472:55483 PL.Imp <> bexp_max_var:736 def
def 55526:55537 Assertion_D assn_max_var
R55543:55551 PL.Imp Assertion_D Assertion ind
binder 55540:55540 <> d:738
R55555:55565 PL.Imp Assertion_D logical_var def
R55580:55580 PL.Imp <> d:738 var
R55593:55598 PL.Imp Assertion_D AssnLe constr
R55612:55614 Coq.Init.Peano <> max syndef
R55635:55646 PL.Imp Assertion_D term_max_var def
R55617:55628 PL.Imp Assertion_D term_max_var def
R55658:55663 PL.Imp Assertion_D AssnLt constr
R55677:55679 Coq.Init.Peano <> max syndef
R55700:55711 PL.Imp Assertion_D term_max_var def
R55682:55693 PL.Imp Assertion_D term_max_var def
R55723:55728 PL.Imp Assertion_D AssnEq constr
R55742:55744 Coq.Init.Peano <> max syndef
R55765:55776 PL.Imp Assertion_D term_max_var def
R55747:55758 PL.Imp Assertion_D term_max_var def
R55788:55797 PL.Imp Assertion_D AssnDenote constr
R55807:55818 PL.Imp Assertion_D bexp_max_var def
R55828:55833 PL.Imp Assertion_D AssnOr constr
R55847:55849 Coq.Init.Peano <> max syndef
R55870:55881 PL.Imp <> assn_max_var:739 def
R55852:55863 PL.Imp <> assn_max_var:739 def
R55893:55899 PL.Imp Assertion_D AssnAnd constr
R55912:55914 Coq.Init.Peano <> max syndef
R55935:55946 PL.Imp <> assn_max_var:739 def
R55917:55928 PL.Imp <> assn_max_var:739 def
R55958:55965 PL.Imp Assertion_D AssnImpl constr
R55977:55979 Coq.Init.Peano <> max syndef
R56000:56011 PL.Imp <> assn_max_var:739 def
R55982:55993 PL.Imp <> assn_max_var:739 def
R56023:56029 PL.Imp Assertion_D AssnNot constr
R56042:56053 PL.Imp <> assn_max_var:739 def
R56063:56072 PL.Imp Assertion_D AssnExists constr
R56082:56084 Coq.Init.Peano <> max syndef
R56090:56101 PL.Imp <> assn_max_var:739 def
R56112:56121 PL.Imp Assertion_D AssnForall constr
R56131:56133 Coq.Init.Peano <> max syndef
R56139:56150 PL.Imp <> assn_max_var:739 def
def 56176:56182 Assertion_D new_var
R56188:56196 PL.Imp Assertion_D Assertion ind
binder 56185:56185 <> P:741
R56203:56207 PL.Imp Assertion_D aexp' ind
binder 56200:56200 <> E:742
R56211:56221 PL.Imp Assertion_D logical_var def
R56228:56228 Coq.Init.Datatypes <> S constr
R56231:56233 Coq.Init.Peano <> max syndef
R56253:56264 PL.Imp Assertion_D aexp_max_var def
R56266:56266 PL.Imp <> E:742 var
R56236:56247 PL.Imp Assertion_D assn_max_var def
R56249:56249 PL.Imp <> P:741 var
def 56281:56288 Assertion_D aexp_sub
def 56681:56688 Assertion_D term_sub
R56294:56296 PL.Imp <> var def
binder 56291:56291 <> X:743
R56303:56307 PL.Imp Assertion_D aexp' ind
binder 56300:56300 <> E:744
R56314:56318 PL.Imp Assertion_D aexp' ind
binder 56311:56311 <> a:745
R56694:56696 PL.Imp <> var def
binder 56691:56691 <> X:746
R56703:56707 PL.Imp Assertion_D aexp' ind
binder 56700:56700 <> E:747
R56714:56717 PL.Imp Assertion_D term ind
binder 56711:56711 <> t:748
R56322:56326 PL.Imp Assertion_D aexp' ind
R56341:56341 PL.Imp <> a:745 var
R56354:56358 PL.Imp Assertion_D ANum' constr
R56365:56369 PL.Imp Assertion_D ANum' constr
R56372:56379 PL.Imp <> term_sub:750 def
R56383:56383 PL.Imp <> E:744 var
R56381:56381 PL.Imp <> X:743 var
R56394:56397 PL.Imp Assertion_D AId' constr
R56417:56426 Coq.Arith.PeanoNat Nat eq_dec thm
R56428:56428 PL.Imp <> X:743 var
R56463:56466 PL.Imp Assertion_D AId' constr
R56447:56447 PL.Imp <> E:744 var
R56477:56482 PL.Imp Assertion_D APlus' constr
R56493:56498 PL.Imp Assertion_D APlus' constr
R56519:56526 PL.Imp <> aexp_sub:749 def
R56530:56530 PL.Imp <> E:744 var
R56528:56528 PL.Imp <> X:743 var
R56501:56508 PL.Imp <> aexp_sub:749 def
R56512:56512 PL.Imp <> E:744 var
R56510:56510 PL.Imp <> X:743 var
R56542:56548 PL.Imp Assertion_D AMinus' constr
R56559:56565 PL.Imp Assertion_D AMinus' constr
R56586:56593 PL.Imp <> aexp_sub:749 def
R56597:56597 PL.Imp <> E:744 var
R56595:56595 PL.Imp <> X:743 var
R56568:56575 PL.Imp <> aexp_sub:749 def
R56579:56579 PL.Imp <> E:744 var
R56577:56577 PL.Imp <> X:743 var
R56609:56614 PL.Imp Assertion_D AMult' constr
R56625:56630 PL.Imp Assertion_D AMult' constr
R56651:56658 PL.Imp <> aexp_sub:749 def
R56662:56662 PL.Imp <> E:744 var
R56660:56660 PL.Imp <> X:743 var
R56633:56640 PL.Imp <> aexp_sub:749 def
R56644:56644 PL.Imp <> E:744 var
R56642:56642 PL.Imp <> X:743 var
R56733:56733 PL.Imp <> t:748 var
R56746:56749 PL.Imp Assertion_D TNum constr
R56756:56759 PL.Imp Assertion_D TNum constr
R56769:56771 PL.Imp Assertion_D TId constr
R56778:56780 PL.Imp Assertion_D TId constr
R56790:56796 PL.Imp Assertion_D TDenote constr
R56803:56809 PL.Imp Assertion_D TDenote constr
R56812:56819 PL.Imp <> aexp_sub:749 def
R56823:56823 PL.Imp <> E:747 var
R56821:56821 PL.Imp <> X:746 var
R56834:56838 PL.Imp Assertion_D TPlus constr
R56849:56853 PL.Imp Assertion_D TPlus constr
R56874:56881 PL.Imp <> term_sub:750 def
R56885:56885 PL.Imp <> E:747 var
R56883:56883 PL.Imp <> X:746 var
R56856:56863 PL.Imp <> term_sub:750 def
R56867:56867 PL.Imp <> E:747 var
R56865:56865 PL.Imp <> X:746 var
R56897:56902 PL.Imp Assertion_D TMinus constr
R56913:56918 PL.Imp Assertion_D TMinus constr
R56939:56946 PL.Imp <> term_sub:750 def
R56950:56950 PL.Imp <> E:747 var
R56948:56948 PL.Imp <> X:746 var
R56921:56928 PL.Imp <> term_sub:750 def
R56932:56932 PL.Imp <> E:747 var
R56930:56930 PL.Imp <> X:746 var
R56962:56966 PL.Imp Assertion_D TMult constr
R56977:56981 PL.Imp Assertion_D TMult constr
R57002:57009 PL.Imp <> term_sub:750 def
R57013:57013 PL.Imp <> E:747 var
R57011:57011 PL.Imp <> X:746 var
R56984:56991 PL.Imp <> term_sub:750 def
R56995:56995 PL.Imp <> E:747 var
R56993:56993 PL.Imp <> X:746 var
def 57038:57045 Assertion_D bexp_sub
R57051:57053 PL.Imp <> var def
binder 57048:57048 <> X:753
R57060:57064 PL.Imp Assertion_D aexp' ind
binder 57057:57057 <> E:754
R57071:57075 PL.Imp Assertion_D bexp' ind
binder 57068:57068 <> b:755
R57079:57083 PL.Imp Assertion_D bexp' ind
R57098:57098 PL.Imp <> b:755 var
R57111:57116 PL.Imp Assertion_D BTrue' constr
R57121:57126 PL.Imp Assertion_D BTrue' constr
R57134:57140 PL.Imp Assertion_D BFalse' constr
R57145:57151 PL.Imp Assertion_D BFalse' constr
R57159:57162 PL.Imp Assertion_D BEq' constr
R57173:57176 PL.Imp Assertion_D BEq' constr
R57197:57204 PL.Imp Assertion_D aexp_sub def
R57208:57208 PL.Imp <> E:754 var
R57206:57206 PL.Imp <> X:753 var
R57179:57186 PL.Imp Assertion_D aexp_sub def
R57190:57190 PL.Imp <> E:754 var
R57188:57188 PL.Imp <> X:753 var
R57220:57223 PL.Imp Assertion_D BLe' constr
R57234:57237 PL.Imp Assertion_D BLe' constr
R57258:57265 PL.Imp Assertion_D aexp_sub def
R57269:57269 PL.Imp <> E:754 var
R57267:57267 PL.Imp <> X:753 var
R57240:57247 PL.Imp Assertion_D aexp_sub def
R57251:57251 PL.Imp <> E:754 var
R57249:57249 PL.Imp <> X:753 var
R57281:57285 PL.Imp Assertion_D BNot' constr
R57292:57296 PL.Imp Assertion_D BNot' constr
R57299:57306 PL.Imp <> bexp_sub:756 def
R57312:57312 PL.Imp <> b:755 var
R57310:57310 PL.Imp <> E:754 var
R57308:57308 PL.Imp <> X:753 var
R57321:57325 PL.Imp Assertion_D BAnd' constr
R57336:57340 PL.Imp Assertion_D BAnd' constr
R57361:57368 PL.Imp <> bexp_sub:756 def
R57372:57372 PL.Imp <> E:754 var
R57370:57370 PL.Imp <> X:753 var
R57343:57350 PL.Imp <> bexp_sub:756 def
R57354:57354 PL.Imp <> E:754 var
R57352:57352 PL.Imp <> X:753 var
def 57397:57406 Assertion_D aexp_occur
def 57705:57714 Assertion_D term_occur
R57412:57422 PL.Imp Assertion_D logical_var def
binder 57409:57409 <> x:758
R57429:57433 PL.Imp Assertion_D aexp' ind
binder 57426:57426 <> a:759
R57720:57730 PL.Imp Assertion_D logical_var def
binder 57717:57717 <> x:760
R57737:57740 PL.Imp Assertion_D term ind
binder 57734:57734 <> t:761
R57437:57439 Coq.Init.Datatypes <> nat ind
R57744:57746 Coq.Init.Datatypes <> nat ind
R57454:57454 PL.Imp <> a:759 var
R57467:57471 PL.Imp Assertion_D ANum' constr
R57478:57487 PL.Imp <> term_occur:763 def
R57489:57489 PL.Imp <> x:758 var
R57499:57502 PL.Imp Assertion_D AId' constr
R57509:57509 Coq.Init.Datatypes <> O constr
R57517:57522 PL.Imp Assertion_D APlus' constr
R57533:57533 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R57549:57553 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R57569:57569 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R57534:57543 PL.Imp <> aexp_occur:762 def
R57545:57545 PL.Imp <> x:758 var
R57554:57563 PL.Imp <> aexp_occur:762 def
R57565:57565 PL.Imp <> x:758 var
R57577:57583 PL.Imp Assertion_D AMinus' constr
R57594:57594 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R57610:57614 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R57630:57630 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R57595:57604 PL.Imp <> aexp_occur:762 def
R57606:57606 PL.Imp <> x:758 var
R57615:57624 PL.Imp <> aexp_occur:762 def
R57626:57626 PL.Imp <> x:758 var
R57638:57643 PL.Imp Assertion_D AMult' constr
R57654:57654 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R57670:57674 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R57690:57690 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R57655:57664 PL.Imp <> aexp_occur:762 def
R57666:57666 PL.Imp <> x:758 var
R57675:57684 PL.Imp <> aexp_occur:762 def
R57686:57686 PL.Imp <> x:758 var
R57761:57761 PL.Imp <> t:761 var
R57774:57777 PL.Imp Assertion_D TNum constr
R57784:57784 Coq.Init.Datatypes <> O constr
R57792:57794 PL.Imp Assertion_D TId constr
R57805:57814 Coq.Arith.PeanoNat Nat eq_dec thm
R57816:57816 PL.Imp <> x:760 var
R57835:57835 Coq.Init.Datatypes <> O constr
R57826:57826 Coq.Init.Datatypes <> S constr
R57828:57828 Coq.Init.Datatypes <> O constr
R57843:57849 PL.Imp Assertion_D TDenote constr
R57856:57865 PL.Imp <> aexp_occur:762 def
R57867:57867 PL.Imp <> x:760 var
R57877:57881 PL.Imp Assertion_D TPlus constr
R57892:57892 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R57908:57912 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R57928:57928 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R57893:57902 PL.Imp <> term_occur:763 def
R57904:57904 PL.Imp <> x:760 var
R57913:57922 PL.Imp <> term_occur:763 def
R57924:57924 PL.Imp <> x:760 var
R57936:57941 PL.Imp Assertion_D TMinus constr
R57952:57952 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R57968:57972 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R57988:57988 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R57953:57962 PL.Imp <> term_occur:763 def
R57964:57964 PL.Imp <> x:760 var
R57973:57982 PL.Imp <> term_occur:763 def
R57984:57984 PL.Imp <> x:760 var
R57996:58000 PL.Imp Assertion_D TMult constr
R58011:58011 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58027:58031 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58047:58047 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58012:58021 PL.Imp <> term_occur:763 def
R58023:58023 PL.Imp <> x:760 var
R58032:58041 PL.Imp <> term_occur:763 def
R58043:58043 PL.Imp <> x:760 var
def 58068:58077 Assertion_D bexp_occur
R58083:58093 PL.Imp Assertion_D logical_var def
binder 58080:58080 <> x:766
R58100:58104 PL.Imp Assertion_D bexp' ind
binder 58097:58097 <> b:767
R58108:58110 Coq.Init.Datatypes <> nat ind
R58125:58125 PL.Imp <> b:767 var
R58138:58143 PL.Imp Assertion_D BTrue' constr
R58148:58148 Coq.Init.Datatypes <> O constr
R58156:58162 PL.Imp Assertion_D BFalse' constr
R58167:58167 Coq.Init.Datatypes <> O constr
R58175:58178 PL.Imp Assertion_D BEq' constr
R58189:58189 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58205:58209 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58225:58225 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58190:58199 PL.Imp Assertion_D aexp_occur def
R58201:58201 PL.Imp <> x:766 var
R58210:58219 PL.Imp Assertion_D aexp_occur def
R58221:58221 PL.Imp <> x:766 var
R58233:58236 PL.Imp Assertion_D BLe' constr
R58247:58247 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58263:58267 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58283:58283 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58248:58257 PL.Imp Assertion_D aexp_occur def
R58259:58259 PL.Imp <> x:766 var
R58268:58277 PL.Imp Assertion_D aexp_occur def
R58279:58279 PL.Imp <> x:766 var
R58291:58295 PL.Imp Assertion_D BNot' constr
R58302:58311 PL.Imp <> bexp_occur:768 def
R58315:58315 PL.Imp <> b:767 var
R58313:58313 PL.Imp <> x:766 var
R58323:58327 PL.Imp Assertion_D BAnd' constr
R58338:58338 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58354:58358 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58374:58374 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58339:58348 PL.Imp <> bexp_occur:768 def
R58350:58350 PL.Imp <> x:766 var
R58359:58368 PL.Imp <> bexp_occur:768 def
R58370:58370 PL.Imp <> x:766 var
def 58395:58409 Assertion_D assn_free_occur
R58415:58425 PL.Imp Assertion_D logical_var def
binder 58412:58412 <> x:770
R58432:58440 PL.Imp Assertion_D Assertion ind
binder 58429:58429 <> d:771
R58444:58446 Coq.Init.Datatypes <> nat ind
R58461:58461 PL.Imp <> d:771 var
R58474:58479 PL.Imp Assertion_D AssnLe constr
R58493:58493 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58509:58513 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58529:58529 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58494:58503 PL.Imp Assertion_D term_occur def
R58505:58505 PL.Imp <> x:770 var
R58514:58523 PL.Imp Assertion_D term_occur def
R58525:58525 PL.Imp <> x:770 var
R58537:58542 PL.Imp Assertion_D AssnLt constr
R58556:58556 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58572:58576 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58592:58592 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58557:58566 PL.Imp Assertion_D term_occur def
R58568:58568 PL.Imp <> x:770 var
R58577:58586 PL.Imp Assertion_D term_occur def
R58588:58588 PL.Imp <> x:770 var
R58600:58605 PL.Imp Assertion_D AssnEq constr
R58619:58619 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58635:58639 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58655:58655 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58620:58629 PL.Imp Assertion_D term_occur def
R58631:58631 PL.Imp <> x:770 var
R58640:58649 PL.Imp Assertion_D term_occur def
R58651:58651 PL.Imp <> x:770 var
R58663:58672 PL.Imp Assertion_D AssnDenote constr
R58682:58691 PL.Imp Assertion_D bexp_occur def
R58693:58693 PL.Imp <> x:770 var
R58703:58708 PL.Imp Assertion_D AssnOr constr
R58722:58722 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58743:58747 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58768:58768 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58723:58737 PL.Imp <> assn_free_occur:772 def
R58739:58739 PL.Imp <> x:770 var
R58748:58762 PL.Imp <> assn_free_occur:772 def
R58764:58764 PL.Imp <> x:770 var
R58776:58782 PL.Imp Assertion_D AssnAnd constr
R58795:58795 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58816:58820 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58841:58841 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58796:58810 PL.Imp <> assn_free_occur:772 def
R58812:58812 PL.Imp <> x:770 var
R58821:58835 PL.Imp <> assn_free_occur:772 def
R58837:58837 PL.Imp <> x:770 var
R58849:58856 PL.Imp Assertion_D AssnImpl constr
R58868:58868 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58889:58893 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58914:58914 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R58869:58883 PL.Imp <> assn_free_occur:772 def
R58885:58885 PL.Imp <> x:770 var
R58894:58908 PL.Imp <> assn_free_occur:772 def
R58910:58910 PL.Imp <> x:770 var
R58922:58928 PL.Imp Assertion_D AssnNot constr
R58941:58955 PL.Imp <> assn_free_occur:772 def
R58957:58957 PL.Imp <> x:770 var
R58967:58976 PL.Imp Assertion_D AssnExists constr
R58989:58998 Coq.Arith.PeanoNat Nat eq_dec thm
R59000:59000 PL.Imp <> x:770 var
R59067:59081 PL.Imp <> assn_free_occur:772 def
R59083:59083 PL.Imp <> x:770 var
R59035:59035 Coq.Init.Datatypes <> O constr
R59093:59102 PL.Imp Assertion_D AssnForall constr
R59115:59124 Coq.Arith.PeanoNat Nat eq_dec thm
R59126:59126 PL.Imp <> x:770 var
R59193:59207 PL.Imp <> assn_free_occur:772 def
R59209:59209 PL.Imp <> x:770 var
R59161:59161 Coq.Init.Datatypes <> O constr
def 59232:59241 Assertion_D assn_occur
R59247:59257 PL.Imp Assertion_D logical_var def
binder 59244:59244 <> x:774
R59264:59272 PL.Imp Assertion_D Assertion ind
binder 59261:59261 <> d:775
R59276:59278 Coq.Init.Datatypes <> nat ind
R59293:59293 PL.Imp <> d:775 var
R59306:59311 PL.Imp Assertion_D AssnLe constr
R59325:59325 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R59341:59345 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R59361:59361 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R59326:59335 PL.Imp Assertion_D term_occur def
R59337:59337 PL.Imp <> x:774 var
R59346:59355 PL.Imp Assertion_D term_occur def
R59357:59357 PL.Imp <> x:774 var
R59369:59374 PL.Imp Assertion_D AssnLt constr
R59388:59388 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R59404:59408 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R59424:59424 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R59389:59398 PL.Imp Assertion_D term_occur def
R59400:59400 PL.Imp <> x:774 var
R59409:59418 PL.Imp Assertion_D term_occur def
R59420:59420 PL.Imp <> x:774 var
R59432:59437 PL.Imp Assertion_D AssnEq constr
R59451:59451 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R59467:59471 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R59487:59487 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R59452:59461 PL.Imp Assertion_D term_occur def
R59463:59463 PL.Imp <> x:774 var
R59472:59481 PL.Imp Assertion_D term_occur def
R59483:59483 PL.Imp <> x:774 var
R59495:59504 PL.Imp Assertion_D AssnDenote constr
R59514:59523 PL.Imp Assertion_D bexp_occur def
R59525:59525 PL.Imp <> x:774 var
R59535:59540 PL.Imp Assertion_D AssnOr constr
R59554:59554 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R59570:59574 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R59590:59590 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R59555:59564 PL.Imp <> assn_occur:776 def
R59566:59566 PL.Imp <> x:774 var
R59575:59584 PL.Imp <> assn_occur:776 def
R59586:59586 PL.Imp <> x:774 var
R59598:59604 PL.Imp Assertion_D AssnAnd constr
R59617:59617 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R59633:59637 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R59653:59653 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R59618:59627 PL.Imp <> assn_occur:776 def
R59629:59629 PL.Imp <> x:774 var
R59638:59647 PL.Imp <> assn_occur:776 def
R59649:59649 PL.Imp <> x:774 var
R59661:59668 PL.Imp Assertion_D AssnImpl constr
R59680:59680 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R59696:59700 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R59716:59716 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R59681:59690 PL.Imp <> assn_occur:776 def
R59692:59692 PL.Imp <> x:774 var
R59701:59710 PL.Imp <> assn_occur:776 def
R59712:59712 PL.Imp <> x:774 var
R59724:59730 PL.Imp Assertion_D AssnNot constr
R59743:59752 PL.Imp <> assn_occur:776 def
R59754:59754 PL.Imp <> x:774 var
R59764:59773 PL.Imp Assertion_D AssnExists constr
R59786:59795 Coq.Arith.PeanoNat Nat eq_dec thm
R59797:59797 PL.Imp <> x:774 var
R59881:59890 PL.Imp <> assn_occur:776 def
R59892:59892 PL.Imp <> x:774 var
R59832:59832 Coq.Init.Datatypes <> S constr
R59835:59844 PL.Imp <> assn_occur:776 def
R59846:59846 PL.Imp <> x:774 var
R59902:59911 PL.Imp Assertion_D AssnForall constr
R59924:59933 Coq.Arith.PeanoNat Nat eq_dec thm
R59935:59935 PL.Imp <> x:774 var
R60019:60028 PL.Imp <> assn_occur:776 def
R60030:60030 PL.Imp <> x:774 var
R59970:59970 Coq.Init.Datatypes <> S constr
R59973:59982 PL.Imp <> assn_occur:776 def
R59984:59984 PL.Imp <> x:774 var
prf 60050:60070 Assertion_D assn_occur_free_occur
binder 60080:60080 <> x:778
binder 60082:60082 <> P:779
R60107:60110 Coq.Init.Peano <> ::nat_scope:x_'<='_x not
R60088:60102 PL.Imp Assertion_D assn_free_occur def
R60106:60106 PL.Imp <> P:779 var
R60104:60104 PL.Imp <> x:778 var
R60111:60120 PL.Imp Assertion_D assn_occur def
R60124:60124 PL.Imp <> P:779 var
R60122:60122 PL.Imp <> x:778 var
R60181:60184 Coq.Init.Peano <> le_n constr
R60181:60184 Coq.Init.Peano <> le_n constr
R60197:60200 Coq.Init.Peano <> le_n constr
R60197:60200 Coq.Init.Peano <> le_n constr
R60213:60216 Coq.Init.Peano <> le_n constr
R60213:60216 Coq.Init.Peano <> le_n constr
R60229:60232 Coq.Init.Peano <> le_n constr
R60229:60232 Coq.Init.Peano <> le_n constr
R60245:60258 Coq.Arith.Plus <> plus_le_compat thm
R60245:60258 Coq.Arith.Plus <> plus_le_compat thm
R60278:60291 Coq.Arith.Plus <> plus_le_compat thm
R60278:60291 Coq.Arith.Plus <> plus_le_compat thm
R60311:60324 Coq.Arith.Plus <> plus_le_compat thm
R60311:60324 Coq.Arith.Plus <> plus_le_compat thm
R60363:60372 Coq.Arith.PeanoNat Nat eq_dec thm
R60363:60372 Coq.Arith.PeanoNat Nat eq_dec thm
R60393:60402 Coq.Arith.PeanoNat Nat le_0_l thm
R60393:60402 Coq.Arith.PeanoNat Nat le_0_l thm
R60436:60445 Coq.Arith.PeanoNat Nat eq_dec thm
R60436:60445 Coq.Arith.PeanoNat Nat eq_dec thm
R60466:60475 Coq.Arith.PeanoNat Nat le_0_l thm
R60466:60475 Coq.Arith.PeanoNat Nat le_0_l thm
prf 60511:60522 Assertion_D assn_occur_O
binder 60532:60532 <> x:780
binder 60534:60534 <> P:781
R60557:60562 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R60582:60584 Coq.Init.Logic <> ::type_scope:x_'='_x not
R60563:60577 PL.Imp Assertion_D assn_free_occur def
R60581:60581 PL.Imp <> P:781 var
R60579:60579 PL.Imp <> x:780 var
R60585:60585 Coq.Init.Datatypes <> O constr
R60553:60555 Coq.Init.Logic <> ::type_scope:x_'='_x not
R60539:60548 PL.Imp Assertion_D assn_occur def
R60552:60552 PL.Imp <> P:781 var
R60550:60550 PL.Imp <> x:780 var
R60556:60556 Coq.Init.Datatypes <> O constr
R60618:60638 PL.Imp Assertion_D assn_occur_free_occur thm
R60618:60638 PL.Imp Assertion_D assn_occur_free_occur thm
def 60710:60719 Assertion_D rename_all
R60725:60729 PL.Imp Assertion_D aexp' ind
binder 60722:60722 <> E:782
R60736:60744 PL.Imp Assertion_D Assertion ind
binder 60733:60733 <> d:783
R60748:60756 PL.Imp Assertion_D Assertion ind
R60771:60771 PL.Imp <> d:783 var
R60784:60789 PL.Imp Assertion_D AssnLe constr
R60802:60807 PL.Imp Assertion_D AssnLe constr
R60821:60826 PL.Imp Assertion_D AssnLt constr
R60839:60844 PL.Imp Assertion_D AssnLt constr
R60858:60863 PL.Imp Assertion_D AssnEq constr
R60876:60881 PL.Imp Assertion_D AssnEq constr
R60895:60904 PL.Imp Assertion_D AssnDenote constr
R60913:60922 PL.Imp Assertion_D AssnDenote constr
R60932:60937 PL.Imp Assertion_D AssnOr constr
R60950:60955 PL.Imp Assertion_D AssnOr constr
R60976:60985 PL.Imp <> rename_all:784 def
R60987:60987 PL.Imp <> E:782 var
R60958:60967 PL.Imp <> rename_all:784 def
R60969:60969 PL.Imp <> E:782 var
R60999:61005 PL.Imp Assertion_D AssnAnd constr
R61017:61023 PL.Imp Assertion_D AssnAnd constr
R61044:61053 PL.Imp <> rename_all:784 def
R61055:61055 PL.Imp <> E:782 var
R61026:61035 PL.Imp <> rename_all:784 def
R61037:61037 PL.Imp <> E:782 var
R61067:61074 PL.Imp Assertion_D AssnImpl constr
R61085:61092 PL.Imp Assertion_D AssnImpl constr
R61113:61122 PL.Imp <> rename_all:784 def
R61124:61124 PL.Imp <> E:782 var
R61095:61104 PL.Imp <> rename_all:784 def
R61106:61106 PL.Imp <> E:782 var
R61136:61142 PL.Imp Assertion_D AssnNot constr
R61154:61160 PL.Imp Assertion_D AssnNot constr
R61163:61172 PL.Imp <> rename_all:784 def
R61174:61174 PL.Imp <> E:782 var
R61185:61194 PL.Imp Assertion_D AssnExists constr
R61209:61218 PL.Imp Assertion_D aexp_occur def
R61222:61222 PL.Imp <> E:782 var
R61255:61255 Coq.Init.Datatypes <> O constr
R61260:61269 PL.Imp Assertion_D AssnExists constr
R61274:61283 PL.Imp <> rename_all:784 def
R61285:61285 PL.Imp <> E:782 var
R61321:61330 PL.Imp Assertion_D AssnExists constr
R61428:61438 PL.Imp Assertion_D assn_rename def
R61542:61551 PL.Imp <> rename_all:784 def
R61553:61553 PL.Imp <> E:782 var
R61478:61484 PL.Imp Assertion_D new_var def
R61503:61503 PL.Imp <> E:782 var
R61487:61496 PL.Imp <> rename_all:784 def
R61498:61498 PL.Imp <> E:782 var
R61366:61372 PL.Imp Assertion_D new_var def
R61391:61391 PL.Imp <> E:782 var
R61375:61384 PL.Imp <> rename_all:784 def
R61386:61386 PL.Imp <> E:782 var
R61593:61602 PL.Imp Assertion_D AssnForall constr
R61617:61626 PL.Imp Assertion_D aexp_occur def
R61630:61630 PL.Imp <> E:782 var
R61663:61663 Coq.Init.Datatypes <> O constr
R61668:61677 PL.Imp Assertion_D AssnForall constr
R61682:61691 PL.Imp <> rename_all:784 def
R61693:61693 PL.Imp <> E:782 var
R61729:61738 PL.Imp Assertion_D AssnForall constr
R61836:61846 PL.Imp Assertion_D assn_rename def
R61950:61959 PL.Imp <> rename_all:784 def
R61961:61961 PL.Imp <> E:782 var
R61886:61892 PL.Imp Assertion_D new_var def
R61911:61911 PL.Imp <> E:782 var
R61895:61904 PL.Imp <> rename_all:784 def
R61906:61906 PL.Imp <> E:782 var
R61774:61780 PL.Imp Assertion_D new_var def
R61799:61799 PL.Imp <> E:782 var
R61783:61792 PL.Imp <> rename_all:784 def
R61794:61794 PL.Imp <> E:782 var
def 62014:62022 Assertion_D naive_sub
R62028:62030 PL.Imp <> var def
binder 62025:62025 <> X:786
R62037:62041 PL.Imp Assertion_D aexp' ind
binder 62034:62034 <> E:787
R62048:62056 PL.Imp Assertion_D Assertion ind
binder 62045:62045 <> d:788
R62060:62068 PL.Imp Assertion_D Assertion ind
R62083:62083 PL.Imp <> d:788 var
R62096:62101 PL.Imp Assertion_D AssnLe constr
R62114:62119 PL.Imp Assertion_D AssnLe constr
R62140:62147 PL.Imp Assertion_D term_sub def
R62151:62151 PL.Imp <> E:787 var
R62149:62149 PL.Imp <> X:786 var
R62122:62129 PL.Imp Assertion_D term_sub def
R62133:62133 PL.Imp <> E:787 var
R62131:62131 PL.Imp <> X:786 var
R62163:62168 PL.Imp Assertion_D AssnLt constr
R62181:62186 PL.Imp Assertion_D AssnLt constr
R62207:62214 PL.Imp Assertion_D term_sub def
R62218:62218 PL.Imp <> E:787 var
R62216:62216 PL.Imp <> X:786 var
R62189:62196 PL.Imp Assertion_D term_sub def
R62200:62200 PL.Imp <> E:787 var
R62198:62198 PL.Imp <> X:786 var
R62230:62235 PL.Imp Assertion_D AssnEq constr
R62248:62253 PL.Imp Assertion_D AssnEq constr
R62274:62281 PL.Imp Assertion_D term_sub def
R62285:62285 PL.Imp <> E:787 var
R62283:62283 PL.Imp <> X:786 var
R62256:62263 PL.Imp Assertion_D term_sub def
R62267:62267 PL.Imp <> E:787 var
R62265:62265 PL.Imp <> X:786 var
R62297:62306 PL.Imp Assertion_D AssnDenote constr
R62315:62324 PL.Imp Assertion_D AssnDenote constr
R62327:62334 PL.Imp Assertion_D bexp_sub def
R62338:62338 PL.Imp <> E:787 var
R62336:62336 PL.Imp <> X:786 var
R62349:62354 PL.Imp Assertion_D AssnOr constr
R62367:62372 PL.Imp Assertion_D AssnOr constr
R62394:62402 PL.Imp <> naive_sub:789 def
R62406:62406 PL.Imp <> E:787 var
R62404:62404 PL.Imp <> X:786 var
R62375:62383 PL.Imp <> naive_sub:789 def
R62387:62387 PL.Imp <> E:787 var
R62385:62385 PL.Imp <> X:786 var
R62418:62424 PL.Imp Assertion_D AssnAnd constr
R62436:62442 PL.Imp Assertion_D AssnAnd constr
R62464:62472 PL.Imp <> naive_sub:789 def
R62476:62476 PL.Imp <> E:787 var
R62474:62474 PL.Imp <> X:786 var
R62445:62453 PL.Imp <> naive_sub:789 def
R62457:62457 PL.Imp <> E:787 var
R62455:62455 PL.Imp <> X:786 var
R62488:62495 PL.Imp Assertion_D AssnImpl constr
R62506:62513 PL.Imp Assertion_D AssnImpl constr
R62535:62543 PL.Imp <> naive_sub:789 def
R62547:62547 PL.Imp <> E:787 var
R62545:62545 PL.Imp <> X:786 var
R62516:62524 PL.Imp <> naive_sub:789 def
R62528:62528 PL.Imp <> E:787 var
R62526:62526 PL.Imp <> X:786 var
R62559:62565 PL.Imp Assertion_D AssnNot constr
R62577:62583 PL.Imp Assertion_D AssnNot constr
R62586:62594 PL.Imp <> naive_sub:789 def
R62598:62598 PL.Imp <> E:787 var
R62596:62596 PL.Imp <> X:786 var
R62609:62618 PL.Imp Assertion_D AssnExists constr
R62627:62636 PL.Imp Assertion_D AssnExists constr
R62641:62649 PL.Imp <> naive_sub:789 def
R62653:62653 PL.Imp <> E:787 var
R62651:62651 PL.Imp <> X:786 var
R62664:62673 PL.Imp Assertion_D AssnForall constr
R62682:62691 PL.Imp Assertion_D AssnForall constr
R62696:62704 PL.Imp <> naive_sub:789 def
R62708:62708 PL.Imp <> E:787 var
R62706:62706 PL.Imp <> X:786 var
def 62734:62741 Assertion_D assn_sub
R62747:62749 PL.Imp <> var def
binder 62744:62744 <> X:791
R62756:62760 PL.Imp Assertion_D aexp' ind
binder 62753:62753 <> E:792
R62767:62775 PL.Imp Assertion_D Assertion ind
binder 62764:62764 <> P:793
R62779:62787 PL.Imp Assertion_D Assertion ind
R62794:62802 PL.Imp Assertion_D naive_sub def
R62809:62818 PL.Imp Assertion_D rename_all def
R62822:62822 PL.Imp <> P:793 var
R62820:62820 PL.Imp <> E:792 var
R62806:62806 PL.Imp <> E:792 var
R62804:62804 PL.Imp <> X:791 var
R62856:62863 PL.Imp Assertion_D assn_sub def
not 62836:62836 Assertion_D ::assert_scope:x_'['_x_'|->'_x_']'
R62960:62967 PL.Imp Assertion_D aexp_sub def
not 62939:62939 Assertion_D ::vimp_scope:x_'['_x_'|->'_x_']'
ind 63042:63053 Assertion_D hoare_triple
constr 63066:63083 Assertion_D Build_hoare_triple
R63089:63097 PL.Imp Assertion_D Assertion ind
binder 63086:63086 <> P:796
R63104:63106 PL.Imp <> com ind
binder 63101:63101 <> c:797
R63113:63121 PL.Imp Assertion_D Assertion ind
binder 63110:63110 <> Q:798
R63163:63180 PL.Imp Assertion_D Build_hoare_triple constr
not 63135:63135 Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}'
rec 63232:63246 Assertion_D FirstOrderLogic
proj 63261:63272 Assertion_D FOL_provable
R63284:63287 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R63275:63283 PL.Imp Assertion_D Assertion ind
def 63308:63314 Assertion_D derives
R63320:63334 PL.Imp Assertion_D FirstOrderLogic class
binder 63317:63317 <> T:801
R63343:63351 PL.Imp Assertion_D Assertion ind
binder 63338:63338 <> P:802
binder 63340:63340 <> Q:803
R63365:63376 PL.Imp Assertion_D FOL_provable meth
R63380:63386 PL.Imp Assertion_D ::assert_scope:x_'IMPLY'_x not
R63379:63379 PL.Imp <> P:802 var
R63387:63387 PL.Imp <> Q:803 var
R63419:63425 PL.Imp Assertion_D derives def
not 63401:63401 Assertion_D :::x_'|--'_x
ind 63498:63505 Assertion_D provable
constr 63557:63565 Assertion_D hoare_seq
constr 63719:63728 Assertion_D hoare_skip
constr 63780:63787 Assertion_D hoare_if
constr 63985:63995 Assertion_D hoare_while
constr 64138:64151 Assertion_D hoare_asgn_bwd
constr 64240:64256 Assertion_D hoare_consequence
R63511:63525 PL.Imp Assertion_D FirstOrderLogic class
binder 63508:63508 <> T:804
R63541:63544 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R63529:63540 PL.Imp Assertion_D hoare_triple ind
R63584:63592 PL.Imp Assertion_D Assertion ind
binder 63577:63577 <> P:807
binder 63579:63579 <> Q:808
binder 63581:63581 <> R:809
R63603:63605 PL.Imp <> com ind
binder 63596:63597 <> c1:810
binder 63599:63600 <> c2:811
R63640:63649 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R63675:63684 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R63685:63692 PL.Imp <> provable:805 ind
R63695:63696 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63698:63700 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63707:63709 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63711:63712 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63697:63697 PL.Imp <> P:807 var
R63703:63704 PL.Imp <> ::imp_scope:x_';;'_x not
R63701:63702 PL.Imp <> c1:810 var
R63705:63706 PL.Imp <> c2:811 var
R63710:63710 PL.Imp <> R:809 var
R63650:63657 PL.Imp <> provable:805 ind
R63660:63661 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63663:63665 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63668:63670 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63672:63673 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63662:63662 PL.Imp <> Q:808 var
R63666:63667 PL.Imp <> c2:811 var
R63671:63671 PL.Imp <> R:809 var
R63615:63622 PL.Imp <> provable:805 ind
R63625:63626 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63628:63630 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63633:63635 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63637:63638 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63627:63627 PL.Imp <> P:807 var
R63631:63632 PL.Imp <> c1:810 var
R63636:63636 PL.Imp <> Q:808 var
binder 63739:63739 <> P:812
R63748:63755 PL.Imp <> provable:805 ind
R63758:63759 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63761:63763 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63768:63770 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63772:63773 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63760:63760 PL.Imp <> P:812 var
R63764:63767 PL.Imp <> ::imp_scope:'Skip' not
R63771:63771 PL.Imp <> P:812 var
binder 63798:63798 <> P:813
binder 63800:63800 <> Q:814
R63806:63809 PL.Imp <> bexp ind
binder 63803:63803 <> b:815
binder 63812:63813 <> c1:816
binder 63815:63816 <> c2:817
R63864:63873 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R63917:63926 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R63927:63934 PL.Imp <> provable:805 ind
R63937:63939 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63941:63944 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63971:63974 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63976:63978 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63940:63940 PL.Imp <> P:813 var
R63945:63947 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R63949:63954 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R63957:63962 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R63965:63970 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R63948:63948 PL.Imp <> b:815 var
R63955:63956 PL.Imp <> c1:816 var
R63963:63964 PL.Imp <> c2:817 var
R63975:63975 PL.Imp <> Q:814 var
R63874:63881 PL.Imp <> provable:805 ind
R63884:63886 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63902:63905 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63908:63911 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63913:63915 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63888:63892 PL.Imp Assertion_D ::assert_scope:x_'AND'_x not
R63887:63887 PL.Imp <> P:813 var
R63893:63896 PL.Imp Assertion_D ::assert_scope:'NOT'_x not
R63897:63898 PL.Imp Assertion_D ::assert_scope:'{['_x_']}' not
R63900:63901 PL.Imp Assertion_D ::assert_scope:'{['_x_']}' not
R63899:63899 PL.Imp <> b:815 var
R63906:63907 PL.Imp <> c2:817 var
R63912:63912 PL.Imp <> Q:814 var
R63825:63832 PL.Imp <> provable:805 ind
R63835:63837 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63849:63852 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63855:63858 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63860:63862 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R63839:63843 PL.Imp Assertion_D ::assert_scope:x_'AND'_x not
R63838:63838 PL.Imp <> P:813 var
R63844:63845 PL.Imp Assertion_D ::assert_scope:'{['_x_']}' not
R63847:63848 PL.Imp Assertion_D ::assert_scope:'{['_x_']}' not
R63846:63846 PL.Imp <> b:815 var
R63853:63854 PL.Imp <> c1:816 var
R63859:63859 PL.Imp <> Q:814 var
binder 64006:64006 <> P:818
R64012:64015 PL.Imp <> bexp ind
binder 64009:64009 <> b:819
binder 64018:64018 <> c:820
R64063:64072 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R64073:64080 PL.Imp <> provable:805 ind
R64083:64084 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R64086:64088 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R64110:64113 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R64129:64131 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R64085:64085 PL.Imp <> P:818 var
R64089:64094 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R64096:64099 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R64101:64109 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R64095:64095 PL.Imp <> b:819 var
R64100:64100 PL.Imp <> c:820 var
R64115:64119 PL.Imp Assertion_D ::assert_scope:x_'AND'_x not
R64114:64114 PL.Imp <> P:818 var
R64120:64123 PL.Imp Assertion_D ::assert_scope:'NOT'_x not
R64124:64125 PL.Imp Assertion_D ::assert_scope:'{['_x_']}' not
R64127:64128 PL.Imp Assertion_D ::assert_scope:'{['_x_']}' not
R64126:64126 PL.Imp <> b:819 var
R64027:64034 PL.Imp <> provable:805 ind
R64037:64039 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R64051:64054 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R64056:64058 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R64060:64061 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R64041:64045 PL.Imp Assertion_D ::assert_scope:x_'AND'_x not
R64040:64040 PL.Imp <> P:818 var
R64046:64047 PL.Imp Assertion_D ::assert_scope:'{['_x_']}' not
R64049:64050 PL.Imp Assertion_D ::assert_scope:'{['_x_']}' not
R64048:64048 PL.Imp <> b:819 var
R64055:64055 PL.Imp <> c:820 var
R64059:64059 PL.Imp <> P:818 var
binder 64162:64162 <> P:821
R64168:64170 PL.Imp <> var def
binder 64165:64165 <> X:822
R64177:64180 PL.Imp <> aexp ind
binder 64174:64174 <> E:823
R64190:64197 PL.Imp <> provable:805 ind
R64200:64202 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R64215:64218 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R64226:64229 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R64231:64233 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R64204:64206 PL.Imp Assertion_D ::assert_scope:x_'['_x_'|->'_x_']' not
R64208:64212 PL.Imp Assertion_D ::assert_scope:x_'['_x_'|->'_x_']' not
R64214:64214 PL.Imp Assertion_D ::assert_scope:x_'['_x_'|->'_x_']' not
R64207:64207 PL.Imp <> X:822 var
R64213:64213 PL.Imp <> E:823 var
R64203:64203 PL.Imp <> P:821 var
R64220:64224 PL.Imp Abstract_Pretty_Printing ::imp_scope:x_'::='_x not
R64219:64219 PL.Imp <> X:822 var
R64225:64225 PL.Imp <> E:823 var
R64230:64230 PL.Imp <> P:821 var
R64280:64288 PL.Imp Assertion_D Assertion ind
binder 64268:64268 <> P:824
binder 64270:64271 <> P':825
binder 64273:64273 <> Q:826
binder 64275:64276 <> Q':827
binder 64291:64291 <> c:828
R64308:64317 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R64344:64353 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R64362:64371 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R64372:64379 PL.Imp <> provable:805 ind
R64382:64383 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R64385:64387 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R64389:64391 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R64393:64394 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R64384:64384 PL.Imp <> P:824 var
R64388:64388 PL.Imp <> c:828 var
R64392:64392 PL.Imp <> Q:826 var
R64356:64360 PL.Imp Assertion_D :::x_'|--'_x not
R64354:64355 PL.Imp <> Q':827 var
R64361:64361 PL.Imp <> Q:826 var
R64318:64325 PL.Imp <> provable:805 ind
R64328:64329 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R64332:64334 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R64336:64338 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R64341:64342 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R64330:64331 PL.Imp <> P':825 var
R64335:64335 PL.Imp <> c:828 var
R64339:64340 PL.Imp <> Q':827 var
R64301:64305 PL.Imp Assertion_D :::x_'|--'_x not
R64300:64300 PL.Imp <> P:824 var
R64306:64307 PL.Imp <> P':825 var
R64422:64429 PL.Imp Assertion_D provable ind
not 64408:64408 Assertion_D :::'|--'_x
def 64480:64484 Assertion_D Lassn
R64506:64509 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R64510:64510 Coq.Numbers.BinNums <> Z ind
R64495:64505 PL.Imp Assertion_D logical_var def
def 64525:64536 Assertion_D Lassn_update
R64543:64547 PL.Imp Assertion_D Lassn def
binder 64539:64540 <> La:829
R64554:64564 PL.Imp Assertion_D logical_var def
binder 64551:64551 <> x:830
R64571:64571 Coq.Numbers.BinNums <> Z ind
binder 64568:64568 <> v:831
R64575:64579 PL.Imp Assertion_D Lassn def
binder 64590:64590 <> y:832
R64599:64608 Coq.Arith.PeanoNat Nat eq_dec thm
R64612:64612 PL.Imp <> y:832 var
R64610:64610 PL.Imp <> x:830 var
R64627:64628 PL.Imp <> La:829 var
R64630:64630 PL.Imp <> y:832 var
R64620:64620 PL.Imp <> v:831 var
prf 64640:64656 Assertion_D Lassn_update_spec
binder 64666:64667 <> La:833
binder 64669:64669 <> x:834
binder 64671:64671 <> v:835
R64703:64709 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R64760:64760 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R64699:64701 Coq.Init.Logic <> ::type_scope:x_'='_x not
R64677:64688 PL.Imp Assertion_D Lassn_update def
R64695:64695 PL.Imp <> v:835 var
R64693:64693 PL.Imp <> x:834 var
R64690:64691 PL.Imp <> La:833 var
R64698:64698 PL.Imp <> x:834 var
R64702:64702 PL.Imp <> v:835 var
binder 64717:64717 <> y:836
R64726:64729 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R64734:64736 Coq.Init.Logic <> ::type_scope:x_'='_x not
R64730:64731 PL.Imp <> La:833 var
R64733:64733 PL.Imp <> y:836 var
R64738:64749 PL.Imp Assertion_D Lassn_update def
R64756:64756 PL.Imp <> v:835 var
R64754:64754 PL.Imp <> x:834 var
R64751:64752 PL.Imp <> La:833 var
R64759:64759 PL.Imp <> y:836 var
R64721:64724 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R64720:64720 PL.Imp <> x:834 var
R64725:64725 PL.Imp <> y:836 var
R64789:64800 PL.Imp Assertion_D Lassn_update def
R64826:64835 Coq.Arith.PeanoNat Nat eq_dec thm
R64826:64835 Coq.Arith.PeanoNat Nat eq_dec thm
R64877:64879 Coq.Init.Logic <> ::type_scope:x_'='_x not
R64877:64879 Coq.Init.Logic <> ::type_scope:x_'='_x not
R64940:64949 Coq.Arith.PeanoNat Nat eq_dec thm
R64940:64949 Coq.Arith.PeanoNat Nat eq_dec thm
def 65006:65011 Assertion_D Interp
R65027:65029 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R65022:65026 PL.Imp <> state def
R65030:65034 PL.Imp Assertion_D Lassn def
def 65049:65062 Assertion_D Interp_Lupdate
R65068:65073 PL.Imp Assertion_D Interp def
binder 65065:65065 <> J:837
R65080:65090 PL.Imp Assertion_D logical_var def
binder 65077:65077 <> x:838
R65097:65097 Coq.Numbers.BinNums <> Z ind
binder 65094:65094 <> v:839
R65101:65106 PL.Imp Assertion_D Interp def
R65113:65113 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R65119:65120 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R65145:65145 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R65114:65116 Coq.Init.Datatypes <> fst def
R65118:65118 PL.Imp <> J:837 var
R65121:65132 PL.Imp Assertion_D Lassn_update def
R65144:65144 PL.Imp <> v:839 var
R65142:65142 PL.Imp <> x:838 var
R65135:65137 Coq.Init.Datatypes <> snd def
R65139:65139 PL.Imp <> J:837 var
def 65158:65169 Assertion_D aexp'_denote
def 65470:65480 Assertion_D term_denote
R65175:65180 PL.Imp Assertion_D Interp def
binder 65172:65172 <> J:840
R65187:65191 PL.Imp Assertion_D aexp' ind
binder 65184:65184 <> a:841
R65486:65491 PL.Imp Assertion_D Interp def
binder 65483:65483 <> J:842
R65498:65501 PL.Imp Assertion_D term ind
binder 65495:65495 <> t:843
R65195:65195 Coq.Numbers.BinNums <> Z ind
R65505:65505 Coq.Numbers.BinNums <> Z ind
R65210:65210 PL.Imp <> a:841 var
R65223:65227 PL.Imp Assertion_D ANum' constr
R65234:65244 PL.Imp <> term_denote:845 def
R65246:65246 PL.Imp <> J:840 var
R65256:65259 PL.Imp Assertion_D AId' constr
R65267:65269 Coq.Init.Datatypes <> fst def
R65271:65271 PL.Imp <> J:840 var
R65282:65287 PL.Imp Assertion_D APlus' constr
R65315:65317 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R65298:65309 PL.Imp <> aexp'_denote:844 def
R65311:65311 PL.Imp <> J:840 var
R65318:65329 PL.Imp <> aexp'_denote:844 def
R65331:65331 PL.Imp <> J:840 var
R65342:65348 PL.Imp Assertion_D AMinus' constr
R65376:65378 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R65359:65370 PL.Imp <> aexp'_denote:844 def
R65372:65372 PL.Imp <> J:840 var
R65379:65390 PL.Imp <> aexp'_denote:844 def
R65392:65392 PL.Imp <> J:840 var
R65403:65408 PL.Imp Assertion_D AMult' constr
R65436:65438 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R65419:65430 PL.Imp <> aexp'_denote:844 def
R65432:65432 PL.Imp <> J:840 var
R65439:65450 PL.Imp <> aexp'_denote:844 def
R65452:65452 PL.Imp <> J:840 var
R65520:65520 PL.Imp <> t:843 var
R65533:65536 PL.Imp Assertion_D TNum constr
R65551:65553 PL.Imp Assertion_D TId constr
R65561:65563 Coq.Init.Datatypes <> snd def
R65565:65565 PL.Imp <> J:842 var
R65576:65582 PL.Imp Assertion_D TDenote constr
R65589:65600 PL.Imp <> aexp'_denote:844 def
R65602:65602 PL.Imp <> J:842 var
R65612:65616 PL.Imp Assertion_D TPlus constr
R65643:65645 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R65627:65637 PL.Imp <> term_denote:845 def
R65639:65639 PL.Imp <> J:842 var
R65646:65656 PL.Imp <> term_denote:845 def
R65658:65658 PL.Imp <> J:842 var
R65669:65674 PL.Imp Assertion_D TMinus constr
R65701:65703 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R65685:65695 PL.Imp <> term_denote:845 def
R65697:65697 PL.Imp <> J:842 var
R65704:65714 PL.Imp <> term_denote:845 def
R65716:65716 PL.Imp <> J:842 var
R65727:65731 PL.Imp Assertion_D TMult constr
R65758:65760 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R65742:65752 PL.Imp <> term_denote:845 def
R65754:65754 PL.Imp <> J:842 var
R65761:65771 PL.Imp <> term_denote:845 def
R65773:65773 PL.Imp <> J:842 var
def 65797:65808 Assertion_D bexp'_denote
R65814:65819 PL.Imp Assertion_D Interp def
binder 65811:65811 <> J:848
R65826:65830 PL.Imp Assertion_D bexp' ind
binder 65823:65823 <> b:849
R65852:65852 PL.Imp <> b:849 var
R65865:65870 PL.Imp Assertion_D BTrue' constr
R65875:65878 Coq.Init.Logic <> True ind
R65886:65892 PL.Imp Assertion_D BFalse' constr
R65897:65901 Coq.Init.Logic <> False ind
R65909:65912 PL.Imp Assertion_D BEq' constr
R65940:65942 Coq.Init.Logic <> ::type_scope:x_'='_x not
R65923:65934 PL.Imp Assertion_D aexp'_denote def
R65936:65936 PL.Imp <> J:848 var
R65943:65954 PL.Imp Assertion_D aexp'_denote def
R65956:65956 PL.Imp <> J:848 var
R65967:65970 PL.Imp Assertion_D BLe' constr
R65999:66002 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R65982:65993 PL.Imp Assertion_D aexp'_denote def
R65995:65995 PL.Imp <> J:848 var
R66003:66014 PL.Imp Assertion_D aexp'_denote def
R66016:66016 PL.Imp <> J:848 var
R66030:66034 PL.Imp Assertion_D BNot' constr
R66041:66042 Coq.Init.Logic <> ::type_scope:'~'_x not
R66043:66054 PL.Imp <> bexp'_denote:850 def
R66058:66058 PL.Imp <> b:849 var
R66056:66056 PL.Imp <> J:848 var
R66066:66070 PL.Imp Assertion_D BAnd' constr
R66098:66101 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R66081:66092 PL.Imp <> bexp'_denote:850 def
R66094:66094 PL.Imp <> J:848 var
R66102:66113 PL.Imp <> bexp'_denote:850 def
R66115:66115 PL.Imp <> J:848 var
def 66139:66147 Assertion_D satisfies
R66153:66158 PL.Imp Assertion_D Interp def
binder 66150:66150 <> J:852
R66165:66173 PL.Imp Assertion_D Assertion ind
binder 66162:66162 <> d:853
R66195:66195 PL.Imp <> d:853 var
R66208:66213 PL.Imp Assertion_D AssnLe constr
R66241:66244 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R66225:66235 PL.Imp Assertion_D term_denote def
R66237:66237 PL.Imp <> J:852 var
R66245:66255 PL.Imp Assertion_D term_denote def
R66257:66257 PL.Imp <> J:852 var
R66271:66276 PL.Imp Assertion_D AssnLt constr
R66304:66306 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R66288:66298 PL.Imp Assertion_D term_denote def
R66300:66300 PL.Imp <> J:852 var
R66307:66317 PL.Imp Assertion_D term_denote def
R66319:66319 PL.Imp <> J:852 var
R66333:66338 PL.Imp Assertion_D AssnEq constr
R66366:66368 Coq.Init.Logic <> ::type_scope:x_'='_x not
R66350:66360 PL.Imp Assertion_D term_denote def
R66362:66362 PL.Imp <> J:852 var
R66369:66379 PL.Imp Assertion_D term_denote def
R66381:66381 PL.Imp <> J:852 var
R66395:66404 PL.Imp Assertion_D AssnDenote constr
R66411:66422 PL.Imp Assertion_D bexp'_denote def
R66424:66424 PL.Imp <> J:852 var
R66434:66439 PL.Imp Assertion_D AssnOr constr
R66450:66450 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R66465:66470 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R66485:66485 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R66451:66459 PL.Imp <> satisfies:854 def
R66461:66461 PL.Imp <> J:852 var
R66471:66479 PL.Imp <> satisfies:854 def
R66481:66481 PL.Imp <> J:852 var
R66493:66499 PL.Imp Assertion_D AssnAnd constr
R66510:66510 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R66525:66530 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R66545:66545 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R66511:66519 PL.Imp <> satisfies:854 def
R66521:66521 PL.Imp <> J:852 var
R66531:66539 PL.Imp <> satisfies:854 def
R66541:66541 PL.Imp <> J:852 var
R66553:66560 PL.Imp Assertion_D AssnImpl constr
R66589:66593 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R66608:66608 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R66571:66573 Coq.Init.Logic <> ::type_scope:'~'_x not
R66588:66588 Coq.Init.Logic <> ::type_scope:'~'_x not
R66574:66582 PL.Imp <> satisfies:854 def
R66584:66584 PL.Imp <> J:852 var
R66594:66602 PL.Imp <> satisfies:854 def
R66604:66604 PL.Imp <> J:852 var
R66616:66622 PL.Imp Assertion_D AssnNot constr
R66629:66631 Coq.Init.Logic <> ::type_scope:'~'_x not
R66645:66645 Coq.Init.Logic <> ::type_scope:'~'_x not
R66632:66640 PL.Imp <> satisfies:854 def
R66642:66642 PL.Imp <> J:852 var
R66653:66662 PL.Imp Assertion_D AssnExists constr
R66671:66677 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R66679:66680 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 66678:66678 <> v:856
R66681:66689 PL.Imp <> satisfies:854 def
R66692:66705 PL.Imp Assertion_D Interp_Lupdate def
R66711:66711 PL.Imp <> v:856 var
R66707:66707 PL.Imp <> J:852 var
R66722:66731 PL.Imp Assertion_D AssnForall constr
binder 66747:66747 <> v:857
R66750:66758 PL.Imp <> satisfies:854 def
R66761:66774 PL.Imp Assertion_D Interp_Lupdate def
R66780:66780 PL.Imp <> v:857 var
R66776:66776 PL.Imp <> J:852 var
R66820:66828 PL.Imp Assertion_D satisfies def
not 66804:66804 Assertion_D :::x_'|=='_x
def 66880:66884 Assertion_D valid
R66891:66902 PL.Imp Assertion_D hoare_triple ind
binder 66887:66888 <> Tr:858
R66922:66923 PL.Imp <> Tr:858 var
R66934:66951 PL.Imp Assertion_D Build_hoare_triple constr
binder 66975:66976 <> La:860
binder 66978:66980 <> st1:861
binder 66982:66984 <> st2:862
R67010:67013 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R67029:67032 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R67042:67046 PL.Imp Assertion_D :::x_'|=='_x not
R67033:67033 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R67037:67038 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R67041:67041 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R67034:67036 PL.Imp <> st2:862 var
R67039:67040 PL.Imp <> La:860 var
R67014:67018 PL.Imp <> ceval def
R67026:67028 PL.Imp <> st2:862 var
R67022:67024 PL.Imp <> st1:861 var
R67004:67008 PL.Imp Assertion_D :::x_'|=='_x not
R66995:66995 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R66999:67000 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R67003:67003 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R66996:66998 PL.Imp <> st1:861 var
R67001:67002 PL.Imp <> La:860 var
R67080:67084 PL.Imp Assertion_D valid def
not 67066:67066 Assertion_D :::'|=='_x
prf 67130:67144 Assertion_D seq_assoc_sound
binder 67155:67155 <> P:863
binder 67157:67158 <> c1:864
binder 67160:67161 <> c2:865
binder 67163:67164 <> c3:866
binder 67166:67166 <> Q:867
R67205:67211 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R67171:67174 PL.Imp Assertion_D :::'|=='_x not
R67175:67177 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R67179:67182 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R67197:67200 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R67202:67204 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R67178:67178 PL.Imp <> P:863 var
R67185:67188 PL.Imp <> ::imp_scope:x_';;'_x not
R67183:67184 PL.Imp <> c1:864 var
R67191:67194 PL.Imp <> ::imp_scope:x_';;'_x not
R67189:67190 PL.Imp <> c2:865 var
R67195:67196 PL.Imp <> c3:866 var
R67201:67201 PL.Imp <> Q:867 var
R67212:67215 PL.Imp Assertion_D :::'|=='_x not
R67216:67218 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R67220:67223 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R67240:67243 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R67245:67247 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R67219:67219 PL.Imp <> P:863 var
R67224:67224 PL.Imp <> ::imp_scope:x_';;'_x not
R67233:67237 PL.Imp <> ::imp_scope:x_';;'_x not
R67227:67230 PL.Imp <> ::imp_scope:x_';;'_x not
R67225:67226 PL.Imp <> c1:864 var
R67231:67232 PL.Imp <> c2:865 var
R67238:67239 PL.Imp <> c3:866 var
R67244:67244 PL.Imp <> Q:867 var
R67266:67270 PL.Imp Assertion_D valid def
R67296:67304 PL.Imp <> seq_assoc thm
R67296:67304 PL.Imp <> seq_assoc thm
R67325:67333 PL.Imp <> com_equiv def
R67336:67347 PL.Imp BinRel equiv def
prf 67570:67587 Assertion_D aeval_aexp'_denote
binder 67597:67598 <> st:868
binder 67600:67601 <> La:869
binder 67603:67603 <> a:870
R67618:67620 Coq.Init.Logic <> ::type_scope:x_'='_x not
R67608:67612 PL.Imp <> aeval def
R67616:67617 PL.Imp <> st:868 var
R67614:67614 PL.Imp <> a:870 var
R67621:67632 PL.Imp Assertion_D aexp'_denote def
R67644:67647 PL.Imp Assertion_D ainj def
R67649:67649 PL.Imp <> a:870 var
R67634:67634 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R67637:67638 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R67641:67641 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R67635:67636 PL.Imp <> st:868 var
R67639:67640 PL.Imp <> La:869 var
R67737:67744 PL.Imp Func add def
R67799:67806 PL.Imp Func sub def
R67861:67868 PL.Imp Func mul def
prf 67924:67941 Assertion_D beval_bexp'_denote
binder 67951:67952 <> st:871
binder 67954:67955 <> La:872
binder 67957:67957 <> b:873
R67972:67976 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R67962:67966 PL.Imp <> beval def
R67970:67971 PL.Imp <> st:871 var
R67968:67968 PL.Imp <> b:873 var
R67977:67988 PL.Imp Assertion_D bexp'_denote def
R68000:68003 PL.Imp Assertion_D binj def
R68005:68005 PL.Imp <> b:873 var
R67990:67990 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R67993:67994 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R67997:67997 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R67991:67992 PL.Imp <> st:871 var
R67995:67996 PL.Imp <> La:872 var
R68085:68102 PL.Imp Assertion_D aeval_aexp'_denote thm
R68085:68102 PL.Imp Assertion_D aeval_aexp'_denote thm
R68085:68102 PL.Imp Assertion_D aeval_aexp'_denote thm
R68120:68137 PL.Imp Assertion_D aeval_aexp'_denote thm
R68120:68137 PL.Imp Assertion_D aeval_aexp'_denote thm
R68120:68137 PL.Imp Assertion_D aeval_aexp'_denote thm
R68166:68183 PL.Imp Assertion_D aeval_aexp'_denote thm
R68166:68183 PL.Imp Assertion_D aeval_aexp'_denote thm
R68166:68183 PL.Imp Assertion_D aeval_aexp'_denote thm
R68201:68218 PL.Imp Assertion_D aeval_aexp'_denote thm
R68201:68218 PL.Imp Assertion_D aeval_aexp'_denote thm
R68201:68218 PL.Imp Assertion_D aeval_aexp'_denote thm
R68243:68257 PL.Imp Sets complement def
R68282:68295 PL.Imp Sets intersect def
rec 68322:68333 Assertion_D Interp_Equiv
proj 68364:68374 Assertion_D state_equiv
proj 68415:68425 Assertion_D Lassn_equiv
R68343:68348 PL.Imp Assertion_D Interp def
binder 68336:68337 <> J1:874
binder 68339:68340 <> J2:875
R68387:68389 PL.Imp <> var def
binder 68384:68384 <> X:877
R68400:68402 Coq.Init.Logic <> ::type_scope:x_'='_x not
R68392:68394 Coq.Init.Datatypes <> fst def
R68399:68399 PL.Imp <> X:877 var
R68396:68397 PL.Imp <> J1:874 var
R68403:68405 Coq.Init.Datatypes <> fst def
R68410:68410 PL.Imp <> X:877 var
R68407:68408 PL.Imp <> J2:875 var
R68438:68448 PL.Imp Assertion_D logical_var def
binder 68435:68435 <> x:879
R68459:68461 Coq.Init.Logic <> ::type_scope:x_'='_x not
R68451:68453 Coq.Init.Datatypes <> snd def
R68458:68458 PL.Imp <> x:879 var
R68455:68456 PL.Imp <> J1:874 var
R68462:68464 Coq.Init.Datatypes <> snd def
R68469:68469 PL.Imp <> x:879 var
R68466:68467 PL.Imp <> J2:875 var
prf 68481:68498 Assertion_D Interp_Equiv_trans
binder 68508:68509 <> J1:881
binder 68511:68512 <> J2:882
binder 68514:68515 <> J3:883
R68538:68543 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R68562:68567 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R68568:68579 PL.Imp Assertion_D Interp_Equiv rec
R68584:68585 PL.Imp <> J3:883 var
R68581:68582 PL.Imp <> J1:881 var
R68544:68555 PL.Imp Assertion_D Interp_Equiv rec
R68560:68561 PL.Imp <> J3:883 var
R68557:68558 PL.Imp <> J2:882 var
R68520:68531 PL.Imp Assertion_D Interp_Equiv rec
R68536:68537 PL.Imp <> J2:882 var
R68533:68534 PL.Imp <> J1:881 var
prf 68871:68886 Assertion_D Interp_Equiv_sym
binder 68896:68897 <> J1:884
binder 68899:68900 <> J2:885
R68923:68928 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R68929:68940 PL.Imp Assertion_D Interp_Equiv rec
R68945:68946 PL.Imp <> J1:884 var
R68942:68943 PL.Imp <> J2:885 var
R68905:68916 PL.Imp Assertion_D Interp_Equiv rec
R68921:68922 PL.Imp <> J2:885 var
R68918:68919 PL.Imp <> J1:884 var
prf 69099:69125 Assertion_D Interp_Equiv_Interp_Lupdate
binder 69135:69136 <> J1:886
binder 69138:69139 <> J2:887
binder 69141:69141 <> x:888
binder 69143:69143 <> v:889
R69166:69171 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R69172:69183 PL.Imp Assertion_D Interp_Equiv rec
R69210:69223 PL.Imp Assertion_D Interp_Lupdate def
R69230:69230 PL.Imp <> v:889 var
R69228:69228 PL.Imp <> x:888 var
R69225:69226 PL.Imp <> J2:887 var
R69186:69199 PL.Imp Assertion_D Interp_Lupdate def
R69206:69206 PL.Imp <> v:889 var
R69204:69204 PL.Imp <> x:888 var
R69201:69202 PL.Imp <> J1:886 var
R69148:69159 PL.Imp Assertion_D Interp_Equiv rec
R69164:69165 PL.Imp <> J2:887 var
R69161:69162 PL.Imp <> J1:886 var
R69259:69276 PL.Imp Assertion_D Build_Interp_Equiv constr
R69259:69276 PL.Imp Assertion_D Build_Interp_Equiv constr
R69312:69322 PL.Imp Assertion_D state_equiv proj
R69312:69322 PL.Imp Assertion_D state_equiv proj
R69419:69430 PL.Imp Assertion_D Lassn_update def
R69447:69456 Coq.Arith.PeanoNat Nat eq_dec thm
R69447:69456 Coq.Arith.PeanoNat Nat eq_dec thm
R69501:69511 PL.Imp Assertion_D Lassn_equiv proj
R69501:69511 PL.Imp Assertion_D Lassn_equiv proj
prf 69567:69590 Assertion_D Lassn_update_update_self
binder 69600:69601 <> st:890
binder 69603:69604 <> La:891
binder 69606:69606 <> x:892
R69611:69622 PL.Imp Assertion_D Interp_Equiv rec
R69663:69663 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R69666:69667 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R69670:69670 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R69664:69665 PL.Imp <> st:890 var
R69668:69669 PL.Imp <> La:891 var
R69628:69628 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R69631:69632 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R69657:69657 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R69629:69630 PL.Imp <> st:890 var
R69633:69644 PL.Imp Assertion_D Lassn_update def
R69652:69653 PL.Imp <> La:891 var
R69655:69655 PL.Imp <> x:892 var
R69649:69649 PL.Imp <> x:892 var
R69646:69647 PL.Imp <> La:891 var
R69698:69715 PL.Imp Assertion_D Build_Interp_Equiv constr
R69698:69715 PL.Imp Assertion_D Build_Interp_Equiv constr
R69792:69803 PL.Imp Assertion_D Lassn_update def
R69820:69829 Coq.Arith.PeanoNat Nat eq_dec thm
R69820:69829 Coq.Arith.PeanoNat Nat eq_dec thm
prf 69904:69927 Assertion_D Lassn_update_update_same
binder 69937:69938 <> st:893
binder 69940:69941 <> La:894
binder 69943:69943 <> x:895
binder 69945:69946 <> v1:896
binder 69948:69949 <> v2:897
R69954:69965 PL.Imp Assertion_D Interp_Equiv rec
R70022:70022 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R70025:70026 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R70047:70047 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R70023:70024 PL.Imp <> st:893 var
R70027:70038 PL.Imp Assertion_D Lassn_update def
R70045:70046 PL.Imp <> v2:897 var
R70043:70043 PL.Imp <> x:895 var
R70040:70041 PL.Imp <> La:894 var
R69971:69971 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R69974:69975 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R70016:70016 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R69972:69973 PL.Imp <> st:893 var
R69976:69987 PL.Imp Assertion_D Lassn_update def
R70014:70015 PL.Imp <> v2:897 var
R70012:70012 PL.Imp <> x:895 var
R69990:70001 PL.Imp Assertion_D Lassn_update def
R70008:70009 PL.Imp <> v1:896 var
R70006:70006 PL.Imp <> x:895 var
R70003:70004 PL.Imp <> La:894 var
R70075:70092 PL.Imp Assertion_D Build_Interp_Equiv constr
R70075:70092 PL.Imp Assertion_D Build_Interp_Equiv constr
R70169:70180 PL.Imp Assertion_D Lassn_update def
R70197:70206 Coq.Arith.PeanoNat Nat eq_dec thm
R70197:70206 Coq.Arith.PeanoNat Nat eq_dec thm
prf 70265:70288 Assertion_D Lassn_update_update_diff
binder 70298:70299 <> st:898
binder 70301:70302 <> La:899
binder 70304:70305 <> x1:900
binder 70307:70308 <> x2:901
binder 70310:70311 <> v1:902
binder 70313:70314 <> v2:903
R70327:70332 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R70333:70344 PL.Imp Assertion_D Interp_Equiv rec
R70403:70403 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R70406:70407 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R70450:70450 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R70404:70405 PL.Imp <> st:898 var
R70408:70419 PL.Imp Assertion_D Lassn_update def
R70448:70449 PL.Imp <> v1:902 var
R70445:70446 PL.Imp <> x1:900 var
R70422:70433 PL.Imp Assertion_D Lassn_update def
R70441:70442 PL.Imp <> v2:903 var
R70438:70439 PL.Imp <> x2:901 var
R70435:70436 PL.Imp <> La:899 var
R70350:70350 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R70353:70354 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R70397:70397 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R70351:70352 PL.Imp <> st:898 var
R70355:70366 PL.Imp Assertion_D Lassn_update def
R70395:70396 PL.Imp <> v2:903 var
R70392:70393 PL.Imp <> x2:901 var
R70369:70380 PL.Imp Assertion_D Lassn_update def
R70388:70389 PL.Imp <> v1:902 var
R70385:70386 PL.Imp <> x1:900 var
R70382:70383 PL.Imp <> La:899 var
R70321:70324 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R70319:70320 PL.Imp <> x1:900 var
R70325:70326 PL.Imp <> x2:901 var
R70478:70495 PL.Imp Assertion_D Build_Interp_Equiv constr
R70478:70495 PL.Imp Assertion_D Build_Interp_Equiv constr
R70572:70583 PL.Imp Assertion_D Lassn_update def
R70600:70609 Coq.Arith.PeanoNat Nat eq_dec thm
R70619:70628 Coq.Arith.PeanoNat Nat eq_dec thm
R70600:70609 Coq.Arith.PeanoNat Nat eq_dec thm
R70619:70628 Coq.Arith.PeanoNat Nat eq_dec thm
R70619:70628 Coq.Arith.PeanoNat Nat eq_dec thm
def 70761:70772 Assertion_D state_update
R70779:70783 PL.Imp <> state def
binder 70775:70776 <> st:904
R70790:70792 PL.Imp <> var def
binder 70787:70787 <> X:905
R70799:70799 Coq.Numbers.BinNums <> Z ind
binder 70796:70796 <> v:906
R70803:70807 PL.Imp <> state def
binder 70818:70818 <> Y:907
R70827:70836 Coq.Arith.PeanoNat Nat eq_dec thm
R70840:70840 PL.Imp <> Y:907 var
R70838:70838 PL.Imp <> X:905 var
R70855:70856 PL.Imp <> st:904 var
R70858:70858 PL.Imp <> Y:907 var
R70848:70848 PL.Imp <> v:906 var
prf 70868:70884 Assertion_D state_update_spec
binder 70894:70895 <> st:908
binder 70897:70897 <> X:909
binder 70899:70899 <> v:910
R70931:70937 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R70988:70988 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R70927:70929 Coq.Init.Logic <> ::type_scope:x_'='_x not
R70905:70916 PL.Imp Assertion_D state_update def
R70923:70923 PL.Imp <> v:910 var
R70921:70921 PL.Imp <> X:909 var
R70918:70919 PL.Imp <> st:908 var
R70926:70926 PL.Imp <> X:909 var
R70930:70930 PL.Imp <> v:910 var
binder 70945:70945 <> Y:911
R70954:70957 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R70962:70964 Coq.Init.Logic <> ::type_scope:x_'='_x not
R70958:70959 PL.Imp <> st:908 var
R70961:70961 PL.Imp <> Y:911 var
R70966:70977 PL.Imp Assertion_D state_update def
R70984:70984 PL.Imp <> v:910 var
R70982:70982 PL.Imp <> X:909 var
R70979:70980 PL.Imp <> st:908 var
R70987:70987 PL.Imp <> Y:911 var
R70949:70952 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R70948:70948 PL.Imp <> X:909 var
R70953:70953 PL.Imp <> Y:911 var
R71017:71028 PL.Imp Assertion_D state_update def
R71054:71063 Coq.Arith.PeanoNat Nat eq_dec thm
R71054:71063 Coq.Arith.PeanoNat Nat eq_dec thm
R71105:71107 Coq.Init.Logic <> ::type_scope:x_'='_x not
R71105:71107 Coq.Init.Logic <> ::type_scope:x_'='_x not
R71168:71177 Coq.Arith.PeanoNat Nat eq_dec thm
R71168:71177 Coq.Arith.PeanoNat Nat eq_dec thm
prf 71229:71252 Assertion_D state_update_update_same
binder 71262:71263 <> st:912
binder 71265:71266 <> La:913
binder 71268:71268 <> X:914
binder 71270:71271 <> v1:915
binder 71273:71274 <> v2:916
R71279:71290 PL.Imp Assertion_D Interp_Equiv rec
R71347:71347 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R71368:71369 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R71372:71372 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R71348:71359 PL.Imp Assertion_D state_update def
R71366:71367 PL.Imp <> v2:916 var
R71364:71364 PL.Imp <> X:914 var
R71361:71362 PL.Imp <> st:912 var
R71370:71371 PL.Imp <> La:913 var
R71296:71296 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R71337:71338 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R71341:71341 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R71297:71308 PL.Imp Assertion_D state_update def
R71335:71336 PL.Imp <> v2:916 var
R71333:71333 PL.Imp <> X:914 var
R71311:71322 PL.Imp Assertion_D state_update def
R71329:71330 PL.Imp <> v1:915 var
R71327:71327 PL.Imp <> X:914 var
R71324:71325 PL.Imp <> st:912 var
R71339:71340 PL.Imp <> La:913 var
R71400:71417 PL.Imp Assertion_D Build_Interp_Equiv constr
R71400:71417 PL.Imp Assertion_D Build_Interp_Equiv constr
R71454:71465 PL.Imp Assertion_D state_update def
R71482:71491 Coq.Arith.PeanoNat Nat eq_dec thm
R71482:71491 Coq.Arith.PeanoNat Nat eq_dec thm
prf 71590:71613 Assertion_D state_update_update_diff
binder 71623:71624 <> st:917
binder 71626:71627 <> La:918
binder 71629:71630 <> X1:919
binder 71632:71633 <> X2:920
binder 71635:71636 <> v1:921
binder 71638:71639 <> v2:922
R71652:71657 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R71658:71669 PL.Imp Assertion_D Interp_Equiv rec
R71728:71728 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R71771:71772 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R71775:71775 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R71729:71740 PL.Imp Assertion_D state_update def
R71769:71770 PL.Imp <> v1:921 var
R71766:71767 PL.Imp <> X1:919 var
R71743:71754 PL.Imp Assertion_D state_update def
R71762:71763 PL.Imp <> v2:922 var
R71759:71760 PL.Imp <> X2:920 var
R71756:71757 PL.Imp <> st:917 var
R71773:71774 PL.Imp <> La:918 var
R71675:71675 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R71718:71719 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R71722:71722 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R71676:71687 PL.Imp Assertion_D state_update def
R71716:71717 PL.Imp <> v2:922 var
R71713:71714 PL.Imp <> X2:920 var
R71690:71701 PL.Imp Assertion_D state_update def
R71709:71710 PL.Imp <> v1:921 var
R71706:71707 PL.Imp <> X1:919 var
R71703:71704 PL.Imp <> st:917 var
R71720:71721 PL.Imp <> La:918 var
R71646:71649 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R71644:71645 PL.Imp <> X1:919 var
R71650:71651 PL.Imp <> X2:920 var
R71803:71820 PL.Imp Assertion_D Build_Interp_Equiv constr
R71803:71820 PL.Imp Assertion_D Build_Interp_Equiv constr
R71857:71868 PL.Imp Assertion_D state_update def
R71885:71894 Coq.Arith.PeanoNat Nat eq_dec thm
R71904:71913 Coq.Arith.PeanoNat Nat eq_dec thm
R71885:71894 Coq.Arith.PeanoNat Nat eq_dec thm
R71904:71913 Coq.Arith.PeanoNat Nat eq_dec thm
R71904:71913 Coq.Arith.PeanoNat Nat eq_dec thm
prf 72081:72104 Assertion_D state_update_update_self
binder 72114:72115 <> st:923
binder 72117:72118 <> La:924
binder 72120:72120 <> X:925
R72125:72136 PL.Imp Assertion_D Interp_Equiv rec
R72177:72177 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R72180:72181 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R72184:72184 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R72178:72179 PL.Imp <> st:923 var
R72182:72183 PL.Imp <> La:924 var
R72142:72142 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R72167:72168 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R72171:72171 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R72143:72154 PL.Imp Assertion_D state_update def
R72162:72163 PL.Imp <> st:923 var
R72165:72165 PL.Imp <> X:925 var
R72159:72159 PL.Imp <> X:925 var
R72156:72157 PL.Imp <> st:923 var
R72169:72170 PL.Imp <> La:924 var
R72212:72229 PL.Imp Assertion_D Build_Interp_Equiv constr
R72212:72229 PL.Imp Assertion_D Build_Interp_Equiv constr
R72266:72277 PL.Imp Assertion_D state_update def
R72294:72303 Coq.Arith.PeanoNat Nat eq_dec thm
R72294:72303 Coq.Arith.PeanoNat Nat eq_dec thm
prf 72418:72442 Assertion_D aexp'_denote_Interp_Equiv
prf 72530:72553 Assertion_D term_denote_Interp_Equiv
binder 72452:72453 <> J1:926
binder 72455:72456 <> J2:927
binder 72458:72458 <> a:928
R72481:72486 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R72504:72506 Coq.Init.Logic <> ::type_scope:x_'='_x not
R72487:72498 PL.Imp Assertion_D aexp'_denote def
R72503:72503 PL.Imp <> a:928 var
R72500:72501 PL.Imp <> J1:926 var
R72507:72518 PL.Imp Assertion_D aexp'_denote def
R72523:72523 PL.Imp <> a:928 var
R72520:72521 PL.Imp <> J2:927 var
R72463:72474 PL.Imp Assertion_D Interp_Equiv rec
R72479:72480 PL.Imp <> J2:927 var
R72476:72477 PL.Imp <> J1:926 var
binder 72563:72564 <> J1:929
binder 72566:72567 <> J2:930
binder 72569:72569 <> t:931
R72592:72597 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R72614:72616 Coq.Init.Logic <> ::type_scope:x_'='_x not
R72598:72608 PL.Imp Assertion_D term_denote def
R72613:72613 PL.Imp <> t:931 var
R72610:72611 PL.Imp <> J1:929 var
R72617:72627 PL.Imp Assertion_D term_denote def
R72632:72632 PL.Imp <> t:931 var
R72629:72630 PL.Imp <> J2:930 var
R72574:72585 PL.Imp Assertion_D Interp_Equiv rec
R72590:72591 PL.Imp <> J2:930 var
R72587:72588 PL.Imp <> J1:929 var
R72770:72780 PL.Imp Assertion_D state_equiv proj
R72770:72780 PL.Imp Assertion_D state_equiv proj
R73016:73026 PL.Imp Assertion_D Lassn_equiv proj
R73016:73026 PL.Imp Assertion_D Lassn_equiv proj
prf 73229:73253 Assertion_D bexp'_denote_Interp_Equiv
binder 73263:73264 <> J1:932
binder 73266:73267 <> J2:933
binder 73269:73269 <> b:934
R73292:73298 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R73338:73338 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R73316:73320 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R73299:73310 PL.Imp Assertion_D bexp'_denote def
R73315:73315 PL.Imp <> b:934 var
R73312:73313 PL.Imp <> J1:932 var
R73321:73332 PL.Imp Assertion_D bexp'_denote def
R73337:73337 PL.Imp <> b:934 var
R73334:73335 PL.Imp <> J2:933 var
R73274:73285 PL.Imp Assertion_D Interp_Equiv rec
R73290:73291 PL.Imp <> J2:933 var
R73287:73288 PL.Imp <> J1:932 var
R73417:73441 PL.Imp Assertion_D aexp'_denote_Interp_Equiv thm
R73417:73441 PL.Imp Assertion_D aexp'_denote_Interp_Equiv thm
R73468:73492 PL.Imp Assertion_D aexp'_denote_Interp_Equiv thm
R73468:73492 PL.Imp Assertion_D aexp'_denote_Interp_Equiv thm
R73550:73574 PL.Imp Assertion_D aexp'_denote_Interp_Equiv thm
R73550:73574 PL.Imp Assertion_D aexp'_denote_Interp_Equiv thm
R73601:73625 PL.Imp Assertion_D aexp'_denote_Interp_Equiv thm
R73601:73625 PL.Imp Assertion_D aexp'_denote_Interp_Equiv thm
prf 73702:73723 Assertion_D satisfies_Interp_Equiv
binder 73733:73734 <> J1:935
binder 73736:73737 <> J2:936
binder 73739:73739 <> P:937
R73762:73768 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R73790:73790 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R73777:73781 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R73771:73775 PL.Imp Assertion_D :::x_'|=='_x not
R73769:73770 PL.Imp <> J1:935 var
R73776:73776 PL.Imp <> P:937 var
R73784:73788 PL.Imp Assertion_D :::x_'|=='_x not
R73782:73783 PL.Imp <> J2:936 var
R73789:73789 PL.Imp <> P:937 var
R73744:73755 PL.Imp Assertion_D Interp_Equiv rec
R73760:73761 PL.Imp <> J2:936 var
R73757:73758 PL.Imp <> J1:935 var
R73871:73894 PL.Imp Assertion_D term_denote_Interp_Equiv thm
R73871:73894 PL.Imp Assertion_D term_denote_Interp_Equiv thm
R73921:73944 PL.Imp Assertion_D term_denote_Interp_Equiv thm
R73921:73944 PL.Imp Assertion_D term_denote_Interp_Equiv thm
R74002:74025 PL.Imp Assertion_D term_denote_Interp_Equiv thm
R74002:74025 PL.Imp Assertion_D term_denote_Interp_Equiv thm
R74052:74075 PL.Imp Assertion_D term_denote_Interp_Equiv thm
R74052:74075 PL.Imp Assertion_D term_denote_Interp_Equiv thm
R74133:74156 PL.Imp Assertion_D term_denote_Interp_Equiv thm
R74133:74156 PL.Imp Assertion_D term_denote_Interp_Equiv thm
R74183:74206 PL.Imp Assertion_D term_denote_Interp_Equiv thm
R74183:74206 PL.Imp Assertion_D term_denote_Interp_Equiv thm
R74259:74283 PL.Imp Assertion_D bexp'_denote_Interp_Equiv thm
R74259:74283 PL.Imp Assertion_D bexp'_denote_Interp_Equiv thm
R74555:74584 Coq.Classes.Morphisms_Prop <> ex_iff_morphism inst
R74555:74584 Coq.Classes.Morphisms_Prop <> ex_iff_morphism inst
R74631:74657 PL.Imp Assertion_D Interp_Equiv_Interp_Lupdate thm
R74631:74657 PL.Imp Assertion_D Interp_Equiv_Interp_Lupdate thm
R74683:74713 Coq.Classes.Morphisms_Prop <> all_iff_morphism inst
R74683:74713 Coq.Classes.Morphisms_Prop <> all_iff_morphism inst
R74760:74786 PL.Imp Assertion_D Interp_Equiv_Interp_Lupdate thm
R74760:74786 PL.Imp Assertion_D Interp_Equiv_Interp_Lupdate thm
prf 74814:74826 Assertion_D aexp_sub_spec
prf 75035:75047 Assertion_D term_sub_spec
binder 74836:74838 <> st1:938
binder 74840:74842 <> st2:939
binder 74844:74845 <> La:940
R74851:74855 PL.Imp Assertion_D aexp' ind
binder 74848:74848 <> a:941
R74862:74864 PL.Imp <> var def
binder 74859:74859 <> X:942
R74871:74875 PL.Imp Assertion_D aexp' ind
binder 74868:74868 <> E:943
R74913:74918 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R74919:74919 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R74959:74965 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R75002:75004 Coq.Init.Logic <> ::type_scope:x_'='_x not
R74966:74977 PL.Imp Assertion_D aexp'_denote def
R74991:74992 PL.Imp Assertion_D ::vimp_scope:x_'['_x_'|->'_x_']' not
R74994:74998 PL.Imp Assertion_D ::vimp_scope:x_'['_x_'|->'_x_']' not
R75000:75000 PL.Imp Assertion_D ::vimp_scope:x_'['_x_'|->'_x_']' not
R74993:74993 PL.Imp <> X:942 var
R74999:74999 PL.Imp <> E:943 var
R74990:74990 PL.Imp <> a:941 var
R74979:74979 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R74983:74984 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R74987:74987 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R74980:74982 PL.Imp <> st1:938 var
R74985:74986 PL.Imp <> La:940 var
R75005:75016 PL.Imp Assertion_D aexp'_denote def
R75028:75028 PL.Imp <> a:941 var
R75018:75018 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R75022:75023 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R75026:75026 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R75019:75021 PL.Imp <> st2:939 var
R75024:75025 PL.Imp <> La:940 var
R74931:74933 PL.Imp <> var def
binder 74927:74927 <> Y:944
R74942:74945 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R74951:74953 Coq.Init.Logic <> ::type_scope:x_'='_x not
R74946:74948 PL.Imp <> st1:938 var
R74950:74950 PL.Imp <> Y:944 var
R74954:74956 PL.Imp <> st2:939 var
R74958:74958 PL.Imp <> Y:944 var
R74937:74940 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R74936:74936 PL.Imp <> X:942 var
R74941:74941 PL.Imp <> Y:944 var
R74886:74888 Coq.Init.Logic <> ::type_scope:x_'='_x not
R74881:74883 PL.Imp <> st2:939 var
R74885:74885 PL.Imp <> X:942 var
R74889:74900 PL.Imp Assertion_D aexp'_denote def
R74912:74912 PL.Imp <> E:943 var
R74902:74902 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R74906:74907 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R74910:74910 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R74903:74905 PL.Imp <> st1:938 var
R74908:74909 PL.Imp <> La:940 var
binder 75057:75059 <> st1:945
binder 75061:75063 <> st2:946
binder 75065:75066 <> La:947
R75072:75075 PL.Imp Assertion_D term ind
binder 75069:75069 <> t:948
R75082:75084 PL.Imp <> var def
binder 75079:75079 <> X:949
R75091:75095 PL.Imp Assertion_D aexp' ind
binder 75088:75088 <> E:950
R75133:75138 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R75139:75139 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R75179:75185 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R75224:75226 Coq.Init.Logic <> ::type_scope:x_'='_x not
R75186:75196 PL.Imp Assertion_D term_denote def
R75209:75216 PL.Imp Assertion_D term_sub def
R75222:75222 PL.Imp <> t:948 var
R75220:75220 PL.Imp <> E:950 var
R75218:75218 PL.Imp <> X:949 var
R75198:75198 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R75202:75203 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R75206:75206 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R75199:75201 PL.Imp <> st1:945 var
R75204:75205 PL.Imp <> La:947 var
R75227:75237 PL.Imp Assertion_D term_denote def
R75249:75249 PL.Imp <> t:948 var
R75239:75239 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R75243:75244 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R75247:75247 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R75240:75242 PL.Imp <> st2:946 var
R75245:75246 PL.Imp <> La:947 var
R75151:75153 PL.Imp <> var def
binder 75147:75147 <> Y:951
R75162:75165 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R75171:75173 Coq.Init.Logic <> ::type_scope:x_'='_x not
R75166:75168 PL.Imp <> st1:945 var
R75170:75170 PL.Imp <> Y:951 var
R75174:75176 PL.Imp <> st2:946 var
R75178:75178 PL.Imp <> Y:951 var
R75157:75160 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R75156:75156 PL.Imp <> X:949 var
R75161:75161 PL.Imp <> Y:951 var
R75106:75108 Coq.Init.Logic <> ::type_scope:x_'='_x not
R75101:75103 PL.Imp <> st2:946 var
R75105:75105 PL.Imp <> X:949 var
R75109:75120 PL.Imp Assertion_D aexp'_denote def
R75132:75132 PL.Imp <> E:950 var
R75122:75122 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R75126:75127 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R75130:75130 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R75123:75125 PL.Imp <> st1:945 var
R75128:75129 PL.Imp <> La:947 var
R75362:75371 Coq.Arith.PeanoNat Nat eq_dec thm
R75362:75371 Coq.Arith.PeanoNat Nat eq_dec thm
prf 75854:75866 Assertion_D bexp_sub_spec
binder 75876:75878 <> st1:952
binder 75880:75882 <> st2:953
binder 75884:75885 <> La:954
R75891:75895 PL.Imp Assertion_D bexp' ind
binder 75888:75888 <> b:955
R75902:75904 PL.Imp <> var def
binder 75899:75899 <> X:956
R75911:75915 PL.Imp Assertion_D aexp' ind
binder 75908:75908 <> E:957
R75953:75958 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R75959:75959 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R75999:76006 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R76075:76075 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R76046:76050 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R76007:76018 PL.Imp Assertion_D bexp'_denote def
R76031:76038 PL.Imp Assertion_D bexp_sub def
R76044:76044 PL.Imp <> b:955 var
R76042:76042 PL.Imp <> E:957 var
R76040:76040 PL.Imp <> X:956 var
R76020:76020 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R76024:76025 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R76028:76028 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R76021:76023 PL.Imp <> st1:952 var
R76026:76027 PL.Imp <> La:954 var
R76051:76062 PL.Imp Assertion_D bexp'_denote def
R76074:76074 PL.Imp <> b:955 var
R76064:76064 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R76068:76069 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R76072:76072 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R76065:76067 PL.Imp <> st2:953 var
R76070:76071 PL.Imp <> La:954 var
R75971:75973 PL.Imp <> var def
binder 75967:75967 <> Y:958
R75982:75985 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R75991:75993 Coq.Init.Logic <> ::type_scope:x_'='_x not
R75986:75988 PL.Imp <> st1:952 var
R75990:75990 PL.Imp <> Y:958 var
R75994:75996 PL.Imp <> st2:953 var
R75998:75998 PL.Imp <> Y:958 var
R75977:75980 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R75976:75976 PL.Imp <> X:956 var
R75981:75981 PL.Imp <> Y:958 var
R75926:75928 Coq.Init.Logic <> ::type_scope:x_'='_x not
R75921:75923 PL.Imp <> st2:953 var
R75925:75925 PL.Imp <> X:956 var
R75929:75940 PL.Imp Assertion_D aexp'_denote def
R75952:75952 PL.Imp <> E:957 var
R75942:75942 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R75946:75947 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R75950:75950 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R75943:75945 PL.Imp <> st1:952 var
R75948:75949 PL.Imp <> La:954 var
R76154:76166 PL.Imp Assertion_D aexp_sub_spec thm
R76154:76166 PL.Imp Assertion_D aexp_sub_spec thm
R76202:76214 PL.Imp Assertion_D aexp_sub_spec thm
R76202:76214 PL.Imp Assertion_D aexp_sub_spec thm
R76281:76293 PL.Imp Assertion_D aexp_sub_spec thm
R76281:76293 PL.Imp Assertion_D aexp_sub_spec thm
R76329:76341 PL.Imp Assertion_D aexp_sub_spec thm
R76329:76341 PL.Imp Assertion_D aexp_sub_spec thm
prf 76427:76443 Assertion_D aexp_max_var_spec
prf 76521:76537 Assertion_D term_max_var_spec
binder 76453:76453 <> a:959
binder 76455:76455 <> x:960
R76484:76489 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R76492:76495 Coq.Init.Peano <> ::nat_scope:x_'<='_x not
R76491:76491 PL.Imp <> x:960 var
R76496:76507 PL.Imp Assertion_D aexp_max_var def
R76509:76509 PL.Imp <> a:959 var
R76462:76464 Coq.Init.Peano <> ::nat_scope:x_'<'_x not
R76465:76474 PL.Imp Assertion_D aexp_occur def
R76478:76478 PL.Imp <> a:959 var
R76476:76476 PL.Imp <> x:960 var
binder 76547:76547 <> t:961
binder 76549:76549 <> x:962
R76578:76583 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R76586:76589 Coq.Init.Peano <> ::nat_scope:x_'<='_x not
R76585:76585 PL.Imp <> x:962 var
R76590:76601 PL.Imp Assertion_D term_max_var def
R76603:76603 PL.Imp <> t:961 var
R76556:76558 Coq.Init.Peano <> ::nat_scope:x_'<'_x not
R76559:76568 PL.Imp Assertion_D term_occur def
R76572:76572 PL.Imp <> t:961 var
R76570:76570 PL.Imp <> x:962 var
R76760:76776 Coq.Arith.PeanoNat Nat add_pos_cases thm
R76760:76776 Coq.Arith.PeanoNat Nat add_pos_cases thm
R76838:76845 Coq.Arith.Le <> le_trans syndef
R76838:76845 Coq.Arith.Le <> le_trans syndef
R76880:76891 Coq.Arith.PeanoNat Nat le_max_l thm
R76880:76891 Coq.Arith.PeanoNat Nat le_max_l thm
R76932:76939 Coq.Arith.Le <> le_trans syndef
R76932:76939 Coq.Arith.Le <> le_trans syndef
R76974:76985 Coq.Arith.PeanoNat Nat le_max_r thm
R76974:76985 Coq.Arith.PeanoNat Nat le_max_r thm
R76998:77014 Coq.Arith.PeanoNat Nat add_pos_cases thm
R76998:77014 Coq.Arith.PeanoNat Nat add_pos_cases thm
R77076:77083 Coq.Arith.Le <> le_trans syndef
R77076:77083 Coq.Arith.Le <> le_trans syndef
R77118:77129 Coq.Arith.PeanoNat Nat le_max_l thm
R77118:77129 Coq.Arith.PeanoNat Nat le_max_l thm
R77170:77177 Coq.Arith.Le <> le_trans syndef
R77170:77177 Coq.Arith.Le <> le_trans syndef
R77212:77223 Coq.Arith.PeanoNat Nat le_max_r thm
R77212:77223 Coq.Arith.PeanoNat Nat le_max_r thm
R77236:77252 Coq.Arith.PeanoNat Nat add_pos_cases thm
R77236:77252 Coq.Arith.PeanoNat Nat add_pos_cases thm
R77314:77321 Coq.Arith.Le <> le_trans syndef
R77314:77321 Coq.Arith.Le <> le_trans syndef
R77356:77367 Coq.Arith.PeanoNat Nat le_max_l thm
R77356:77367 Coq.Arith.PeanoNat Nat le_max_l thm
R77408:77415 Coq.Arith.Le <> le_trans syndef
R77408:77415 Coq.Arith.Le <> le_trans syndef
R77450:77461 Coq.Arith.PeanoNat Nat le_max_r thm
R77450:77461 Coq.Arith.PeanoNat Nat le_max_r thm
R77570:77579 Coq.Arith.PeanoNat Nat eq_dec thm
R77570:77579 Coq.Arith.PeanoNat Nat eq_dec thm
R77616:77619 Coq.Init.Peano <> le_n constr
R77616:77619 Coq.Init.Peano <> le_n constr
R77693:77709 Coq.Arith.PeanoNat Nat add_pos_cases thm
R77693:77709 Coq.Arith.PeanoNat Nat add_pos_cases thm
R77771:77778 Coq.Arith.Le <> le_trans syndef
R77771:77778 Coq.Arith.Le <> le_trans syndef
R77813:77824 Coq.Arith.PeanoNat Nat le_max_l thm
R77813:77824 Coq.Arith.PeanoNat Nat le_max_l thm
R77865:77872 Coq.Arith.Le <> le_trans syndef
R77865:77872 Coq.Arith.Le <> le_trans syndef
R77907:77918 Coq.Arith.PeanoNat Nat le_max_r thm
R77907:77918 Coq.Arith.PeanoNat Nat le_max_r thm
R77931:77947 Coq.Arith.PeanoNat Nat add_pos_cases thm
R77931:77947 Coq.Arith.PeanoNat Nat add_pos_cases thm
R78009:78016 Coq.Arith.Le <> le_trans syndef
R78009:78016 Coq.Arith.Le <> le_trans syndef
R78051:78062 Coq.Arith.PeanoNat Nat le_max_l thm
R78051:78062 Coq.Arith.PeanoNat Nat le_max_l thm
R78103:78110 Coq.Arith.Le <> le_trans syndef
R78103:78110 Coq.Arith.Le <> le_trans syndef
R78145:78156 Coq.Arith.PeanoNat Nat le_max_r thm
R78145:78156 Coq.Arith.PeanoNat Nat le_max_r thm
R78169:78185 Coq.Arith.PeanoNat Nat add_pos_cases thm
R78169:78185 Coq.Arith.PeanoNat Nat add_pos_cases thm
R78247:78254 Coq.Arith.Le <> le_trans syndef
R78247:78254 Coq.Arith.Le <> le_trans syndef
R78289:78300 Coq.Arith.PeanoNat Nat le_max_l thm
R78289:78300 Coq.Arith.PeanoNat Nat le_max_l thm
R78341:78348 Coq.Arith.Le <> le_trans syndef
R78341:78348 Coq.Arith.Le <> le_trans syndef
R78383:78394 Coq.Arith.PeanoNat Nat le_max_r thm
R78383:78394 Coq.Arith.PeanoNat Nat le_max_r thm
prf 78411:78427 Assertion_D bexp_max_var_spec
binder 78437:78437 <> b:963
binder 78439:78439 <> x:964
R78468:78473 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R78476:78479 Coq.Init.Peano <> ::nat_scope:x_'<='_x not
R78475:78475 PL.Imp <> x:964 var
R78480:78491 PL.Imp Assertion_D bexp_max_var def
R78493:78493 PL.Imp <> b:963 var
R78446:78448 Coq.Init.Peano <> ::nat_scope:x_'<'_x not
R78449:78458 PL.Imp Assertion_D bexp_occur def
R78462:78462 PL.Imp <> b:963 var
R78460:78460 PL.Imp <> x:964 var
R78596:78612 Coq.Arith.PeanoNat Nat add_pos_cases thm
R78596:78612 Coq.Arith.PeanoNat Nat add_pos_cases thm
R78653:78669 PL.Imp Assertion_D aexp_max_var_spec thm
R78653:78669 PL.Imp Assertion_D aexp_max_var_spec thm
R78691:78698 Coq.Arith.Le <> le_trans syndef
R78691:78698 Coq.Arith.Le <> le_trans syndef
R78733:78744 Coq.Arith.PeanoNat Nat le_max_l thm
R78733:78744 Coq.Arith.PeanoNat Nat le_max_l thm
R78764:78780 PL.Imp Assertion_D aexp_max_var_spec thm
R78764:78780 PL.Imp Assertion_D aexp_max_var_spec thm
R78802:78809 Coq.Arith.Le <> le_trans syndef
R78802:78809 Coq.Arith.Le <> le_trans syndef
R78844:78855 Coq.Arith.PeanoNat Nat le_max_r thm
R78844:78855 Coq.Arith.PeanoNat Nat le_max_r thm
R78868:78884 Coq.Arith.PeanoNat Nat add_pos_cases thm
R78868:78884 Coq.Arith.PeanoNat Nat add_pos_cases thm
R78925:78941 PL.Imp Assertion_D aexp_max_var_spec thm
R78925:78941 PL.Imp Assertion_D aexp_max_var_spec thm
R78963:78970 Coq.Arith.Le <> le_trans syndef
R78963:78970 Coq.Arith.Le <> le_trans syndef
R79005:79016 Coq.Arith.PeanoNat Nat le_max_l thm
R79005:79016 Coq.Arith.PeanoNat Nat le_max_l thm
R79036:79052 PL.Imp Assertion_D aexp_max_var_spec thm
R79036:79052 PL.Imp Assertion_D aexp_max_var_spec thm
R79074:79081 Coq.Arith.Le <> le_trans syndef
R79074:79081 Coq.Arith.Le <> le_trans syndef
R79116:79127 Coq.Arith.PeanoNat Nat le_max_r thm
R79116:79127 Coq.Arith.PeanoNat Nat le_max_r thm
R79168:79184 Coq.Arith.PeanoNat Nat add_pos_cases thm
R79168:79184 Coq.Arith.PeanoNat Nat add_pos_cases thm
R79246:79253 Coq.Arith.Le <> le_trans syndef
R79246:79253 Coq.Arith.Le <> le_trans syndef
R79288:79299 Coq.Arith.PeanoNat Nat le_max_l thm
R79288:79299 Coq.Arith.PeanoNat Nat le_max_l thm
R79340:79347 Coq.Arith.Le <> le_trans syndef
R79340:79347 Coq.Arith.Le <> le_trans syndef
R79382:79393 Coq.Arith.PeanoNat Nat le_max_r thm
R79382:79393 Coq.Arith.PeanoNat Nat le_max_r thm
prf 79408:79424 Assertion_D assn_max_var_spec
binder 79434:79434 <> P:965
binder 79436:79436 <> x:966
R79465:79470 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R79473:79476 Coq.Init.Peano <> ::nat_scope:x_'<='_x not
R79472:79472 PL.Imp <> x:966 var
R79477:79488 PL.Imp Assertion_D assn_max_var def
R79490:79490 PL.Imp <> P:965 var
R79443:79445 Coq.Init.Peano <> ::nat_scope:x_'<'_x not
R79446:79455 PL.Imp Assertion_D assn_occur def
R79459:79459 PL.Imp <> P:965 var
R79457:79457 PL.Imp <> x:966 var
R79559:79575 Coq.Arith.PeanoNat Nat add_pos_cases thm
R79559:79575 Coq.Arith.PeanoNat Nat add_pos_cases thm
R79616:79632 PL.Imp Assertion_D term_max_var_spec thm
R79616:79632 PL.Imp Assertion_D term_max_var_spec thm
R79654:79661 Coq.Arith.Le <> le_trans syndef
R79654:79661 Coq.Arith.Le <> le_trans syndef
R79696:79707 Coq.Arith.PeanoNat Nat le_max_l thm
R79696:79707 Coq.Arith.PeanoNat Nat le_max_l thm
R79727:79743 PL.Imp Assertion_D term_max_var_spec thm
R79727:79743 PL.Imp Assertion_D term_max_var_spec thm
R79765:79772 Coq.Arith.Le <> le_trans syndef
R79765:79772 Coq.Arith.Le <> le_trans syndef
R79807:79818 Coq.Arith.PeanoNat Nat le_max_r thm
R79807:79818 Coq.Arith.PeanoNat Nat le_max_r thm
R79831:79847 Coq.Arith.PeanoNat Nat add_pos_cases thm
R79831:79847 Coq.Arith.PeanoNat Nat add_pos_cases thm
R79888:79904 PL.Imp Assertion_D term_max_var_spec thm
R79888:79904 PL.Imp Assertion_D term_max_var_spec thm
R79926:79933 Coq.Arith.Le <> le_trans syndef
R79926:79933 Coq.Arith.Le <> le_trans syndef
R79968:79979 Coq.Arith.PeanoNat Nat le_max_l thm
R79968:79979 Coq.Arith.PeanoNat Nat le_max_l thm
R79999:80015 PL.Imp Assertion_D term_max_var_spec thm
R79999:80015 PL.Imp Assertion_D term_max_var_spec thm
R80037:80044 Coq.Arith.Le <> le_trans syndef
R80037:80044 Coq.Arith.Le <> le_trans syndef
R80079:80090 Coq.Arith.PeanoNat Nat le_max_r thm
R80079:80090 Coq.Arith.PeanoNat Nat le_max_r thm
R80103:80119 Coq.Arith.PeanoNat Nat add_pos_cases thm
R80103:80119 Coq.Arith.PeanoNat Nat add_pos_cases thm
R80160:80176 PL.Imp Assertion_D term_max_var_spec thm
R80160:80176 PL.Imp Assertion_D term_max_var_spec thm
R80198:80205 Coq.Arith.Le <> le_trans syndef
R80198:80205 Coq.Arith.Le <> le_trans syndef
R80240:80251 Coq.Arith.PeanoNat Nat le_max_l thm
R80240:80251 Coq.Arith.PeanoNat Nat le_max_l thm
R80271:80287 PL.Imp Assertion_D term_max_var_spec thm
R80271:80287 PL.Imp Assertion_D term_max_var_spec thm
R80309:80316 Coq.Arith.Le <> le_trans syndef
R80309:80316 Coq.Arith.Le <> le_trans syndef
R80351:80362 Coq.Arith.PeanoNat Nat le_max_r thm
R80351:80362 Coq.Arith.PeanoNat Nat le_max_r thm
R80375:80391 PL.Imp Assertion_D bexp_max_var_spec thm
R80375:80391 PL.Imp Assertion_D bexp_max_var_spec thm
R80417:80433 Coq.Arith.PeanoNat Nat add_pos_cases thm
R80417:80433 Coq.Arith.PeanoNat Nat add_pos_cases thm
R80495:80502 Coq.Arith.Le <> le_trans syndef
R80495:80502 Coq.Arith.Le <> le_trans syndef
R80537:80548 Coq.Arith.PeanoNat Nat le_max_l thm
R80537:80548 Coq.Arith.PeanoNat Nat le_max_l thm
R80589:80596 Coq.Arith.Le <> le_trans syndef
R80589:80596 Coq.Arith.Le <> le_trans syndef
R80631:80642 Coq.Arith.PeanoNat Nat le_max_r thm
R80631:80642 Coq.Arith.PeanoNat Nat le_max_r thm
R80655:80671 Coq.Arith.PeanoNat Nat add_pos_cases thm
R80655:80671 Coq.Arith.PeanoNat Nat add_pos_cases thm
R80733:80740 Coq.Arith.Le <> le_trans syndef
R80733:80740 Coq.Arith.Le <> le_trans syndef
R80775:80786 Coq.Arith.PeanoNat Nat le_max_l thm
R80775:80786 Coq.Arith.PeanoNat Nat le_max_l thm
R80827:80834 Coq.Arith.Le <> le_trans syndef
R80827:80834 Coq.Arith.Le <> le_trans syndef
R80869:80880 Coq.Arith.PeanoNat Nat le_max_r thm
R80869:80880 Coq.Arith.PeanoNat Nat le_max_r thm
R80893:80909 Coq.Arith.PeanoNat Nat add_pos_cases thm
R80893:80909 Coq.Arith.PeanoNat Nat add_pos_cases thm
R80971:80978 Coq.Arith.Le <> le_trans syndef
R80971:80978 Coq.Arith.Le <> le_trans syndef
R81013:81024 Coq.Arith.PeanoNat Nat le_max_l thm
R81013:81024 Coq.Arith.PeanoNat Nat le_max_l thm
R81065:81072 Coq.Arith.Le <> le_trans syndef
R81065:81072 Coq.Arith.Le <> le_trans syndef
R81107:81118 Coq.Arith.PeanoNat Nat le_max_r thm
R81107:81118 Coq.Arith.PeanoNat Nat le_max_r thm
R81163:81172 Coq.Arith.PeanoNat Nat eq_dec thm
R81163:81172 Coq.Arith.PeanoNat Nat eq_dec thm
R81209:81220 Coq.Arith.PeanoNat Nat le_max_l thm
R81209:81220 Coq.Arith.PeanoNat Nat le_max_l thm
R81258:81265 Coq.Arith.Le <> le_trans syndef
R81258:81265 Coq.Arith.Le <> le_trans syndef
R81299:81310 Coq.Arith.PeanoNat Nat le_max_r thm
R81299:81310 Coq.Arith.PeanoNat Nat le_max_r thm
R81327:81336 Coq.Arith.PeanoNat Nat eq_dec thm
R81327:81336 Coq.Arith.PeanoNat Nat eq_dec thm
R81373:81384 Coq.Arith.PeanoNat Nat le_max_l thm
R81373:81384 Coq.Arith.PeanoNat Nat le_max_l thm
R81422:81429 Coq.Arith.Le <> le_trans syndef
R81422:81429 Coq.Arith.Le <> le_trans syndef
R81463:81474 Coq.Arith.PeanoNat Nat le_max_r thm
R81463:81474 Coq.Arith.PeanoNat Nat le_max_r thm
prf 81489:81503 Assertion_D new_var_occur_r
binder 81513:81513 <> E:967
binder 81515:81515 <> P:968
R81546:81548 Coq.Init.Logic <> ::type_scope:x_'='_x not
R81520:81529 PL.Imp Assertion_D aexp_occur def
R81545:81545 PL.Imp <> E:967 var
R81532:81538 PL.Imp Assertion_D new_var def
R81542:81542 PL.Imp <> E:967 var
R81540:81540 PL.Imp <> P:968 var
R81549:81549 Coq.Init.Datatypes <> O constr
R81581:81590 PL.Imp Assertion_D aexp_occur def
R81593:81599 PL.Imp Assertion_D new_var def
R81581:81590 PL.Imp Assertion_D aexp_occur def
R81593:81599 PL.Imp Assertion_D new_var def
R81647:81649 Coq.Init.Peano <> ::nat_scope:x_'<'_x not
R81650:81659 PL.Imp Assertion_D aexp_occur def
R81662:81668 PL.Imp Assertion_D new_var def
R81647:81649 Coq.Init.Peano <> ::nat_scope:x_'<'_x not
R81650:81659 PL.Imp Assertion_D aexp_occur def
R81662:81668 PL.Imp Assertion_D new_var def
R81718:81730 Coq.Arith.PeanoNat Nat lt_0_succ thm
R81718:81730 Coq.Arith.PeanoNat Nat lt_0_succ thm
R81772:81788 PL.Imp Assertion_D aexp_max_var_spec thm
R81772:81788 PL.Imp Assertion_D aexp_max_var_spec thm
R81807:81813 PL.Imp Assertion_D new_var def
R81841:81849 Coq.Arith.Lt <> lt_not_le thm
R81841:81849 Coq.Arith.Lt <> lt_not_le thm
R81860:81869 Coq.Arith.Lt <> le_lt_n_Sm thm
R81860:81869 Coq.Arith.Lt <> le_lt_n_Sm thm
R81880:81891 Coq.Arith.PeanoNat Nat le_max_r thm
R81880:81891 Coq.Arith.PeanoNat Nat le_max_r thm
prf 81906:81920 Assertion_D new_var_occur_l
binder 81930:81930 <> E:969
binder 81932:81932 <> P:970
R81963:81965 Coq.Init.Logic <> ::type_scope:x_'='_x not
R81937:81946 PL.Imp Assertion_D assn_occur def
R81962:81962 PL.Imp <> P:970 var
R81949:81955 PL.Imp Assertion_D new_var def
R81959:81959 PL.Imp <> E:969 var
R81957:81957 PL.Imp <> P:970 var
R81966:81966 Coq.Init.Datatypes <> O constr
R81998:82007 PL.Imp Assertion_D assn_occur def
R82010:82016 PL.Imp Assertion_D new_var def
R81998:82007 PL.Imp Assertion_D assn_occur def
R82010:82016 PL.Imp Assertion_D new_var def
R82064:82066 Coq.Init.Peano <> ::nat_scope:x_'<'_x not
R82067:82076 PL.Imp Assertion_D assn_occur def
R82079:82085 PL.Imp Assertion_D new_var def
R82064:82066 Coq.Init.Peano <> ::nat_scope:x_'<'_x not
R82067:82076 PL.Imp Assertion_D assn_occur def
R82079:82085 PL.Imp Assertion_D new_var def
R82135:82147 Coq.Arith.PeanoNat Nat lt_0_succ thm
R82135:82147 Coq.Arith.PeanoNat Nat lt_0_succ thm
R82189:82205 PL.Imp Assertion_D assn_max_var_spec thm
R82189:82205 PL.Imp Assertion_D assn_max_var_spec thm
R82224:82230 PL.Imp Assertion_D new_var def
R82258:82266 Coq.Arith.Lt <> lt_not_le thm
R82258:82266 Coq.Arith.Lt <> lt_not_le thm
R82277:82286 Coq.Arith.Lt <> le_lt_n_Sm thm
R82277:82286 Coq.Arith.Lt <> le_lt_n_Sm thm
R82297:82308 Coq.Arith.PeanoNat Nat le_max_l thm
R82297:82308 Coq.Arith.PeanoNat Nat le_max_l thm
prf 82323:82341 Assertion_D no_occ_aexp'_denote
prf 82462:82479 Assertion_D no_occ_term_denote
binder 82351:82352 <> st:971
binder 82354:82355 <> La:972
binder 82357:82357 <> a:973
binder 82359:82359 <> x:974
binder 82361:82361 <> v:975
R82384:82389 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R82413:82415 Coq.Init.Logic <> ::type_scope:x_'='_x not
R82390:82401 PL.Imp Assertion_D aexp'_denote def
R82412:82412 PL.Imp <> a:973 var
R82403:82403 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R82406:82407 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R82410:82410 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R82404:82405 PL.Imp <> st:971 var
R82408:82409 PL.Imp <> La:972 var
R82416:82427 PL.Imp Assertion_D aexp'_denote def
R82455:82455 PL.Imp <> a:973 var
R82429:82429 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R82432:82433 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R82453:82453 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R82430:82431 PL.Imp <> st:971 var
R82434:82445 PL.Imp Assertion_D Lassn_update def
R82452:82452 PL.Imp <> v:975 var
R82450:82450 PL.Imp <> x:974 var
R82447:82448 PL.Imp <> La:972 var
R82380:82382 Coq.Init.Logic <> ::type_scope:x_'='_x not
R82366:82375 PL.Imp Assertion_D aexp_occur def
R82379:82379 PL.Imp <> a:973 var
R82377:82377 PL.Imp <> x:974 var
R82383:82383 Coq.Init.Datatypes <> O constr
binder 82489:82490 <> st:976
binder 82492:82493 <> La:977
binder 82495:82495 <> t:978
binder 82497:82497 <> x:979
binder 82499:82499 <> v:980
R82522:82527 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R82550:82552 Coq.Init.Logic <> ::type_scope:x_'='_x not
R82528:82538 PL.Imp Assertion_D term_denote def
R82549:82549 PL.Imp <> t:978 var
R82540:82540 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R82543:82544 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R82547:82547 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R82541:82542 PL.Imp <> st:976 var
R82545:82546 PL.Imp <> La:977 var
R82553:82563 PL.Imp Assertion_D term_denote def
R82591:82591 PL.Imp <> t:978 var
R82565:82565 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R82568:82569 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R82589:82589 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R82566:82567 PL.Imp <> st:976 var
R82570:82581 PL.Imp Assertion_D Lassn_update def
R82588:82588 PL.Imp <> v:980 var
R82586:82586 PL.Imp <> x:979 var
R82583:82584 PL.Imp <> La:977 var
R82518:82520 Coq.Init.Logic <> ::type_scope:x_'='_x not
R82504:82513 PL.Imp Assertion_D term_occur def
R82517:82517 PL.Imp <> t:978 var
R82515:82515 PL.Imp <> x:979 var
R82521:82521 Coq.Init.Datatypes <> O constr
R82750:82758 Coq.Arith.Plus <> plus_is_O thm
R82750:82758 Coq.Arith.Plus <> plus_is_O thm
R83094:83102 Coq.Arith.Plus <> plus_is_O thm
R83094:83102 Coq.Arith.Plus <> plus_is_O thm
R83186:83194 Coq.Arith.Plus <> plus_is_O thm
R83186:83194 Coq.Arith.Plus <> plus_is_O thm
R83360:83371 PL.Imp Assertion_D Lassn_update def
R83388:83397 Coq.Arith.PeanoNat Nat eq_dec thm
R83388:83397 Coq.Arith.PeanoNat Nat eq_dec thm
R83517:83525 Coq.Arith.Plus <> plus_is_O thm
R83517:83525 Coq.Arith.Plus <> plus_is_O thm
R83609:83617 Coq.Arith.Plus <> plus_is_O thm
R83609:83617 Coq.Arith.Plus <> plus_is_O thm
R83701:83709 Coq.Arith.Plus <> plus_is_O thm
R83701:83709 Coq.Arith.Plus <> plus_is_O thm
prf 83781:83799 Assertion_D no_occ_bexp'_denote
binder 83809:83810 <> st:981
binder 83812:83813 <> La:982
binder 83815:83815 <> b:983
binder 83817:83817 <> x:984
binder 83819:83819 <> v:985
R83842:83848 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R83917:83917 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R83872:83876 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R83849:83860 PL.Imp Assertion_D bexp'_denote def
R83871:83871 PL.Imp <> b:983 var
R83862:83862 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R83865:83866 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R83869:83869 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R83863:83864 PL.Imp <> st:981 var
R83867:83868 PL.Imp <> La:982 var
R83877:83888 PL.Imp Assertion_D bexp'_denote def
R83916:83916 PL.Imp <> b:983 var
R83890:83890 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R83893:83894 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R83914:83914 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R83891:83892 PL.Imp <> st:981 var
R83895:83906 PL.Imp Assertion_D Lassn_update def
R83913:83913 PL.Imp <> v:985 var
R83911:83911 PL.Imp <> x:984 var
R83908:83909 PL.Imp <> La:982 var
R83838:83840 Coq.Init.Logic <> ::type_scope:x_'='_x not
R83824:83833 PL.Imp Assertion_D bexp_occur def
R83837:83837 PL.Imp <> b:983 var
R83835:83835 PL.Imp <> x:984 var
R83841:83841 Coq.Init.Datatypes <> O constr
R84003:84011 Coq.Arith.Plus <> plus_is_O thm
R84003:84011 Coq.Arith.Plus <> plus_is_O thm
R84034:84052 PL.Imp Assertion_D no_occ_aexp'_denote thm
R84034:84052 PL.Imp Assertion_D no_occ_aexp'_denote thm
R84083:84101 PL.Imp Assertion_D no_occ_aexp'_denote thm
R84083:84101 PL.Imp Assertion_D no_occ_aexp'_denote thm
R84167:84175 Coq.Arith.Plus <> plus_is_O thm
R84167:84175 Coq.Arith.Plus <> plus_is_O thm
R84198:84216 PL.Imp Assertion_D no_occ_aexp'_denote thm
R84198:84216 PL.Imp Assertion_D no_occ_aexp'_denote thm
R84247:84265 PL.Imp Assertion_D no_occ_aexp'_denote thm
R84247:84265 PL.Imp Assertion_D no_occ_aexp'_denote thm
R84342:84350 Coq.Arith.Plus <> plus_is_O thm
R84342:84350 Coq.Arith.Plus <> plus_is_O thm
prf 84381:84396 Assertion_D no_occ_satisfies
binder 84406:84407 <> st:986
binder 84409:84410 <> La:987
binder 84412:84412 <> P:988
binder 84414:84414 <> x:989
binder 84416:84416 <> v:990
R84444:84450 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R84501:84501 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R84465:84469 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R84459:84463 PL.Imp Assertion_D :::x_'|=='_x not
R84451:84451 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R84454:84455 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R84458:84458 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R84452:84453 PL.Imp <> st:986 var
R84456:84457 PL.Imp <> La:987 var
R84464:84464 PL.Imp <> P:988 var
R84495:84499 PL.Imp Assertion_D :::x_'|=='_x not
R84470:84470 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R84473:84474 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R84494:84494 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R84471:84472 PL.Imp <> st:986 var
R84475:84486 PL.Imp Assertion_D Lassn_update def
R84493:84493 PL.Imp <> v:990 var
R84491:84491 PL.Imp <> x:989 var
R84488:84489 PL.Imp <> La:987 var
R84500:84500 PL.Imp <> P:988 var
R84440:84442 Coq.Init.Logic <> ::type_scope:x_'='_x not
R84421:84435 PL.Imp Assertion_D assn_free_occur def
R84439:84439 PL.Imp <> P:988 var
R84437:84437 PL.Imp <> x:989 var
R84443:84443 Coq.Init.Datatypes <> O constr
R84574:84582 Coq.Arith.Plus <> plus_is_O thm
R84574:84582 Coq.Arith.Plus <> plus_is_O thm
R84605:84622 PL.Imp Assertion_D no_occ_term_denote thm
R84605:84622 PL.Imp Assertion_D no_occ_term_denote thm
R84653:84670 PL.Imp Assertion_D no_occ_term_denote thm
R84653:84670 PL.Imp Assertion_D no_occ_term_denote thm
R84736:84744 Coq.Arith.Plus <> plus_is_O thm
R84736:84744 Coq.Arith.Plus <> plus_is_O thm
R84767:84784 PL.Imp Assertion_D no_occ_term_denote thm
R84767:84784 PL.Imp Assertion_D no_occ_term_denote thm
R84815:84832 PL.Imp Assertion_D no_occ_term_denote thm
R84815:84832 PL.Imp Assertion_D no_occ_term_denote thm
R84898:84906 Coq.Arith.Plus <> plus_is_O thm
R84898:84906 Coq.Arith.Plus <> plus_is_O thm
R84929:84946 PL.Imp Assertion_D no_occ_term_denote thm
R84929:84946 PL.Imp Assertion_D no_occ_term_denote thm
R84977:84994 PL.Imp Assertion_D no_occ_term_denote thm
R84977:84994 PL.Imp Assertion_D no_occ_term_denote thm
R85060:85078 PL.Imp Assertion_D no_occ_bexp'_denote thm
R85060:85078 PL.Imp Assertion_D no_occ_bexp'_denote thm
R85104:85112 Coq.Arith.Plus <> plus_is_O thm
R85104:85112 Coq.Arith.Plus <> plus_is_O thm
R85193:85201 Coq.Arith.Plus <> plus_is_O thm
R85193:85201 Coq.Arith.Plus <> plus_is_O thm
R85282:85290 Coq.Arith.Plus <> plus_is_O thm
R85282:85290 Coq.Arith.Plus <> plus_is_O thm
R85408:85421 PL.Imp Assertion_D Interp_Lupdate def
R85445:85454 Coq.Arith.PeanoNat Nat eq_dec thm
R85445:85454 Coq.Arith.PeanoNat Nat eq_dec thm
binder 85500:85501 <> v0:991
R85555:85584 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R85549:85553 PL.Imp Assertion_D :::x_'|=='_x not
R85504:85504 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85507:85508 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85548:85548 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85509:85520 PL.Imp Assertion_D Lassn_update def
R85546:85547 PL.Imp <> v0:991 var
R85523:85534 PL.Imp Assertion_D Lassn_update def
R85611:85615 PL.Imp Assertion_D :::x_'|=='_x not
R85585:85585 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85588:85589 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85610:85610 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85590:85601 PL.Imp Assertion_D Lassn_update def
R85608:85609 PL.Imp <> v0:991 var
binder 85500:85501 <> v0:992
R85555:85584 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R85549:85553 PL.Imp Assertion_D :::x_'|=='_x not
R85504:85504 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85507:85508 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85548:85548 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85509:85520 PL.Imp Assertion_D Lassn_update def
R85546:85547 PL.Imp <> v0:992 var
R85523:85534 PL.Imp Assertion_D Lassn_update def
R85611:85615 PL.Imp Assertion_D :::x_'|=='_x not
R85585:85585 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85588:85589 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85610:85610 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85590:85601 PL.Imp Assertion_D Lassn_update def
R85608:85609 PL.Imp <> v0:992 var
R85658:85679 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R85658:85679 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R85696:85719 PL.Imp Assertion_D Lassn_update_update_same thm
R85696:85719 PL.Imp Assertion_D Lassn_update_update_same thm
binder 85769:85770 <> v0:993
R85806:85835 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R85800:85804 PL.Imp Assertion_D :::x_'|=='_x not
R85773:85773 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85776:85777 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85799:85799 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85778:85789 PL.Imp Assertion_D Lassn_update def
R85797:85798 PL.Imp <> v0:993 var
R85882:85886 PL.Imp Assertion_D :::x_'|=='_x not
R85836:85836 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85839:85840 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85881:85881 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85841:85852 PL.Imp Assertion_D Lassn_update def
R85879:85880 PL.Imp <> v0:993 var
R85855:85866 PL.Imp Assertion_D Lassn_update def
binder 85769:85770 <> v0:994
R85806:85835 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R85800:85804 PL.Imp Assertion_D :::x_'|=='_x not
R85773:85773 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85776:85777 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85799:85799 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85778:85789 PL.Imp Assertion_D Lassn_update def
R85797:85798 PL.Imp <> v0:994 var
R85882:85886 PL.Imp Assertion_D :::x_'|=='_x not
R85836:85836 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85839:85840 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85881:85881 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R85841:85852 PL.Imp Assertion_D Lassn_update def
R85879:85880 PL.Imp <> v0:994 var
R85855:85866 PL.Imp Assertion_D Lassn_update def
R85934:85957 PL.Imp Assertion_D Lassn_update_update_diff thm
R85934:85957 PL.Imp Assertion_D Lassn_update_update_diff thm
R85997:86018 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R85997:86018 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R86055:86066 PL.Imp Assertion_D Lassn_update def
R86055:86066 PL.Imp Assertion_D Lassn_update def
R86132:86145 PL.Imp Assertion_D Interp_Lupdate def
R86169:86178 Coq.Arith.PeanoNat Nat eq_dec thm
R86169:86178 Coq.Arith.PeanoNat Nat eq_dec thm
binder 86224:86225 <> v0:995
R86279:86308 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R86273:86277 PL.Imp Assertion_D :::x_'|=='_x not
R86228:86228 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86231:86232 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86272:86272 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86233:86244 PL.Imp Assertion_D Lassn_update def
R86270:86271 PL.Imp <> v0:995 var
R86247:86258 PL.Imp Assertion_D Lassn_update def
R86335:86339 PL.Imp Assertion_D :::x_'|=='_x not
R86309:86309 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86312:86313 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86334:86334 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86314:86325 PL.Imp Assertion_D Lassn_update def
R86332:86333 PL.Imp <> v0:995 var
binder 86224:86225 <> v0:996
R86279:86308 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R86273:86277 PL.Imp Assertion_D :::x_'|=='_x not
R86228:86228 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86231:86232 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86272:86272 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86233:86244 PL.Imp Assertion_D Lassn_update def
R86270:86271 PL.Imp <> v0:996 var
R86247:86258 PL.Imp Assertion_D Lassn_update def
R86335:86339 PL.Imp Assertion_D :::x_'|=='_x not
R86309:86309 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86312:86313 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86334:86334 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86314:86325 PL.Imp Assertion_D Lassn_update def
R86332:86333 PL.Imp <> v0:996 var
R86382:86403 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R86382:86403 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R86420:86443 PL.Imp Assertion_D Lassn_update_update_same thm
R86420:86443 PL.Imp Assertion_D Lassn_update_update_same thm
binder 86493:86494 <> v0:997
R86530:86559 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R86524:86528 PL.Imp Assertion_D :::x_'|=='_x not
R86497:86497 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86500:86501 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86523:86523 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86502:86513 PL.Imp Assertion_D Lassn_update def
R86521:86522 PL.Imp <> v0:997 var
R86606:86610 PL.Imp Assertion_D :::x_'|=='_x not
R86560:86560 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86563:86564 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86605:86605 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86565:86576 PL.Imp Assertion_D Lassn_update def
R86603:86604 PL.Imp <> v0:997 var
R86579:86590 PL.Imp Assertion_D Lassn_update def
binder 86493:86494 <> v0:998
R86530:86559 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R86524:86528 PL.Imp Assertion_D :::x_'|=='_x not
R86497:86497 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86500:86501 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86523:86523 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86502:86513 PL.Imp Assertion_D Lassn_update def
R86521:86522 PL.Imp <> v0:998 var
R86606:86610 PL.Imp Assertion_D :::x_'|=='_x not
R86560:86560 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86563:86564 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86605:86605 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86565:86576 PL.Imp Assertion_D Lassn_update def
R86603:86604 PL.Imp <> v0:998 var
R86579:86590 PL.Imp Assertion_D Lassn_update def
R86658:86681 PL.Imp Assertion_D Lassn_update_update_diff thm
R86658:86681 PL.Imp Assertion_D Lassn_update_update_diff thm
R86721:86742 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R86721:86742 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R86779:86790 PL.Imp Assertion_D Lassn_update def
R86779:86790 PL.Imp Assertion_D Lassn_update def
prf 86857:86873 Assertion_D no_occ_satisfies'
binder 86883:86884 <> st:999
binder 86886:86887 <> La:1000
binder 86889:86889 <> P:1001
binder 86891:86891 <> x:1002
binder 86893:86893 <> v:1003
R86916:86922 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R86973:86973 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R86937:86941 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R86931:86935 PL.Imp Assertion_D :::x_'|=='_x not
R86923:86923 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86926:86927 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86930:86930 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86924:86925 PL.Imp <> st:999 var
R86928:86929 PL.Imp <> La:1000 var
R86936:86936 PL.Imp <> P:1001 var
R86967:86971 PL.Imp Assertion_D :::x_'|=='_x not
R86942:86942 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86945:86946 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86966:86966 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R86943:86944 PL.Imp <> st:999 var
R86947:86958 PL.Imp Assertion_D Lassn_update def
R86965:86965 PL.Imp <> v:1003 var
R86963:86963 PL.Imp <> x:1002 var
R86960:86961 PL.Imp <> La:1000 var
R86972:86972 PL.Imp <> P:1001 var
R86912:86914 Coq.Init.Logic <> ::type_scope:x_'='_x not
R86898:86907 PL.Imp Assertion_D assn_occur def
R86911:86911 PL.Imp <> P:1001 var
R86909:86909 PL.Imp <> x:1002 var
R86915:86915 Coq.Init.Datatypes <> O constr
R87001:87016 PL.Imp Assertion_D no_occ_satisfies thm
R87001:87016 PL.Imp Assertion_D no_occ_satisfies thm
R87027:87038 PL.Imp Assertion_D assn_occur_O thm
R87027:87038 PL.Imp Assertion_D assn_occur_O thm
prf 87064:87083 Assertion_D aexp_rename_no_occur
prf 87243:87262 Assertion_D term_rename_no_occur
binder 87093:87094 <> st:1004
binder 87096:87097 <> La:1005
binder 87099:87099 <> x:1006
binder 87101:87101 <> y:1007
binder 87103:87103 <> v:1008
binder 87105:87105 <> a:1009
R87128:87133 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R87174:87178 Coq.Init.Logic <> ::type_scope:x_'='_x not
R87134:87145 PL.Imp Assertion_D aexp'_denote def
R87173:87173 PL.Imp <> a:1009 var
R87147:87147 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R87150:87151 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R87171:87171 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R87148:87149 PL.Imp <> st:1004 var
R87152:87163 PL.Imp Assertion_D Lassn_update def
R87170:87170 PL.Imp <> v:1008 var
R87168:87168 PL.Imp <> x:1006 var
R87165:87166 PL.Imp <> La:1005 var
R87179:87190 PL.Imp Assertion_D aexp'_denote def
R87219:87229 PL.Imp Assertion_D aexp_rename def
R87235:87235 PL.Imp <> a:1009 var
R87233:87233 PL.Imp <> y:1007 var
R87231:87231 PL.Imp <> x:1006 var
R87192:87192 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R87195:87196 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R87216:87216 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R87193:87194 PL.Imp <> st:1004 var
R87197:87208 PL.Imp Assertion_D Lassn_update def
R87215:87215 PL.Imp <> v:1008 var
R87213:87213 PL.Imp <> y:1007 var
R87210:87211 PL.Imp <> La:1005 var
R87124:87126 Coq.Init.Logic <> ::type_scope:x_'='_x not
R87110:87119 PL.Imp Assertion_D aexp_occur def
R87123:87123 PL.Imp <> a:1009 var
R87121:87121 PL.Imp <> y:1007 var
R87127:87127 Coq.Init.Datatypes <> O constr
binder 87272:87273 <> st:1010
binder 87275:87276 <> La:1011
binder 87278:87278 <> x:1012
binder 87280:87280 <> y:1013
binder 87282:87282 <> v:1014
binder 87284:87284 <> t:1015
R87307:87312 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R87352:87356 Coq.Init.Logic <> ::type_scope:x_'='_x not
R87313:87323 PL.Imp Assertion_D term_denote def
R87351:87351 PL.Imp <> t:1015 var
R87325:87325 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R87328:87329 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R87349:87349 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R87326:87327 PL.Imp <> st:1010 var
R87330:87341 PL.Imp Assertion_D Lassn_update def
R87348:87348 PL.Imp <> v:1014 var
R87346:87346 PL.Imp <> x:1012 var
R87343:87344 PL.Imp <> La:1011 var
R87357:87367 PL.Imp Assertion_D term_denote def
R87396:87406 PL.Imp Assertion_D term_rename def
R87412:87412 PL.Imp <> t:1015 var
R87410:87410 PL.Imp <> y:1013 var
R87408:87408 PL.Imp <> x:1012 var
R87369:87369 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R87372:87373 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R87393:87393 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R87370:87371 PL.Imp <> st:1010 var
R87374:87385 PL.Imp Assertion_D Lassn_update def
R87392:87392 PL.Imp <> v:1014 var
R87390:87390 PL.Imp <> y:1013 var
R87387:87388 PL.Imp <> La:1011 var
R87303:87305 Coq.Init.Logic <> ::type_scope:x_'='_x not
R87289:87298 PL.Imp Assertion_D term_occur def
R87302:87302 PL.Imp <> t:1015 var
R87300:87300 PL.Imp <> y:1013 var
R87306:87306 Coq.Init.Datatypes <> O constr
R87559:87567 Coq.Arith.Plus <> plus_is_O thm
R87559:87567 Coq.Arith.Plus <> plus_is_O thm
R87635:87643 Coq.Arith.Plus <> plus_is_O thm
R87635:87643 Coq.Arith.Plus <> plus_is_O thm
R87711:87719 Coq.Arith.Plus <> plus_is_O thm
R87711:87719 Coq.Arith.Plus <> plus_is_O thm
R87886:87895 Coq.Arith.PeanoNat Nat eq_dec thm
R87886:87895 Coq.Arith.PeanoNat Nat eq_dec thm
R87946:87957 PL.Imp Assertion_D Lassn_update def
R87976:87985 Coq.Arith.PeanoNat Nat eq_dec thm
R88003:88012 Coq.Arith.PeanoNat Nat eq_dec thm
R87976:87985 Coq.Arith.PeanoNat Nat eq_dec thm
R88003:88012 Coq.Arith.PeanoNat Nat eq_dec thm
R88003:88012 Coq.Arith.PeanoNat Nat eq_dec thm
R88184:88195 PL.Imp Assertion_D Lassn_update def
R88214:88223 Coq.Arith.PeanoNat Nat eq_dec thm
R88214:88223 Coq.Arith.PeanoNat Nat eq_dec thm
R88305:88314 Coq.Arith.PeanoNat Nat eq_dec thm
R88305:88314 Coq.Arith.PeanoNat Nat eq_dec thm
R88423:88431 Coq.Arith.Plus <> plus_is_O thm
R88423:88431 Coq.Arith.Plus <> plus_is_O thm
R88499:88507 Coq.Arith.Plus <> plus_is_O thm
R88499:88507 Coq.Arith.Plus <> plus_is_O thm
R88575:88583 Coq.Arith.Plus <> plus_is_O thm
R88575:88583 Coq.Arith.Plus <> plus_is_O thm
prf 88655:88674 Assertion_D bexp_rename_no_occur
binder 88684:88685 <> st:1016
binder 88687:88688 <> La:1017
binder 88690:88690 <> x:1018
binder 88692:88692 <> y:1019
binder 88694:88694 <> v:1020
binder 88696:88696 <> b:1021
R88719:88725 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R88832:88832 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R88766:88773 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R88726:88737 PL.Imp Assertion_D bexp'_denote def
R88765:88765 PL.Imp <> b:1021 var
R88739:88739 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R88742:88743 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R88763:88763 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R88740:88741 PL.Imp <> st:1016 var
R88744:88755 PL.Imp Assertion_D Lassn_update def
R88762:88762 PL.Imp <> v:1020 var
R88760:88760 PL.Imp <> x:1018 var
R88757:88758 PL.Imp <> La:1017 var
R88774:88785 PL.Imp Assertion_D bexp'_denote def
R88814:88824 PL.Imp Assertion_D bexp_rename def
R88830:88830 PL.Imp <> b:1021 var
R88828:88828 PL.Imp <> y:1019 var
R88826:88826 PL.Imp <> x:1018 var
R88787:88787 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R88790:88791 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R88811:88811 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R88788:88789 PL.Imp <> st:1016 var
R88792:88803 PL.Imp Assertion_D Lassn_update def
R88810:88810 PL.Imp <> v:1020 var
R88808:88808 PL.Imp <> y:1019 var
R88805:88806 PL.Imp <> La:1017 var
R88715:88717 Coq.Init.Logic <> ::type_scope:x_'='_x not
R88701:88710 PL.Imp Assertion_D bexp_occur def
R88714:88714 PL.Imp <> b:1021 var
R88712:88712 PL.Imp <> y:1019 var
R88718:88718 Coq.Init.Datatypes <> O constr
R88918:88926 Coq.Arith.Plus <> plus_is_O thm
R88918:88926 Coq.Arith.Plus <> plus_is_O thm
R88949:88968 PL.Imp Assertion_D aexp_rename_no_occur thm
R88949:88968 PL.Imp Assertion_D aexp_rename_no_occur thm
R88949:88968 PL.Imp Assertion_D aexp_rename_no_occur thm
R88995:89014 PL.Imp Assertion_D aexp_rename_no_occur thm
R88995:89014 PL.Imp Assertion_D aexp_rename_no_occur thm
R88995:89014 PL.Imp Assertion_D aexp_rename_no_occur thm
R89047:89055 Coq.Arith.Plus <> plus_is_O thm
R89047:89055 Coq.Arith.Plus <> plus_is_O thm
R89078:89097 PL.Imp Assertion_D aexp_rename_no_occur thm
R89078:89097 PL.Imp Assertion_D aexp_rename_no_occur thm
R89078:89097 PL.Imp Assertion_D aexp_rename_no_occur thm
R89124:89143 PL.Imp Assertion_D aexp_rename_no_occur thm
R89124:89143 PL.Imp Assertion_D aexp_rename_no_occur thm
R89124:89143 PL.Imp Assertion_D aexp_rename_no_occur thm
R89187:89195 Coq.Arith.Plus <> plus_is_O thm
R89187:89195 Coq.Arith.Plus <> plus_is_O thm
def 89229:89242 Assertion_D naive_sub_safe
R89248:89252 PL.Imp Assertion_D aexp' ind
binder 89245:89245 <> E:1022
R89259:89267 PL.Imp Assertion_D Assertion ind
binder 89256:89256 <> d:1023
R89289:89289 PL.Imp <> d:1023 var
R89302:89307 PL.Imp Assertion_D AssnLe constr
R89320:89323 Coq.Init.Logic <> True ind
R89331:89336 PL.Imp Assertion_D AssnLt constr
R89349:89352 Coq.Init.Logic <> True ind
R89360:89365 PL.Imp Assertion_D AssnEq constr
R89378:89381 Coq.Init.Logic <> True ind
R89389:89398 PL.Imp Assertion_D AssnDenote constr
R89407:89410 Coq.Init.Logic <> True ind
R89418:89423 PL.Imp Assertion_D AssnOr constr
R89455:89458 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R89436:89449 PL.Imp <> naive_sub_safe:1024 def
R89451:89451 PL.Imp <> E:1022 var
R89459:89472 PL.Imp <> naive_sub_safe:1024 def
R89474:89474 PL.Imp <> E:1022 var
R89485:89491 PL.Imp Assertion_D AssnAnd constr
R89522:89525 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R89503:89516 PL.Imp <> naive_sub_safe:1024 def
R89518:89518 PL.Imp <> E:1022 var
R89526:89539 PL.Imp <> naive_sub_safe:1024 def
R89541:89541 PL.Imp <> E:1022 var
R89552:89559 PL.Imp Assertion_D AssnImpl constr
R89589:89592 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R89570:89583 PL.Imp <> naive_sub_safe:1024 def
R89585:89585 PL.Imp <> E:1022 var
R89593:89606 PL.Imp <> naive_sub_safe:1024 def
R89608:89608 PL.Imp <> E:1022 var
R89619:89625 PL.Imp Assertion_D AssnNot constr
R89637:89650 PL.Imp <> naive_sub_safe:1024 def
R89652:89652 PL.Imp <> E:1022 var
R89662:89671 PL.Imp Assertion_D AssnExists constr
R89698:89701 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R89694:89696 Coq.Init.Logic <> ::type_scope:x_'='_x not
R89680:89689 PL.Imp Assertion_D aexp_occur def
R89693:89693 PL.Imp <> E:1022 var
R89697:89697 Coq.Init.Datatypes <> O constr
R89702:89715 PL.Imp <> naive_sub_safe:1024 def
R89717:89717 PL.Imp <> E:1022 var
R89727:89736 PL.Imp Assertion_D AssnForall constr
R89763:89766 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R89759:89761 Coq.Init.Logic <> ::type_scope:x_'='_x not
R89745:89754 PL.Imp Assertion_D aexp_occur def
R89758:89758 PL.Imp <> E:1022 var
R89762:89762 Coq.Init.Datatypes <> O constr
R89767:89780 PL.Imp <> naive_sub_safe:1024 def
R89782:89782 PL.Imp <> E:1022 var
prf 89802:89821 Assertion_D assn_rename_no_occur
binder 89831:89832 <> st:1026
binder 89834:89835 <> La:1027
binder 89837:89837 <> x:1028
binder 89839:89839 <> y:1029
binder 89841:89841 <> v:1030
binder 89843:89843 <> P:1031
R89866:89872 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R89959:89959 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R89904:89911 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R89898:89902 PL.Imp Assertion_D :::x_'|=='_x not
R89873:89873 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R89876:89877 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R89897:89897 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R89874:89875 PL.Imp <> st:1026 var
R89878:89889 PL.Imp Assertion_D Lassn_update def
R89896:89896 PL.Imp <> v:1030 var
R89894:89894 PL.Imp <> x:1028 var
R89891:89892 PL.Imp <> La:1027 var
R89903:89903 PL.Imp <> P:1031 var
R89937:89941 PL.Imp Assertion_D :::x_'|=='_x not
R89912:89912 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R89915:89916 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R89936:89936 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R89913:89914 PL.Imp <> st:1026 var
R89917:89928 PL.Imp Assertion_D Lassn_update def
R89935:89935 PL.Imp <> v:1030 var
R89933:89933 PL.Imp <> y:1029 var
R89930:89931 PL.Imp <> La:1027 var
R89942:89952 PL.Imp Assertion_D assn_rename def
R89958:89958 PL.Imp <> P:1031 var
R89956:89956 PL.Imp <> y:1029 var
R89954:89954 PL.Imp <> x:1028 var
R89862:89864 Coq.Init.Logic <> ::type_scope:x_'='_x not
R89848:89857 PL.Imp Assertion_D assn_occur def
R89861:89861 PL.Imp <> P:1031 var
R89859:89859 PL.Imp <> y:1029 var
R89865:89865 Coq.Init.Datatypes <> O constr
R90044:90052 Coq.Arith.Plus <> plus_is_O thm
R90044:90052 Coq.Arith.Plus <> plus_is_O thm
R90075:90094 PL.Imp Assertion_D term_rename_no_occur thm
R90075:90094 PL.Imp Assertion_D term_rename_no_occur thm
R90075:90094 PL.Imp Assertion_D term_rename_no_occur thm
R90121:90140 PL.Imp Assertion_D term_rename_no_occur thm
R90121:90140 PL.Imp Assertion_D term_rename_no_occur thm
R90121:90140 PL.Imp Assertion_D term_rename_no_occur thm
R90173:90181 Coq.Arith.Plus <> plus_is_O thm
R90173:90181 Coq.Arith.Plus <> plus_is_O thm
R90204:90223 PL.Imp Assertion_D term_rename_no_occur thm
R90204:90223 PL.Imp Assertion_D term_rename_no_occur thm
R90204:90223 PL.Imp Assertion_D term_rename_no_occur thm
R90250:90269 PL.Imp Assertion_D term_rename_no_occur thm
R90250:90269 PL.Imp Assertion_D term_rename_no_occur thm
R90250:90269 PL.Imp Assertion_D term_rename_no_occur thm
R90302:90310 Coq.Arith.Plus <> plus_is_O thm
R90302:90310 Coq.Arith.Plus <> plus_is_O thm
R90333:90352 PL.Imp Assertion_D term_rename_no_occur thm
R90333:90352 PL.Imp Assertion_D term_rename_no_occur thm
R90333:90352 PL.Imp Assertion_D term_rename_no_occur thm
R90379:90398 PL.Imp Assertion_D term_rename_no_occur thm
R90379:90398 PL.Imp Assertion_D term_rename_no_occur thm
R90379:90398 PL.Imp Assertion_D term_rename_no_occur thm
R90431:90450 PL.Imp Assertion_D bexp_rename_no_occur thm
R90431:90450 PL.Imp Assertion_D bexp_rename_no_occur thm
R90476:90484 Coq.Arith.Plus <> plus_is_O thm
R90476:90484 Coq.Arith.Plus <> plus_is_O thm
R90565:90573 Coq.Arith.Plus <> plus_is_O thm
R90565:90573 Coq.Arith.Plus <> plus_is_O thm
R90654:90662 Coq.Arith.Plus <> plus_is_O thm
R90654:90662 Coq.Arith.Plus <> plus_is_O thm
R90783:90792 Coq.Arith.PeanoNat Nat eq_dec thm
R90783:90792 Coq.Arith.PeanoNat Nat eq_dec thm
R90827:90840 PL.Imp Assertion_D Interp_Lupdate def
R90866:90875 Coq.Arith.PeanoNat Nat eq_dec thm
R90866:90875 Coq.Arith.PeanoNat Nat eq_dec thm
R90964:90964 Coq.Numbers.BinNums <> Z ind
binder 90959:90960 <> v0:1032
R91035:91056 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R91029:91033 PL.Imp Assertion_D :::x_'|=='_x not
R90984:90984 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R90987:90988 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R91028:91028 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R90989:91000 PL.Imp Assertion_D Lassn_update def
R91026:91027 PL.Imp <> v0:1032 var
R91003:91014 PL.Imp Assertion_D Lassn_update def
R91102:91106 PL.Imp Assertion_D :::x_'|=='_x not
R91057:91057 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R91060:91061 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R91101:91101 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R91062:91073 PL.Imp Assertion_D Lassn_update def
R91099:91100 PL.Imp <> v0:1032 var
R91076:91087 PL.Imp Assertion_D Lassn_update def
R90964:90964 Coq.Numbers.BinNums <> Z ind
binder 90959:90960 <> v0:1033
R91035:91056 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R91029:91033 PL.Imp Assertion_D :::x_'|=='_x not
R90984:90984 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R90987:90988 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R91028:91028 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R90989:91000 PL.Imp Assertion_D Lassn_update def
R91026:91027 PL.Imp <> v0:1033 var
R91003:91014 PL.Imp Assertion_D Lassn_update def
R91102:91106 PL.Imp Assertion_D :::x_'|=='_x not
R91057:91057 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R91060:91061 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R91101:91101 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R91062:91073 PL.Imp Assertion_D Lassn_update def
R91099:91100 PL.Imp <> v0:1033 var
R91076:91087 PL.Imp Assertion_D Lassn_update def
R91160:91183 PL.Imp Assertion_D Lassn_update_update_same thm
R91160:91183 PL.Imp Assertion_D Lassn_update_update_same thm
R91220:91243 PL.Imp Assertion_D Lassn_update_update_diff thm
R91220:91243 PL.Imp Assertion_D Lassn_update_update_diff thm
R91284:91305 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R91284:91305 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R91338:91359 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R91338:91359 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R91432:91448 PL.Imp Assertion_D no_occ_satisfies' thm
R91432:91448 PL.Imp Assertion_D no_occ_satisfies' thm
R91546:91559 PL.Imp Assertion_D Interp_Lupdate def
R91585:91594 Coq.Arith.PeanoNat Nat eq_dec thm
R91585:91594 Coq.Arith.PeanoNat Nat eq_dec thm
R91655:91655 Coq.Numbers.BinNums <> Z ind
binder 91650:91651 <> v0:1034
R91727:91748 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R91721:91725 PL.Imp Assertion_D :::x_'|=='_x not
R91675:91675 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R91678:91679 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R91720:91720 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R91680:91691 PL.Imp Assertion_D Lassn_update def
R91718:91719 PL.Imp <> v0:1034 var
R91694:91705 PL.Imp Assertion_D Lassn_update def
R91795:91799 PL.Imp Assertion_D :::x_'|=='_x not
R91749:91749 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R91752:91753 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R91794:91794 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R91754:91765 PL.Imp Assertion_D Lassn_update def
R91792:91793 PL.Imp <> v0:1034 var
R91768:91779 PL.Imp Assertion_D Lassn_update def
R91800:91810 PL.Imp Assertion_D assn_rename def
R91655:91655 Coq.Numbers.BinNums <> Z ind
binder 91650:91651 <> v0:1035
R91727:91748 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R91721:91725 PL.Imp Assertion_D :::x_'|=='_x not
R91675:91675 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R91678:91679 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R91720:91720 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R91680:91691 PL.Imp Assertion_D Lassn_update def
R91718:91719 PL.Imp <> v0:1035 var
R91694:91705 PL.Imp Assertion_D Lassn_update def
R91795:91799 PL.Imp Assertion_D :::x_'|=='_x not
R91749:91749 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R91752:91753 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R91794:91794 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R91754:91765 PL.Imp Assertion_D Lassn_update def
R91792:91793 PL.Imp <> v0:1035 var
R91768:91779 PL.Imp Assertion_D Lassn_update def
R91800:91810 PL.Imp Assertion_D assn_rename def
R91869:91892 PL.Imp Assertion_D Lassn_update_update_diff thm
R91869:91892 PL.Imp Assertion_D Lassn_update_update_diff thm
R91934:91957 PL.Imp Assertion_D Lassn_update_update_diff thm
R91934:91957 PL.Imp Assertion_D Lassn_update_update_diff thm
R92000:92021 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R92000:92021 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R92054:92075 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R92082:92092 PL.Imp Assertion_D assn_rename def
R92054:92075 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R92082:92092 PL.Imp Assertion_D assn_rename def
R92234:92243 Coq.Arith.PeanoNat Nat eq_dec thm
R92234:92243 Coq.Arith.PeanoNat Nat eq_dec thm
R92278:92291 PL.Imp Assertion_D Interp_Lupdate def
R92317:92326 Coq.Arith.PeanoNat Nat eq_dec thm
R92317:92326 Coq.Arith.PeanoNat Nat eq_dec thm
R92415:92415 Coq.Numbers.BinNums <> Z ind
binder 92410:92411 <> v0:1036
R92486:92507 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R92480:92484 PL.Imp Assertion_D :::x_'|=='_x not
R92435:92435 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R92438:92439 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R92479:92479 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R92440:92451 PL.Imp Assertion_D Lassn_update def
R92477:92478 PL.Imp <> v0:1036 var
R92454:92465 PL.Imp Assertion_D Lassn_update def
R92553:92557 PL.Imp Assertion_D :::x_'|=='_x not
R92508:92508 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R92511:92512 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R92552:92552 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R92513:92524 PL.Imp Assertion_D Lassn_update def
R92550:92551 PL.Imp <> v0:1036 var
R92527:92538 PL.Imp Assertion_D Lassn_update def
R92415:92415 Coq.Numbers.BinNums <> Z ind
binder 92410:92411 <> v0:1037
R92486:92507 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R92480:92484 PL.Imp Assertion_D :::x_'|=='_x not
R92435:92435 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R92438:92439 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R92479:92479 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R92440:92451 PL.Imp Assertion_D Lassn_update def
R92477:92478 PL.Imp <> v0:1037 var
R92454:92465 PL.Imp Assertion_D Lassn_update def
R92553:92557 PL.Imp Assertion_D :::x_'|=='_x not
R92508:92508 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R92511:92512 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R92552:92552 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R92513:92524 PL.Imp Assertion_D Lassn_update def
R92550:92551 PL.Imp <> v0:1037 var
R92527:92538 PL.Imp Assertion_D Lassn_update def
R92611:92634 PL.Imp Assertion_D Lassn_update_update_same thm
R92611:92634 PL.Imp Assertion_D Lassn_update_update_same thm
R92671:92694 PL.Imp Assertion_D Lassn_update_update_diff thm
R92671:92694 PL.Imp Assertion_D Lassn_update_update_diff thm
R92735:92756 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R92735:92756 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R92789:92810 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R92789:92810 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R92883:92899 PL.Imp Assertion_D no_occ_satisfies' thm
R92883:92899 PL.Imp Assertion_D no_occ_satisfies' thm
R92997:93010 PL.Imp Assertion_D Interp_Lupdate def
R93036:93045 Coq.Arith.PeanoNat Nat eq_dec thm
R93036:93045 Coq.Arith.PeanoNat Nat eq_dec thm
R93106:93106 Coq.Numbers.BinNums <> Z ind
binder 93101:93102 <> v0:1038
R93178:93199 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R93172:93176 PL.Imp Assertion_D :::x_'|=='_x not
R93126:93126 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R93129:93130 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R93171:93171 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R93131:93142 PL.Imp Assertion_D Lassn_update def
R93169:93170 PL.Imp <> v0:1038 var
R93145:93156 PL.Imp Assertion_D Lassn_update def
R93246:93250 PL.Imp Assertion_D :::x_'|=='_x not
R93200:93200 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R93203:93204 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R93245:93245 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R93205:93216 PL.Imp Assertion_D Lassn_update def
R93243:93244 PL.Imp <> v0:1038 var
R93219:93230 PL.Imp Assertion_D Lassn_update def
R93251:93261 PL.Imp Assertion_D assn_rename def
R93106:93106 Coq.Numbers.BinNums <> Z ind
binder 93101:93102 <> v0:1039
R93178:93199 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R93172:93176 PL.Imp Assertion_D :::x_'|=='_x not
R93126:93126 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R93129:93130 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R93171:93171 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R93131:93142 PL.Imp Assertion_D Lassn_update def
R93169:93170 PL.Imp <> v0:1039 var
R93145:93156 PL.Imp Assertion_D Lassn_update def
R93246:93250 PL.Imp Assertion_D :::x_'|=='_x not
R93200:93200 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R93203:93204 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R93245:93245 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R93205:93216 PL.Imp Assertion_D Lassn_update def
R93243:93244 PL.Imp <> v0:1039 var
R93219:93230 PL.Imp Assertion_D Lassn_update def
R93251:93261 PL.Imp Assertion_D assn_rename def
R93320:93343 PL.Imp Assertion_D Lassn_update_update_diff thm
R93320:93343 PL.Imp Assertion_D Lassn_update_update_diff thm
R93385:93408 PL.Imp Assertion_D Lassn_update_update_diff thm
R93385:93408 PL.Imp Assertion_D Lassn_update_update_diff thm
R93451:93472 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R93451:93472 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R93505:93526 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R93533:93543 PL.Imp Assertion_D assn_rename def
R93505:93526 PL.Imp Assertion_D satisfies_Interp_Equiv thm
R93533:93543 PL.Imp Assertion_D assn_rename def
prf 93683:93697 Assertion_D rename_all_spec
binder 93707:93708 <> st:1040
binder 93710:93711 <> La:1041
binder 93713:93713 <> E:1042
binder 93715:93715 <> P:1043
R93734:93740 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R93728:93732 PL.Imp Assertion_D :::x_'|=='_x not
R93720:93720 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R93723:93724 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R93727:93727 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R93721:93722 PL.Imp <> st:1040 var
R93725:93726 PL.Imp <> La:1041 var
R93733:93733 PL.Imp <> P:1043 var
R93749:93753 PL.Imp Assertion_D :::x_'|=='_x not
R93741:93741 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R93744:93745 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R93748:93748 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R93742:93743 PL.Imp <> st:1040 var
R93746:93747 PL.Imp <> La:1041 var
R93754:93763 PL.Imp Assertion_D rename_all def
R93767:93767 PL.Imp <> P:1043 var
R93765:93765 PL.Imp <> E:1042 var
R94109:94109 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R94157:94175 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R94236:94236 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R94110:94116 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R94122:94123 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R94121:94121 Coq.Numbers.BinNums <> Z ind
binder 94117:94117 <> v:1044
R94151:94155 PL.Imp Assertion_D :::x_'|=='_x not
R94124:94137 PL.Imp Assertion_D Interp_Lupdate def
R94150:94150 PL.Imp <> v:1044 var
R94139:94139 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94142:94143 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94146:94146 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94176:94182 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R94188:94189 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R94187:94187 Coq.Numbers.BinNums <> Z ind
binder 94183:94183 <> v:1045
R94217:94221 PL.Imp Assertion_D :::x_'|=='_x not
R94190:94203 PL.Imp Assertion_D Interp_Lupdate def
R94216:94216 PL.Imp <> v:1045 var
R94205:94205 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94208:94209 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94212:94212 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94222:94231 PL.Imp Assertion_D rename_all def
R94109:94109 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R94157:94175 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R94236:94236 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R94110:94116 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R94122:94123 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R94121:94121 Coq.Numbers.BinNums <> Z ind
binder 94117:94117 <> v:1046
R94151:94155 PL.Imp Assertion_D :::x_'|=='_x not
R94124:94137 PL.Imp Assertion_D Interp_Lupdate def
R94150:94150 PL.Imp <> v:1046 var
R94139:94139 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94142:94143 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94146:94146 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94176:94182 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R94188:94189 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R94187:94187 Coq.Numbers.BinNums <> Z ind
binder 94183:94183 <> v:1047
R94217:94221 PL.Imp Assertion_D :::x_'|=='_x not
R94190:94203 PL.Imp Assertion_D Interp_Lupdate def
R94216:94216 PL.Imp <> v:1047 var
R94205:94205 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94208:94209 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94212:94212 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94222:94231 PL.Imp Assertion_D rename_all def
R94259:94272 PL.Imp Assertion_D Interp_Lupdate def
binder 94303:94303 <> v:1048
R94337:94365 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R94331:94335 PL.Imp Assertion_D :::x_'|=='_x not
R94306:94306 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94309:94310 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94330:94330 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94311:94322 PL.Imp Assertion_D Lassn_update def
R94329:94329 PL.Imp <> v:1048 var
R94391:94395 PL.Imp Assertion_D :::x_'|=='_x not
R94366:94366 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94369:94370 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94390:94390 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94371:94382 PL.Imp Assertion_D Lassn_update def
R94389:94389 PL.Imp <> v:1048 var
R94396:94405 PL.Imp Assertion_D rename_all def
binder 94303:94303 <> v:1049
R94337:94365 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R94331:94335 PL.Imp Assertion_D :::x_'|=='_x not
R94306:94306 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94309:94310 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94330:94330 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94311:94322 PL.Imp Assertion_D Lassn_update def
R94329:94329 PL.Imp <> v:1049 var
R94391:94395 PL.Imp Assertion_D :::x_'|=='_x not
R94366:94366 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94369:94370 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94390:94390 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94371:94382 PL.Imp Assertion_D Lassn_update def
R94389:94389 PL.Imp <> v:1049 var
R94396:94405 PL.Imp Assertion_D rename_all def
R94497:94506 PL.Imp Assertion_D aexp_occur def
R94497:94506 PL.Imp Assertion_D aexp_occur def
R94608:94617 PL.Imp Assertion_D rename_all def
R94608:94617 PL.Imp Assertion_D rename_all def
binder 94671:94671 <> v:1050
R94707:94735 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R94701:94705 PL.Imp Assertion_D :::x_'|=='_x not
R94674:94687 PL.Imp Assertion_D Interp_Lupdate def
R94700:94700 PL.Imp <> v:1050 var
R94689:94689 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94692:94693 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94696:94696 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94775:94779 PL.Imp Assertion_D :::x_'|=='_x not
R94736:94749 PL.Imp Assertion_D Interp_Lupdate def
R94774:94774 PL.Imp <> v:1050 var
R94761:94767 PL.Imp Assertion_D new_var def
R94751:94751 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94754:94755 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94758:94758 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94780:94790 PL.Imp Assertion_D assn_rename def
R94795:94801 PL.Imp Assertion_D new_var def
binder 94671:94671 <> v:1051
R94707:94735 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R94701:94705 PL.Imp Assertion_D :::x_'|=='_x not
R94674:94687 PL.Imp Assertion_D Interp_Lupdate def
R94700:94700 PL.Imp <> v:1051 var
R94689:94689 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94692:94693 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94696:94696 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94775:94779 PL.Imp Assertion_D :::x_'|=='_x not
R94736:94749 PL.Imp Assertion_D Interp_Lupdate def
R94774:94774 PL.Imp <> v:1051 var
R94761:94767 PL.Imp Assertion_D new_var def
R94751:94751 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94754:94755 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94758:94758 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94780:94790 PL.Imp Assertion_D assn_rename def
R94795:94801 PL.Imp Assertion_D new_var def
R94834:94853 PL.Imp Assertion_D assn_rename_no_occur thm
R94834:94853 PL.Imp Assertion_D assn_rename_no_occur thm
R94862:94876 PL.Imp Assertion_D new_var_occur_l thm
R94862:94876 PL.Imp Assertion_D new_var_occur_l thm
R94911:94911 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R94959:94977 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R95038:95038 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R94923:94923 Coq.Numbers.BinNums <> Z ind
binder 94919:94919 <> v:1052
R94953:94957 PL.Imp Assertion_D :::x_'|=='_x not
R94926:94939 PL.Imp Assertion_D Interp_Lupdate def
R94952:94952 PL.Imp <> v:1052 var
R94941:94941 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94944:94945 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94948:94948 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94989:94989 Coq.Numbers.BinNums <> Z ind
binder 94985:94985 <> v:1053
R95019:95023 PL.Imp Assertion_D :::x_'|=='_x not
R94992:95005 PL.Imp Assertion_D Interp_Lupdate def
R95018:95018 PL.Imp <> v:1053 var
R95007:95007 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95010:95011 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95014:95014 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95024:95033 PL.Imp Assertion_D rename_all def
R94911:94911 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R94959:94977 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R95038:95038 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R94923:94923 Coq.Numbers.BinNums <> Z ind
binder 94919:94919 <> v:1054
R94953:94957 PL.Imp Assertion_D :::x_'|=='_x not
R94926:94939 PL.Imp Assertion_D Interp_Lupdate def
R94952:94952 PL.Imp <> v:1054 var
R94941:94941 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94944:94945 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94948:94948 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R94989:94989 Coq.Numbers.BinNums <> Z ind
binder 94985:94985 <> v:1055
R95019:95023 PL.Imp Assertion_D :::x_'|=='_x not
R94992:95005 PL.Imp Assertion_D Interp_Lupdate def
R95018:95018 PL.Imp <> v:1055 var
R95007:95007 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95010:95011 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95014:95014 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95024:95033 PL.Imp Assertion_D rename_all def
R95061:95074 PL.Imp Assertion_D Interp_Lupdate def
binder 95105:95105 <> v:1056
R95139:95167 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R95133:95137 PL.Imp Assertion_D :::x_'|=='_x not
R95108:95108 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95111:95112 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95132:95132 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95113:95124 PL.Imp Assertion_D Lassn_update def
R95131:95131 PL.Imp <> v:1056 var
R95193:95197 PL.Imp Assertion_D :::x_'|=='_x not
R95168:95168 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95171:95172 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95192:95192 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95173:95184 PL.Imp Assertion_D Lassn_update def
R95191:95191 PL.Imp <> v:1056 var
R95198:95207 PL.Imp Assertion_D rename_all def
binder 95105:95105 <> v:1057
R95139:95167 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R95133:95137 PL.Imp Assertion_D :::x_'|=='_x not
R95108:95108 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95111:95112 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95132:95132 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95113:95124 PL.Imp Assertion_D Lassn_update def
R95131:95131 PL.Imp <> v:1057 var
R95193:95197 PL.Imp Assertion_D :::x_'|=='_x not
R95168:95168 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95171:95172 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95192:95192 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95173:95184 PL.Imp Assertion_D Lassn_update def
R95191:95191 PL.Imp <> v:1057 var
R95198:95207 PL.Imp Assertion_D rename_all def
R95299:95308 PL.Imp Assertion_D aexp_occur def
R95299:95308 PL.Imp Assertion_D aexp_occur def
R95410:95419 PL.Imp Assertion_D rename_all def
R95410:95419 PL.Imp Assertion_D rename_all def
binder 95473:95473 <> v:1058
R95509:95537 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R95503:95507 PL.Imp Assertion_D :::x_'|=='_x not
R95476:95489 PL.Imp Assertion_D Interp_Lupdate def
R95502:95502 PL.Imp <> v:1058 var
R95491:95491 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95494:95495 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95498:95498 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95577:95581 PL.Imp Assertion_D :::x_'|=='_x not
R95538:95551 PL.Imp Assertion_D Interp_Lupdate def
R95576:95576 PL.Imp <> v:1058 var
R95563:95569 PL.Imp Assertion_D new_var def
R95553:95553 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95556:95557 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95560:95560 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95582:95592 PL.Imp Assertion_D assn_rename def
R95597:95603 PL.Imp Assertion_D new_var def
binder 95473:95473 <> v:1059
R95509:95537 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R95503:95507 PL.Imp Assertion_D :::x_'|=='_x not
R95476:95489 PL.Imp Assertion_D Interp_Lupdate def
R95502:95502 PL.Imp <> v:1059 var
R95491:95491 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95494:95495 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95498:95498 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95577:95581 PL.Imp Assertion_D :::x_'|=='_x not
R95538:95551 PL.Imp Assertion_D Interp_Lupdate def
R95576:95576 PL.Imp <> v:1059 var
R95563:95569 PL.Imp Assertion_D new_var def
R95553:95553 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95556:95557 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95560:95560 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R95582:95592 PL.Imp Assertion_D assn_rename def
R95597:95603 PL.Imp Assertion_D new_var def
R95636:95655 PL.Imp Assertion_D assn_rename_no_occur thm
R95636:95655 PL.Imp Assertion_D assn_rename_no_occur thm
R95664:95678 PL.Imp Assertion_D new_var_occur_l thm
R95664:95678 PL.Imp Assertion_D new_var_occur_l thm
prf 95713:95735 Assertion_D rename_preserves_safety
binder 95745:95745 <> x:1060
binder 95747:95747 <> y:1061
binder 95749:95749 <> E:1062
binder 95751:95751 <> P:1063
R95774:95779 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R95798:95803 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R95804:95817 PL.Imp Assertion_D naive_sub_safe def
R95822:95832 PL.Imp Assertion_D assn_rename def
R95838:95838 PL.Imp <> P:1063 var
R95836:95836 PL.Imp <> y:1061 var
R95834:95834 PL.Imp <> x:1060 var
R95819:95819 PL.Imp <> E:1062 var
R95794:95796 Coq.Init.Logic <> ::type_scope:x_'='_x not
R95780:95789 PL.Imp Assertion_D aexp_occur def
R95793:95793 PL.Imp <> E:1062 var
R95791:95791 PL.Imp <> y:1061 var
R95797:95797 Coq.Init.Datatypes <> O constr
R95756:95769 PL.Imp Assertion_D naive_sub_safe def
R95773:95773 PL.Imp <> P:1063 var
R95771:95771 PL.Imp <> E:1062 var
R95995:96004 Coq.Arith.PeanoNat Nat eq_dec thm
R95995:96004 Coq.Arith.PeanoNat Nat eq_dec thm
R96060:96069 Coq.Arith.PeanoNat Nat eq_dec thm
R96060:96069 Coq.Arith.PeanoNat Nat eq_dec thm
prf 96123:96137 Assertion_D rename_all_safe
binder 96147:96147 <> E:1064
binder 96149:96149 <> P:1065
R96154:96167 PL.Imp Assertion_D naive_sub_safe def
R96172:96181 PL.Imp Assertion_D rename_all def
R96185:96185 PL.Imp <> P:1065 var
R96183:96183 PL.Imp <> E:1064 var
R96169:96169 PL.Imp <> E:1064 var
R96330:96339 PL.Imp Assertion_D aexp_occur def
R96330:96339 PL.Imp Assertion_D aexp_occur def
R96401:96415 PL.Imp Assertion_D new_var_occur_r thm
R96401:96415 PL.Imp Assertion_D new_var_occur_r thm
R96432:96454 PL.Imp Assertion_D rename_preserves_safety thm
R96432:96454 PL.Imp Assertion_D rename_preserves_safety thm
R96494:96508 PL.Imp Assertion_D new_var_occur_r thm
R96494:96508 PL.Imp Assertion_D new_var_occur_r thm
R96525:96534 PL.Imp Assertion_D aexp_occur def
R96525:96534 PL.Imp Assertion_D aexp_occur def
R96596:96610 PL.Imp Assertion_D new_var_occur_r thm
R96596:96610 PL.Imp Assertion_D new_var_occur_r thm
R96627:96649 PL.Imp Assertion_D rename_preserves_safety thm
R96627:96649 PL.Imp Assertion_D rename_preserves_safety thm
R96689:96703 PL.Imp Assertion_D new_var_occur_r thm
R96689:96703 PL.Imp Assertion_D new_var_occur_r thm
prf 96718:96731 Assertion_D naive_sub_spec
binder 96741:96743 <> st1:1066
binder 96745:96747 <> st2:1067
binder 96749:96750 <> La:1068
R96756:96764 PL.Imp Assertion_D Assertion ind
binder 96753:96753 <> P:1069
R96771:96773 PL.Imp <> var def
binder 96768:96768 <> X:1070
R96780:96784 PL.Imp Assertion_D aexp' ind
binder 96777:96777 <> E:1071
R96795:96808 PL.Imp Assertion_D naive_sub_safe def
R96812:96812 PL.Imp <> P:1069 var
R96810:96810 PL.Imp <> E:1071 var
binder 96790:96792 <> NSS:1072
R96850:96855 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R96856:96856 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R96896:96902 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R96903:96903 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R96933:96939 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R96955:96955 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R96913:96917 PL.Imp Assertion_D :::x_'|=='_x not
R96904:96904 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R96908:96909 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R96912:96912 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R96905:96907 PL.Imp <> st1:1066 var
R96910:96911 PL.Imp <> La:1068 var
R96918:96926 PL.Imp Assertion_D naive_sub def
R96932:96932 PL.Imp <> P:1069 var
R96930:96930 PL.Imp <> E:1071 var
R96928:96928 PL.Imp <> X:1070 var
R96949:96953 PL.Imp Assertion_D :::x_'|=='_x not
R96940:96940 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R96944:96945 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R96948:96948 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R96941:96943 PL.Imp <> st2:1067 var
R96946:96947 PL.Imp <> La:1068 var
R96954:96954 PL.Imp <> P:1069 var
R96868:96870 PL.Imp <> var def
binder 96864:96864 <> Y:1073
R96879:96882 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R96888:96890 Coq.Init.Logic <> ::type_scope:x_'='_x not
R96883:96885 PL.Imp <> st1:1066 var
R96887:96887 PL.Imp <> Y:1073 var
R96891:96893 PL.Imp <> st2:1067 var
R96895:96895 PL.Imp <> Y:1073 var
R96874:96877 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R96873:96873 PL.Imp <> X:1070 var
R96878:96878 PL.Imp <> Y:1073 var
R96823:96825 Coq.Init.Logic <> ::type_scope:x_'='_x not
R96818:96820 PL.Imp <> st2:1067 var
R96822:96822 PL.Imp <> X:1070 var
R96826:96837 PL.Imp Assertion_D aexp'_denote def
R96849:96849 PL.Imp <> E:1071 var
R96839:96839 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R96843:96844 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R96847:96847 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R96840:96842 PL.Imp <> st1:1066 var
R96845:96846 PL.Imp <> La:1068 var
R97040:97052 PL.Imp Assertion_D term_sub_spec thm
R97040:97052 PL.Imp Assertion_D term_sub_spec thm
R97088:97100 PL.Imp Assertion_D term_sub_spec thm
R97088:97100 PL.Imp Assertion_D term_sub_spec thm
R97167:97179 PL.Imp Assertion_D term_sub_spec thm
R97167:97179 PL.Imp Assertion_D term_sub_spec thm
R97215:97227 PL.Imp Assertion_D term_sub_spec thm
R97215:97227 PL.Imp Assertion_D term_sub_spec thm
R97294:97306 PL.Imp Assertion_D term_sub_spec thm
R97294:97306 PL.Imp Assertion_D term_sub_spec thm
R97342:97354 PL.Imp Assertion_D term_sub_spec thm
R97342:97354 PL.Imp Assertion_D term_sub_spec thm
R97421:97433 PL.Imp Assertion_D bexp_sub_spec thm
R97421:97433 PL.Imp Assertion_D bexp_sub_spec thm
R97735:97748 PL.Imp Assertion_D Interp_Lupdate def
binder 97808:97808 <> v:1074
R97816:97818 Coq.Init.Logic <> ::type_scope:x_'='_x not
R97819:97830 PL.Imp Assertion_D aexp'_denote def
R97832:97832 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R97836:97837 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R97857:97857 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R97838:97849 PL.Imp Assertion_D Lassn_update def
R97856:97856 PL.Imp <> v:1074 var
binder 97808:97808 <> v:1075
R97816:97818 Coq.Init.Logic <> ::type_scope:x_'='_x not
R97819:97830 PL.Imp Assertion_D aexp'_denote def
R97832:97832 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R97836:97837 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R97857:97857 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R97838:97849 PL.Imp Assertion_D Lassn_update def
R97856:97856 PL.Imp <> v:1075 var
R97912:97930 PL.Imp Assertion_D no_occ_aexp'_denote thm
R97912:97930 PL.Imp Assertion_D no_occ_aexp'_denote thm
R98222:98235 PL.Imp Assertion_D Interp_Lupdate def
binder 98295:98295 <> v:1076
R98303:98305 Coq.Init.Logic <> ::type_scope:x_'='_x not
R98306:98317 PL.Imp Assertion_D aexp'_denote def
R98319:98319 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R98323:98324 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R98344:98344 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R98325:98336 PL.Imp Assertion_D Lassn_update def
R98343:98343 PL.Imp <> v:1076 var
binder 98295:98295 <> v:1077
R98303:98305 Coq.Init.Logic <> ::type_scope:x_'='_x not
R98306:98317 PL.Imp Assertion_D aexp'_denote def
R98319:98319 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R98323:98324 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R98344:98344 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R98325:98336 PL.Imp Assertion_D Lassn_update def
R98343:98343 PL.Imp <> v:1077 var
R98399:98417 PL.Imp Assertion_D no_occ_aexp'_denote thm
R98399:98417 PL.Imp Assertion_D no_occ_aexp'_denote thm
prf 98672:98689 Assertion_D Assertion_sub_spec
binder 98699:98701 <> st1:1078
binder 98703:98705 <> st2:1079
binder 98707:98708 <> La:1080
R98714:98722 PL.Imp Assertion_D Assertion ind
binder 98711:98711 <> P:1081
R98729:98731 PL.Imp <> var def
binder 98726:98726 <> X:1082
R98738:98742 PL.Imp Assertion_D aexp' ind
binder 98735:98735 <> E:1083
R98780:98785 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R98786:98786 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R98826:98832 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R98833:98833 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R98859:98865 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R98881:98881 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R98843:98847 PL.Imp Assertion_D :::x_'|=='_x not
R98834:98834 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R98838:98839 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R98842:98842 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R98835:98837 PL.Imp <> st1:1078 var
R98840:98841 PL.Imp <> La:1080 var
R98849:98850 PL.Imp Assertion_D ::assert_scope:x_'['_x_'|->'_x_']' not
R98852:98856 PL.Imp Assertion_D ::assert_scope:x_'['_x_'|->'_x_']' not
R98858:98858 PL.Imp Assertion_D ::assert_scope:x_'['_x_'|->'_x_']' not
R98851:98851 PL.Imp <> X:1082 var
R98857:98857 PL.Imp <> E:1083 var
R98848:98848 PL.Imp <> P:1081 var
R98875:98879 PL.Imp Assertion_D :::x_'|=='_x not
R98866:98866 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R98870:98871 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R98874:98874 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R98867:98869 PL.Imp <> st2:1079 var
R98872:98873 PL.Imp <> La:1080 var
R98880:98880 PL.Imp <> P:1081 var
R98798:98800 PL.Imp <> var def
binder 98794:98794 <> Y:1084
R98809:98812 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R98818:98820 Coq.Init.Logic <> ::type_scope:x_'='_x not
R98813:98815 PL.Imp <> st1:1078 var
R98817:98817 PL.Imp <> Y:1084 var
R98821:98823 PL.Imp <> st2:1079 var
R98825:98825 PL.Imp <> Y:1084 var
R98804:98807 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R98803:98803 PL.Imp <> X:1082 var
R98808:98808 PL.Imp <> Y:1084 var
R98753:98755 Coq.Init.Logic <> ::type_scope:x_'='_x not
R98748:98750 PL.Imp <> st2:1079 var
R98752:98752 PL.Imp <> X:1082 var
R98756:98767 PL.Imp Assertion_D aexp'_denote def
R98779:98779 PL.Imp <> E:1083 var
R98769:98769 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R98773:98774 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R98777:98777 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R98770:98772 PL.Imp <> st1:1078 var
R98775:98776 PL.Imp <> La:1080 var
R98910:98917 PL.Imp Assertion_D assn_sub def
R98933:98947 PL.Imp Assertion_D rename_all_spec thm
R98933:98947 PL.Imp Assertion_D rename_all_spec thm
R98974:98988 PL.Imp Assertion_D rename_all_safe thm
R98974:98988 PL.Imp Assertion_D rename_all_safe thm
R99031:99040 PL.Imp Assertion_D rename_all def
R99031:99040 PL.Imp Assertion_D rename_all def
R99077:99090 PL.Imp Assertion_D naive_sub_spec thm
R99077:99090 PL.Imp Assertion_D naive_sub_spec thm
R99110:99120 PL.Imp Assertion_D <> mod
mod 99131:99146 <> Admissable_Rules
def 99182:99190 Admissable_Rules FOL_valid
R99196:99204 PL.Imp Assertion_D Assertion ind
binder 99193:99193 <> P:1085
R99228:99233 PL.Imp Assertion_D Interp def
binder 99225:99225 <> J:1086
R99237:99241 PL.Imp Assertion_D :::x_'|=='_x not
R99236:99236 PL.Imp <> J:1086 var
R99242:99242 PL.Imp <> P:1085 var
ind 99252:99260 Admissable_Rules FOL_sound
constr 99294:99306 Admissable_Rules FOL_soundness
rec 99252:99260 Admissable_Rules FOL_sound
proj 99294:99306 Admissable_Rules FOL_soundness
R99266:99280 PL.Imp Assertion_D FirstOrderLogic class
binder 99263:99263 <> T:1087
R99319:99327 PL.Imp Assertion_D Assertion ind
binder 99316:99316 <> P:1089
R99344:99347 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R99348:99356 PL.Imp Admissable_Rules FOL_valid def
R99358:99358 PL.Imp <> P:1089 var
R99330:99341 PL.Imp Assertion_D FOL_provable meth
R99343:99343 PL.Imp <> P:1089 var
ind 99368:99379 Admissable_Rules FOL_complete
constr 99413:99427 Admissable_Rules FOL_completenss
rec 99368:99379 Admissable_Rules FOL_complete
proj 99413:99427 Admissable_Rules FOL_completenss
R99385:99399 PL.Imp Assertion_D FirstOrderLogic class
binder 99382:99382 <> T:1091
R99440:99448 PL.Imp Assertion_D Assertion ind
binder 99437:99437 <> P:1093
R99462:99465 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R99466:99477 PL.Imp Assertion_D FOL_provable meth
R99479:99479 PL.Imp <> P:1093 var
R99451:99459 PL.Imp Admissable_Rules FOL_valid def
R99461:99461 PL.Imp <> P:1093 var
sec 99491:99493 Admissable_Rules Der
R99509:99523 PL.Imp Assertion_D FirstOrderLogic class
binder 99506:99506 <> T:1095
R99544:99552 PL.Imp Admissable_Rules FOL_sound class
R99554:99554 PL.Imp <> T:1095 var
binder 99535:99541 <> T_sound:1096
R99578:99589 PL.Imp Admissable_Rules FOL_complete class
R99591:99591 PL.Imp <> T:1095 var
binder 99566:99575 <> T_complete:1097
prf 99604:99626 Admissable_Rules TrivialFOL_complete_der
binder 99636:99636 <> P:1098
binder 99638:99638 <> Q:1099
R99664:99669 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R99671:99675 PL.Imp Assertion_D :::x_'|--'_x not
R99670:99670 PL.Imp <> P:1098 var
R99676:99676 PL.Imp <> Q:1099 var
R99643:99651 PL.Imp Admissable_Rules FOL_valid def
R99655:99661 PL.Imp Assertion_D ::assert_scope:x_'IMPLY'_x not
R99654:99654 PL.Imp <> P:1098 var
R99662:99662 PL.Imp <> Q:1099 var
R99704:99713 PL.Imp <> Admissable_Rules.Der.T_complete var
R99704:99713 PL.Imp <> Admissable_Rules.Der.T_complete var
prf 99733:99752 Admissable_Rules TrivialFOL_sound_der
binder 99762:99762 <> P:1100
binder 99764:99764 <> Q:1101
R99776:99781 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R99782:99790 PL.Imp Admissable_Rules FOL_valid def
R99794:99800 PL.Imp Assertion_D ::assert_scope:x_'IMPLY'_x not
R99793:99793 PL.Imp <> P:1100 var
R99801:99801 PL.Imp <> Q:1101 var
R99770:99774 PL.Imp Assertion_D :::x_'|--'_x not
R99769:99769 PL.Imp <> P:1100 var
R99775:99775 PL.Imp <> Q:1101 var
R99830:99836 PL.Imp <> Admissable_Rules.Der.T_sound var
R99830:99836 PL.Imp <> Admissable_Rules.Der.T_sound var
prf 99856:99867 Admissable_Rules derives_refl
binder 99877:99877 <> P:1102
R99881:99885 PL.Imp Assertion_D :::x_'|--'_x not
R99880:99880 PL.Imp <> P:1102 var
R99886:99886 PL.Imp <> P:1102 var
R99914:99936 PL.Imp Admissable_Rules TrivialFOL_complete_der thm
R99914:99936 PL.Imp Admissable_Rules TrivialFOL_complete_der thm
R99948:99956 PL.Imp Admissable_Rules FOL_valid def
prf 100001:100013 Admissable_Rules derives_trans
binder 100023:100023 <> P:1103
binder 100025:100025 <> Q:1104
binder 100027:100027 <> R:1105
R100037:100040 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R100048:100051 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R100053:100057 PL.Imp Assertion_D :::x_'|--'_x not
R100052:100052 PL.Imp <> P:1103 var
R100058:100058 PL.Imp <> R:1105 var
R100042:100046 PL.Imp Assertion_D :::x_'|--'_x not
R100041:100041 PL.Imp <> Q:1104 var
R100047:100047 PL.Imp <> R:1105 var
R100031:100035 PL.Imp Assertion_D :::x_'|--'_x not
R100030:100030 PL.Imp <> P:1103 var
R100036:100036 PL.Imp <> Q:1104 var
R100086:100108 PL.Imp Admissable_Rules TrivialFOL_complete_der thm
R100086:100108 PL.Imp Admissable_Rules TrivialFOL_complete_der thm
R100119:100138 PL.Imp Admissable_Rules TrivialFOL_sound_der thm
R100119:100138 PL.Imp Admissable_Rules TrivialFOL_sound_der thm
R100154:100173 PL.Imp Admissable_Rules TrivialFOL_sound_der thm
R100154:100173 PL.Imp Admissable_Rules TrivialFOL_sound_der thm
R100191:100199 PL.Imp Admissable_Rules FOL_valid def
prf 100304:100314 Admissable_Rules AND_derives
binder 100324:100325 <> P1:1106
binder 100327:100328 <> Q1:1107
binder 100330:100331 <> P2:1108
binder 100333:100334 <> Q2:1109
R100348:100353 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R100363:100368 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R100378:100382 PL.Imp Assertion_D :::x_'|--'_x not
R100371:100375 PL.Imp Assertion_D ::assert_scope:x_'AND'_x not
R100369:100370 PL.Imp <> P1:1106 var
R100376:100377 PL.Imp <> Q1:1107 var
R100385:100389 PL.Imp Assertion_D ::assert_scope:x_'AND'_x not
R100383:100384 PL.Imp <> P2:1108 var
R100390:100391 PL.Imp <> Q2:1109 var
R100356:100360 PL.Imp Assertion_D :::x_'|--'_x not
R100354:100355 PL.Imp <> Q1:1107 var
R100361:100362 PL.Imp <> Q2:1109 var
R100341:100345 PL.Imp Assertion_D :::x_'|--'_x not
R100339:100340 PL.Imp <> P1:1106 var
R100346:100347 PL.Imp <> P2:1108 var
R100419:100441 PL.Imp Admissable_Rules TrivialFOL_complete_der thm
R100419:100441 PL.Imp Admissable_Rules TrivialFOL_complete_der thm
R100452:100471 PL.Imp Admissable_Rules TrivialFOL_sound_der thm
R100452:100471 PL.Imp Admissable_Rules TrivialFOL_sound_der thm
R100487:100506 PL.Imp Admissable_Rules TrivialFOL_sound_der thm
R100487:100506 PL.Imp Admissable_Rules TrivialFOL_sound_der thm
R100524:100532 PL.Imp Admissable_Rules FOL_valid def
R100544:100552 PL.Imp Admissable_Rules FOL_valid def
R100569:100577 PL.Imp Admissable_Rules FOL_valid def
prf 100696:100716 Admissable_Rules hoare_consequence_pre
binder 100726:100726 <> P:1110
binder 100728:100729 <> P':1111
binder 100731:100731 <> c:1112
binder 100733:100733 <> Q:1113
R100746:100751 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R100774:100779 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R100780:100783 PL.Imp Assertion_D :::'|--'_x not
R100784:100786 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R100788:100791 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R100793:100796 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R100798:100800 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R100787:100787 PL.Imp <> P:1110 var
R100792:100792 PL.Imp <> c:1112 var
R100797:100797 PL.Imp <> Q:1113 var
R100752:100755 PL.Imp Assertion_D :::'|--'_x not
R100756:100758 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R100761:100764 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R100766:100769 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R100771:100773 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R100759:100760 PL.Imp <> P':1111 var
R100765:100765 PL.Imp <> c:1112 var
R100770:100770 PL.Imp <> Q:1113 var
R100739:100743 PL.Imp Assertion_D :::x_'|--'_x not
R100738:100738 PL.Imp <> P:1110 var
R100744:100745 PL.Imp <> P':1111 var
R100829:100845 PL.Imp Assertion_D hoare_consequence constr
R100829:100845 PL.Imp Assertion_D hoare_consequence constr
R100885:100896 PL.Imp Admissable_Rules derives_refl thm
R100885:100896 PL.Imp Admissable_Rules derives_refl thm
prf 100911:100932 Admissable_Rules hoare_consequence_post
binder 100942:100942 <> P:1114
binder 100944:100944 <> c:1115
binder 100946:100946 <> Q:1116
binder 100948:100949 <> Q':1117
R100976:100981 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R100990:100995 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R100996:100999 PL.Imp Assertion_D :::'|--'_x not
R101000:101002 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101004:101007 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101009:101012 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101014:101016 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101003:101003 PL.Imp <> P:1114 var
R101008:101008 PL.Imp <> c:1115 var
R101013:101013 PL.Imp <> Q:1116 var
R100984:100988 PL.Imp Assertion_D :::x_'|--'_x not
R100982:100983 PL.Imp <> Q':1117 var
R100989:100989 PL.Imp <> Q:1116 var
R100954:100957 PL.Imp Assertion_D :::'|--'_x not
R100958:100960 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R100962:100965 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R100967:100970 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R100973:100975 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R100961:100961 PL.Imp <> P:1114 var
R100966:100966 PL.Imp <> c:1115 var
R100971:100972 PL.Imp <> Q':1117 var
R101045:101061 PL.Imp Assertion_D hoare_consequence constr
R101045:101061 PL.Imp Assertion_D hoare_consequence constr
R101074:101085 PL.Imp Admissable_Rules derives_refl thm
R101074:101085 PL.Imp Admissable_Rules derives_refl thm
prf 101127:101140 Admissable_Rules hoare_skip_inv
binder 101150:101150 <> P:1118
binder 101152:101152 <> Q:1119
R101177:101182 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R101184:101188 PL.Imp Assertion_D :::x_'|--'_x not
R101183:101183 PL.Imp <> P:1118 var
R101189:101189 PL.Imp <> Q:1119 var
R101157:101160 PL.Imp Assertion_D :::'|--'_x not
R101161:101162 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101164:101166 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101171:101173 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101175:101176 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101163:101163 PL.Imp <> P:1118 var
R101167:101170 PL.Imp <> ::imp_scope:'Skip' not
R101174:101174 PL.Imp <> Q:1119 var
R101223:101224 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101226:101228 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101233:101235 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101237:101238 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101229:101232 PL.Imp <> ::imp_scope:'Skip' not
R101223:101224 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101226:101228 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101233:101235 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101237:101238 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101229:101232 PL.Imp <> ::imp_scope:'Skip' not
R101356:101367 PL.Imp Admissable_Rules derives_refl thm
R101356:101367 PL.Imp Admissable_Rules derives_refl thm
R101478:101490 PL.Imp Admissable_Rules derives_trans thm
R101478:101490 PL.Imp Admissable_Rules derives_trans thm
R101517:101529 PL.Imp Admissable_Rules derives_trans thm
R101517:101529 PL.Imp Admissable_Rules derives_trans thm
prf 101593:101605 Admissable_Rules hoare_seq_inv
binder 101615:101615 <> P:1120
binder 101617:101618 <> c1:1121
binder 101620:101621 <> c2:1122
binder 101623:101623 <> R:1123
R101656:101661 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R101662:101668 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R101670:101671 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 101669:101669 <> Q:1124
R101672:101672 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R101695:101700 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R101723:101723 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R101673:101676 PL.Imp Assertion_D :::'|--'_x not
R101677:101679 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101681:101684 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101687:101690 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101692:101694 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101680:101680 PL.Imp <> P:1120 var
R101685:101686 PL.Imp <> c1:1121 var
R101691:101691 PL.Imp <> Q:1124 var
R101701:101704 PL.Imp Assertion_D :::'|--'_x not
R101705:101707 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101709:101712 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101715:101718 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101720:101722 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101708:101708 PL.Imp <> Q:1124 var
R101713:101714 PL.Imp <> c2:1122 var
R101719:101719 PL.Imp <> R:1123 var
R101628:101631 PL.Imp Assertion_D :::'|--'_x not
R101632:101634 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101636:101639 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101648:101651 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101653:101655 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101635:101635 PL.Imp <> P:1120 var
R101642:101645 PL.Imp <> ::imp_scope:x_';;'_x not
R101640:101641 PL.Imp <> c1:1121 var
R101646:101647 PL.Imp <> c2:1122 var
R101652:101652 PL.Imp <> R:1123 var
R101755:101756 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101758:101760 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101768:101770 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101772:101773 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101763:101765 PL.Imp <> ::imp_scope:x_';;'_x not
R101755:101756 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101758:101760 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101768:101770 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101772:101773 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R101763:101765 PL.Imp <> ::imp_scope:x_';;'_x not
R102043:102043 Coq.Init.Logic <> ::type_scope:x_'='_x not
R102065:102069 Coq.Init.Logic <> ::type_scope:x_'='_x not
R102091:102091 Coq.Init.Logic <> ::type_scope:x_'='_x not
R102044:102045 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102048:102050 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102058:102060 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102063:102064 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102053:102055 PL.Imp <> ::imp_scope:x_';;'_x not
R102070:102071 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102074:102076 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102084:102086 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102089:102090 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102079:102081 PL.Imp <> ::imp_scope:x_';;'_x not
R102043:102043 Coq.Init.Logic <> ::type_scope:x_'='_x not
R102065:102069 Coq.Init.Logic <> ::type_scope:x_'='_x not
R102091:102091 Coq.Init.Logic <> ::type_scope:x_'='_x not
R102044:102045 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102048:102050 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102058:102060 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102063:102064 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102053:102055 PL.Imp <> ::imp_scope:x_';;'_x not
R102070:102071 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102074:102076 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102084:102086 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102089:102090 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102079:102081 PL.Imp <> ::imp_scope:x_';;'_x not
R102240:102260 PL.Imp Admissable_Rules hoare_consequence_pre thm
R102240:102260 PL.Imp Admissable_Rules hoare_consequence_pre thm
R102311:102332 PL.Imp Admissable_Rules hoare_consequence_post thm
R102311:102332 PL.Imp Admissable_Rules hoare_consequence_post thm
prf 102383:102395 Admissable_Rules seq_assoc_der
binder 102405:102405 <> P:1125
binder 102407:102408 <> c1:1126
binder 102410:102411 <> c2:1127
binder 102413:102414 <> c3:1128
binder 102416:102416 <> Q:1129
R102455:102461 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R102421:102424 PL.Imp Assertion_D :::'|--'_x not
R102425:102427 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102429:102432 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102447:102450 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102452:102454 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102428:102428 PL.Imp <> P:1125 var
R102435:102438 PL.Imp <> ::imp_scope:x_';;'_x not
R102433:102434 PL.Imp <> c1:1126 var
R102441:102444 PL.Imp <> ::imp_scope:x_';;'_x not
R102439:102440 PL.Imp <> c2:1127 var
R102445:102446 PL.Imp <> c3:1128 var
R102451:102451 PL.Imp <> Q:1129 var
R102462:102465 PL.Imp Assertion_D :::'|--'_x not
R102466:102468 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102470:102473 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102490:102493 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102495:102497 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R102469:102469 PL.Imp <> P:1125 var
R102474:102474 PL.Imp <> ::imp_scope:x_';;'_x not
R102483:102487 PL.Imp <> ::imp_scope:x_';;'_x not
R102477:102480 PL.Imp <> ::imp_scope:x_';;'_x not
R102475:102476 PL.Imp <> c1:1126 var
R102481:102482 PL.Imp <> c2:1127 var
R102488:102489 PL.Imp <> c3:1128 var
R102494:102494 PL.Imp <> Q:1129 var
R102544:102556 PL.Imp Admissable_Rules hoare_seq_inv thm
R102544:102556 PL.Imp Admissable_Rules hoare_seq_inv thm
R102604:102616 PL.Imp Admissable_Rules hoare_seq_inv thm
R102604:102616 PL.Imp Admissable_Rules hoare_seq_inv thm
R102666:102674 PL.Imp Assertion_D hoare_seq constr
R102666:102674 PL.Imp Assertion_D hoare_seq constr
R102697:102705 PL.Imp Assertion_D hoare_seq constr
R102697:102705 PL.Imp Assertion_D hoare_seq constr
R102777:102789 PL.Imp Admissable_Rules hoare_seq_inv thm
R102777:102789 PL.Imp Admissable_Rules hoare_seq_inv thm
R102837:102849 PL.Imp Admissable_Rules hoare_seq_inv thm
R102837:102849 PL.Imp Admissable_Rules hoare_seq_inv thm
R102897:102905 PL.Imp Assertion_D hoare_seq constr
R102897:102905 PL.Imp Assertion_D hoare_seq constr
R102943:102951 PL.Imp Assertion_D hoare_seq constr
R102943:102951 PL.Imp Assertion_D hoare_seq constr
prf 103010:103021 Admissable_Rules hoare_if_inv
binder 103031:103031 <> P:1130
binder 103033:103033 <> b:1131
binder 103035:103036 <> c1:1132
binder 103038:103039 <> c2:1133
binder 103041:103041 <> Q:1134
R103088:103093 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R103094:103094 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R103126:103133 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R103169:103169 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R103095:103098 PL.Imp Assertion_D :::'|--'_x not
R103099:103101 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103114:103117 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103120:103122 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103124:103125 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103103:103108 PL.Imp Assertion_D ::assert_scope:x_'AND'_x not
R103102:103102 PL.Imp <> P:1130 var
R103109:103110 PL.Imp Assertion_D ::assert_scope:'{['_x_']}' not
R103112:103113 PL.Imp Assertion_D ::assert_scope:'{['_x_']}' not
R103111:103111 PL.Imp <> b:1131 var
R103118:103119 PL.Imp <> c1:1132 var
R103123:103123 PL.Imp <> Q:1134 var
R103134:103137 PL.Imp Assertion_D :::'|--'_x not
R103138:103140 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103157:103160 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103163:103165 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103167:103168 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103142:103147 PL.Imp Assertion_D ::assert_scope:x_'AND'_x not
R103141:103141 PL.Imp <> P:1130 var
R103148:103151 PL.Imp Assertion_D ::assert_scope:'NOT'_x not
R103152:103153 PL.Imp Assertion_D ::assert_scope:'{['_x_']}' not
R103155:103156 PL.Imp Assertion_D ::assert_scope:'{['_x_']}' not
R103154:103154 PL.Imp <> b:1131 var
R103161:103162 PL.Imp <> c2:1133 var
R103166:103166 PL.Imp <> Q:1134 var
R103046:103049 PL.Imp Assertion_D :::'|--'_x not
R103050:103051 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103053:103055 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103082:103084 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103086:103087 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103052:103052 PL.Imp <> P:1130 var
R103056:103058 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103060:103065 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103068:103073 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103076:103081 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103059:103059 PL.Imp <> b:1131 var
R103066:103067 PL.Imp <> c1:1132 var
R103074:103075 PL.Imp <> c2:1133 var
R103085:103085 PL.Imp <> Q:1134 var
R103201:103202 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103204:103206 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103233:103235 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103237:103238 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103207:103209 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103211:103216 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103219:103224 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103227:103232 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103201:103202 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103204:103206 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103233:103235 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103237:103238 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103207:103209 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103211:103216 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103219:103224 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103227:103232 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103569:103584 Coq.Init.Logic <> ::type_scope:x_'='_x not
R103529:103530 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103533:103535 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103562:103564 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103567:103568 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103536:103538 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103540:103545 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103548:103553 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103556:103561 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103585:103586 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103589:103591 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103618:103620 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103623:103624 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103592:103594 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103596:103601 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103604:103609 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103612:103617 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103569:103584 Coq.Init.Logic <> ::type_scope:x_'='_x not
R103529:103530 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103533:103535 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103562:103564 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103567:103568 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103536:103538 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103540:103545 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103548:103553 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103556:103561 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103585:103586 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103589:103591 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103618:103620 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103623:103624 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R103592:103594 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103596:103601 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103604:103609 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103612:103617 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R103751:103767 PL.Imp Assertion_D hoare_consequence constr
R103751:103767 PL.Imp Assertion_D hoare_consequence constr
R103784:103794 PL.Imp Admissable_Rules AND_derives thm
R103784:103794 PL.Imp Admissable_Rules AND_derives thm
R103834:103845 PL.Imp Admissable_Rules derives_refl thm
R103834:103845 PL.Imp Admissable_Rules derives_refl thm
R103899:103915 PL.Imp Assertion_D hoare_consequence constr
R103899:103915 PL.Imp Assertion_D hoare_consequence constr
R103932:103942 PL.Imp Admissable_Rules AND_derives thm
R103932:103942 PL.Imp Admissable_Rules AND_derives thm
R103982:103993 PL.Imp Admissable_Rules derives_refl thm
R103982:103993 PL.Imp Admissable_Rules derives_refl thm
prf 104046:104055 Admissable_Rules if_seq_der
binder 104066:104066 <> P:1135
binder 104068:104068 <> b:1136
binder 104070:104071 <> c1:1137
binder 104073:104074 <> c2:1138
binder 104076:104077 <> c3:1139
binder 104079:104079 <> Q:1140
R104135:104140 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R104141:104144 PL.Imp Assertion_D :::'|--'_x not
R104145:104147 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104149:104152 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104189:104192 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104194:104196 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104148:104148 PL.Imp <> P:1135 var
R104153:104155 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R104157:104162 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R104170:104175 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R104183:104188 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R104156:104156 PL.Imp <> b:1136 var
R104165:104167 PL.Imp <> ::imp_scope:x_';;'_x not
R104163:104164 PL.Imp <> c1:1137 var
R104168:104169 PL.Imp <> c3:1139 var
R104178:104180 PL.Imp <> ::imp_scope:x_';;'_x not
R104176:104177 PL.Imp <> c2:1138 var
R104181:104182 PL.Imp <> c3:1139 var
R104193:104193 PL.Imp <> Q:1140 var
R104084:104087 PL.Imp Assertion_D :::'|--'_x not
R104088:104090 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104092:104095 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104127:104130 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104132:104134 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104091:104091 PL.Imp <> P:1135 var
R104122:104124 PL.Imp <> ::imp_scope:x_';;'_x not
R104096:104098 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R104100:104105 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R104108:104113 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R104116:104121 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R104099:104099 PL.Imp <> b:1136 var
R104106:104107 PL.Imp <> c1:1137 var
R104114:104115 PL.Imp <> c2:1138 var
R104125:104126 PL.Imp <> c3:1139 var
R104131:104131 PL.Imp <> Q:1140 var
R104224:104236 PL.Imp Admissable_Rules hoare_seq_inv thm
R104224:104236 PL.Imp Admissable_Rules hoare_seq_inv thm
R104280:104291 PL.Imp Admissable_Rules hoare_if_inv thm
R104280:104291 PL.Imp Admissable_Rules hoare_if_inv thm
R104321:104328 PL.Imp Assertion_D hoare_if constr
R104321:104328 PL.Imp Assertion_D hoare_if constr
R104341:104349 PL.Imp Assertion_D hoare_seq constr
R104341:104349 PL.Imp Assertion_D hoare_seq constr
R104401:104409 PL.Imp Assertion_D hoare_seq constr
R104401:104409 PL.Imp Assertion_D hoare_seq constr
prf 104464:104471 Admissable_Rules seq_skip
binder 104481:104481 <> c:1141
binder 104483:104483 <> P:1142
binder 104485:104485 <> Q:1143
R104518:104522 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R104490:104493 PL.Imp Assertion_D :::'|--'_x not
R104494:104496 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104498:104501 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104510:104513 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104515:104517 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104497:104497 PL.Imp <> P:1142 var
R104503:104505 PL.Imp <> ::imp_scope:x_';;'_x not
R104502:104502 PL.Imp <> c:1141 var
R104506:104509 PL.Imp <> ::imp_scope:'Skip' not
R104514:104514 PL.Imp <> Q:1143 var
R104523:104526 PL.Imp Assertion_D :::'|--'_x not
R104527:104529 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104531:104534 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104536:104539 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104541:104543 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104530:104530 PL.Imp <> P:1142 var
R104535:104535 PL.Imp <> c:1141 var
R104540:104540 PL.Imp <> Q:1143 var
R104588:104600 PL.Imp Admissable_Rules hoare_seq_inv thm
R104588:104600 PL.Imp Admissable_Rules hoare_seq_inv thm
R104647:104660 PL.Imp Admissable_Rules hoare_skip_inv thm
R104647:104660 PL.Imp Admissable_Rules hoare_skip_inv thm
R104679:104700 PL.Imp Admissable_Rules hoare_consequence_post thm
R104679:104700 PL.Imp Admissable_Rules hoare_consequence_post thm
R104727:104735 PL.Imp Assertion_D hoare_seq constr
R104727:104735 PL.Imp Assertion_D hoare_seq constr
R104772:104781 PL.Imp Assertion_D hoare_skip constr
R104772:104781 PL.Imp Assertion_D hoare_skip constr
prf 104796:104818 Admissable_Rules Hoare_triple_congr_CSeq
binder 104828:104829 <> c1:1144
binder 104831:104833 <> c1':1145
binder 104835:104836 <> c2:1146
binder 104838:104840 <> c2':1147
R104845:104845 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R104907:104913 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R104914:104914 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R104976:104983 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R105056:105056 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 104991:104991 <> P:1148
binder 104993:104993 <> Q:1149
R105022:105026 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R104996:104999 PL.Imp Assertion_D :::'|--'_x not
R105000:105002 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R105004:105007 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R105015:105018 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R105020:105021 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R105003:105003 PL.Imp <> P:1148 var
R105010:105012 PL.Imp <> ::imp_scope:x_';;'_x not
R105008:105009 PL.Imp <> c1:1144 var
R105013:105014 PL.Imp <> c2:1146 var
R105019:105019 PL.Imp <> Q:1149 var
R105027:105030 PL.Imp Assertion_D :::'|--'_x not
R105031:105033 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R105035:105038 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R105048:105051 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R105053:105055 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R105034:105034 PL.Imp <> P:1148 var
R105042:105044 PL.Imp <> ::imp_scope:x_';;'_x not
R105039:105041 PL.Imp <> c1':1145 var
R105045:105047 PL.Imp <> c2':1147 var
R105052:105052 PL.Imp <> Q:1149 var
binder 104922:104922 <> P:1150
binder 104924:104924 <> Q:1151
R104948:104952 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R104927:104930 PL.Imp Assertion_D :::'|--'_x not
R104931:104933 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104935:104938 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104941:104944 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104946:104947 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104934:104934 PL.Imp <> P:1150 var
R104939:104940 PL.Imp <> c2:1146 var
R104945:104945 PL.Imp <> Q:1151 var
R104953:104956 PL.Imp Assertion_D :::'|--'_x not
R104957:104959 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104961:104964 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104968:104971 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104973:104975 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104960:104960 PL.Imp <> P:1150 var
R104965:104967 PL.Imp <> c2':1147 var
R104972:104972 PL.Imp <> Q:1151 var
binder 104853:104853 <> P:1152
binder 104855:104855 <> Q:1153
R104879:104883 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R104858:104861 PL.Imp Assertion_D :::'|--'_x not
R104862:104864 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104866:104869 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104872:104875 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104877:104878 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104865:104865 PL.Imp <> P:1152 var
R104870:104871 PL.Imp <> c1:1144 var
R104876:104876 PL.Imp <> Q:1153 var
R104884:104887 PL.Imp Assertion_D :::'|--'_x not
R104888:104890 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104892:104895 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104899:104902 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104904:104906 PL.Imp Assertion_D :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R104891:104891 PL.Imp <> P:1152 var
R104896:104898 PL.Imp <> c1':1145 var
R104903:104903 PL.Imp <> Q:1153 var
R105099:105111 PL.Imp Admissable_Rules hoare_seq_inv thm
R105156:105164 PL.Imp Assertion_D hoare_seq constr
R105099:105111 PL.Imp Admissable_Rules hoare_seq_inv thm
R105099:105111 PL.Imp Admissable_Rules hoare_seq_inv thm
R105156:105164 PL.Imp Assertion_D hoare_seq constr
R105156:105164 PL.Imp Assertion_D hoare_seq constr
R105208:105210 PL.Imp Admissable_Rules.Der <> sec
R105218:105233 PL.Imp Admissable_Rules <> mod
sec 105384:105402 <> DenotationSmallStep
prf 105437:105454 <> multi_congr_APlus1
binder 105464:105465 <> st:1154
binder 105467:105468 <> a1:1155
binder 105470:105472 <> a1':1156
binder 105474:105475 <> a2:1157
R105501:105506 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R105507:105517 PL.Imp <> multi_astep def
R105536:105538 PL.Imp <> ::imp_scope:x_'+'_x not
R105533:105535 PL.Imp <> a1':1156 var
R105539:105540 PL.Imp <> a2:1157 var
R105525:105527 PL.Imp <> ::imp_scope:x_'+'_x not
R105523:105524 PL.Imp <> a1:1155 var
R105528:105529 PL.Imp <> a2:1157 var
R105519:105520 PL.Imp <> st:1154 var
R105480:105490 PL.Imp <> multi_astep def
R105498:105500 PL.Imp <> a1':1156 var
R105495:105496 PL.Imp <> a1:1155 var
R105492:105493 PL.Imp <> st:1154 var
R105648:105655 PL.Imp <> AS_Plus1 constr
R105648:105655 PL.Imp <> AS_Plus1 constr
prf 105687:105704 <> multi_congr_APlus2
binder 105714:105715 <> st:1158
binder 105717:105718 <> a1:1159
binder 105720:105721 <> a2:1160
binder 105723:105725 <> a2':1161
R105742:105747 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R105769:105774 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R105775:105785 PL.Imp <> multi_astep def
R105803:105805 PL.Imp <> ::imp_scope:x_'+'_x not
R105801:105802 PL.Imp <> a1:1159 var
R105806:105808 PL.Imp <> a2':1161 var
R105793:105795 PL.Imp <> ::imp_scope:x_'+'_x not
R105791:105792 PL.Imp <> a1:1159 var
R105796:105797 PL.Imp <> a2:1160 var
R105787:105788 PL.Imp <> st:1158 var
R105748:105758 PL.Imp <> multi_astep def
R105766:105768 PL.Imp <> a2':1161 var
R105763:105764 PL.Imp <> a2:1160 var
R105760:105761 PL.Imp <> st:1158 var
R105730:105738 PL.Imp <> aexp_halt ind
R105740:105741 PL.Imp <> a1:1159 var
R105918:105925 PL.Imp <> AS_Plus2 constr
R105918:105925 PL.Imp <> AS_Plus2 constr
prf 105977:105995 <> multi_congr_AMinus1
binder 106005:106006 <> st:1162
binder 106008:106009 <> a1:1163
binder 106011:106013 <> a1':1164
binder 106015:106016 <> a2:1165
R106042:106047 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R106048:106058 PL.Imp <> multi_astep def
R106077:106079 PL.Imp <> ::imp_scope:x_'-'_x not
R106074:106076 PL.Imp <> a1':1164 var
R106080:106081 PL.Imp <> a2:1165 var
R106066:106068 PL.Imp <> ::imp_scope:x_'-'_x not
R106064:106065 PL.Imp <> a1:1163 var
R106069:106070 PL.Imp <> a2:1165 var
R106060:106061 PL.Imp <> st:1162 var
R106021:106031 PL.Imp <> multi_astep def
R106039:106041 PL.Imp <> a1':1164 var
R106036:106037 PL.Imp <> a1:1163 var
R106033:106034 PL.Imp <> st:1162 var
R106190:106198 PL.Imp <> AS_Minus1 constr
R106190:106198 PL.Imp <> AS_Minus1 constr
prf 106230:106248 <> multi_congr_AMinus2
binder 106258:106259 <> st:1166
binder 106261:106262 <> a1:1167
binder 106264:106265 <> a2:1168
binder 106267:106269 <> a2':1169
R106286:106291 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R106313:106318 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R106319:106329 PL.Imp <> multi_astep def
R106347:106349 PL.Imp <> ::imp_scope:x_'-'_x not
R106345:106346 PL.Imp <> a1:1167 var
R106350:106352 PL.Imp <> a2':1169 var
R106337:106339 PL.Imp <> ::imp_scope:x_'-'_x not
R106335:106336 PL.Imp <> a1:1167 var
R106340:106341 PL.Imp <> a2:1168 var
R106331:106332 PL.Imp <> st:1166 var
R106292:106302 PL.Imp <> multi_astep def
R106310:106312 PL.Imp <> a2':1169 var
R106307:106308 PL.Imp <> a2:1168 var
R106304:106305 PL.Imp <> st:1166 var
R106274:106282 PL.Imp <> aexp_halt ind
R106284:106285 PL.Imp <> a1:1167 var
R106462:106470 PL.Imp <> AS_Minus2 constr
R106462:106470 PL.Imp <> AS_Minus2 constr
prf 106522:106539 <> multi_congr_AMult1
binder 106549:106550 <> st:1170
binder 106552:106553 <> a1:1171
binder 106555:106557 <> a1':1172
binder 106559:106560 <> a2:1173
R106586:106591 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R106592:106602 PL.Imp <> multi_astep def
R106621:106623 PL.Imp <> ::imp_scope:x_'*'_x not
R106618:106620 PL.Imp <> a1':1172 var
R106624:106625 PL.Imp <> a2:1173 var
R106610:106612 PL.Imp <> ::imp_scope:x_'*'_x not
R106608:106609 PL.Imp <> a1:1171 var
R106613:106614 PL.Imp <> a2:1173 var
R106604:106605 PL.Imp <> st:1170 var
R106565:106575 PL.Imp <> multi_astep def
R106583:106585 PL.Imp <> a1':1172 var
R106580:106581 PL.Imp <> a1:1171 var
R106577:106578 PL.Imp <> st:1170 var
R106734:106741 PL.Imp <> AS_Mult1 constr
R106734:106741 PL.Imp <> AS_Mult1 constr
prf 106773:106790 <> multi_congr_AMult2
binder 106800:106801 <> st:1174
binder 106803:106804 <> a1:1175
binder 106806:106807 <> a2:1176
binder 106809:106811 <> a2':1177
R106828:106833 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R106855:106860 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R106861:106871 PL.Imp <> multi_astep def
R106889:106891 PL.Imp <> ::imp_scope:x_'*'_x not
R106887:106888 PL.Imp <> a1:1175 var
R106892:106894 PL.Imp <> a2':1177 var
R106879:106881 PL.Imp <> ::imp_scope:x_'*'_x not
R106877:106878 PL.Imp <> a1:1175 var
R106882:106883 PL.Imp <> a2:1176 var
R106873:106874 PL.Imp <> st:1174 var
R106834:106844 PL.Imp <> multi_astep def
R106852:106854 PL.Imp <> a2':1177 var
R106849:106850 PL.Imp <> a2:1176 var
R106846:106847 PL.Imp <> st:1174 var
R106816:106824 PL.Imp <> aexp_halt ind
R106826:106827 PL.Imp <> a1:1175 var
R107004:107011 PL.Imp <> AS_Mult2 constr
R107004:107011 PL.Imp <> AS_Mult2 constr
prf 107063:107078 <> multi_congr_BEq1
binder 107088:107089 <> st:1178
binder 107091:107092 <> a1:1179
binder 107094:107096 <> a1':1180
binder 107098:107099 <> a2:1181
R107125:107130 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R107131:107141 PL.Imp <> multi_bstep def
R107161:107164 PL.Imp <> ::imp_scope:x_'=='_x not
R107158:107160 PL.Imp <> a1':1180 var
R107165:107166 PL.Imp <> a2:1181 var
R107149:107152 PL.Imp <> ::imp_scope:x_'=='_x not
R107147:107148 PL.Imp <> a1:1179 var
R107153:107154 PL.Imp <> a2:1181 var
R107143:107144 PL.Imp <> st:1178 var
R107104:107114 PL.Imp <> multi_astep def
R107122:107124 PL.Imp <> a1':1180 var
R107119:107120 PL.Imp <> a1:1179 var
R107116:107117 PL.Imp <> st:1178 var
R107275:107280 PL.Imp <> BS_Eq1 constr
R107275:107280 PL.Imp <> BS_Eq1 constr
prf 107312:107327 <> multi_congr_BEq2
binder 107337:107338 <> st:1182
binder 107340:107341 <> a1:1183
binder 107343:107344 <> a2:1184
binder 107346:107348 <> a2':1185
R107365:107370 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R107392:107397 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R107398:107408 PL.Imp <> multi_bstep def
R107427:107430 PL.Imp <> ::imp_scope:x_'=='_x not
R107425:107426 PL.Imp <> a1:1183 var
R107431:107433 PL.Imp <> a2':1185 var
R107416:107419 PL.Imp <> ::imp_scope:x_'=='_x not
R107414:107415 PL.Imp <> a1:1183 var
R107420:107421 PL.Imp <> a2:1184 var
R107410:107411 PL.Imp <> st:1182 var
R107371:107381 PL.Imp <> multi_astep def
R107389:107391 PL.Imp <> a2':1185 var
R107386:107387 PL.Imp <> a2:1184 var
R107383:107384 PL.Imp <> st:1182 var
R107353:107361 PL.Imp <> aexp_halt ind
R107363:107364 PL.Imp <> a1:1183 var
R107543:107548 PL.Imp <> BS_Eq2 constr
R107543:107548 PL.Imp <> BS_Eq2 constr
prf 107600:107615 <> multi_congr_BLe1
binder 107625:107626 <> st:1186
binder 107628:107629 <> a1:1187
binder 107631:107633 <> a1':1188
binder 107635:107636 <> a2:1189
R107662:107667 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R107668:107678 PL.Imp <> multi_bstep def
R107698:107701 PL.Imp <> ::imp_scope:x_'<='_x not
R107695:107697 PL.Imp <> a1':1188 var
R107702:107703 PL.Imp <> a2:1189 var
R107686:107689 PL.Imp <> ::imp_scope:x_'<='_x not
R107684:107685 PL.Imp <> a1:1187 var
R107690:107691 PL.Imp <> a2:1189 var
R107680:107681 PL.Imp <> st:1186 var
R107641:107651 PL.Imp <> multi_astep def
R107659:107661 PL.Imp <> a1':1188 var
R107656:107657 PL.Imp <> a1:1187 var
R107653:107654 PL.Imp <> st:1186 var
R107812:107817 PL.Imp <> BS_Le1 constr
R107812:107817 PL.Imp <> BS_Le1 constr
prf 107849:107864 <> multi_congr_BLe2
binder 107874:107875 <> st:1190
binder 107877:107878 <> a1:1191
binder 107880:107881 <> a2:1192
binder 107883:107885 <> a2':1193
R107902:107907 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R107929:107934 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R107935:107945 PL.Imp <> multi_bstep def
R107964:107967 PL.Imp <> ::imp_scope:x_'<='_x not
R107962:107963 PL.Imp <> a1:1191 var
R107968:107970 PL.Imp <> a2':1193 var
R107953:107956 PL.Imp <> ::imp_scope:x_'<='_x not
R107951:107952 PL.Imp <> a1:1191 var
R107957:107958 PL.Imp <> a2:1192 var
R107947:107948 PL.Imp <> st:1190 var
R107908:107918 PL.Imp <> multi_astep def
R107926:107928 PL.Imp <> a2':1193 var
R107923:107924 PL.Imp <> a2:1192 var
R107920:107921 PL.Imp <> st:1190 var
R107890:107898 PL.Imp <> aexp_halt ind
R107900:107901 PL.Imp <> a1:1191 var
R108080:108085 PL.Imp <> BS_Le2 constr
R108080:108085 PL.Imp <> BS_Le2 constr
prf 108137:108152 <> multi_congr_BNot
binder 108162:108163 <> st:1194
binder 108165:108165 <> b:1195
binder 108167:108168 <> b':1196
R108192:108197 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R108198:108208 PL.Imp <> multi_bstep def
R108223:108226 PL.Imp <> BNot constr
R108228:108229 PL.Imp <> b':1196 var
R108214:108217 PL.Imp <> BNot constr
R108219:108219 PL.Imp <> b:1195 var
R108210:108211 PL.Imp <> st:1194 var
R108173:108183 PL.Imp <> multi_bstep def
R108190:108191 PL.Imp <> b':1196 var
R108188:108188 PL.Imp <> b:1195 var
R108185:108186 PL.Imp <> st:1194 var
R108338:108347 PL.Imp <> BS_NotStep constr
R108338:108347 PL.Imp <> BS_NotStep constr
prf 108379:108394 <> multi_congr_BAnd
binder 108404:108405 <> st:1197
binder 108407:108408 <> b1:1198
binder 108410:108412 <> b1':1199
binder 108414:108415 <> b2:1200
R108441:108446 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R108447:108457 PL.Imp <> multi_bstep def
R108476:108479 PL.Imp <> BAnd constr
R108485:108486 PL.Imp <> b2:1200 var
R108481:108483 PL.Imp <> b1':1199 var
R108463:108466 PL.Imp <> BAnd constr
R108471:108472 PL.Imp <> b2:1200 var
R108468:108469 PL.Imp <> b1:1198 var
R108459:108460 PL.Imp <> st:1197 var
R108420:108430 PL.Imp <> multi_bstep def
R108438:108440 PL.Imp <> b1':1199 var
R108435:108436 PL.Imp <> b1:1198 var
R108432:108433 PL.Imp <> st:1197 var
R108595:108604 PL.Imp <> BS_AndStep constr
R108595:108604 PL.Imp <> BS_AndStep constr
prf 108636:108651 <> multi_congr_CAss
binder 108661:108662 <> st:1201
binder 108664:108664 <> X:1202
binder 108666:108666 <> a:1203
binder 108668:108669 <> a':1204
R108693:108698 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R108699:108709 PL.Imp <> multi_cstep def
R108726:108726 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R108736:108737 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R108740:108740 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R108727:108730 PL.Imp <> CAss constr
R108734:108735 PL.Imp <> a':1204 var
R108732:108732 PL.Imp <> X:1202 var
R108738:108739 PL.Imp <> st:1201 var
R108711:108711 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R108720:108721 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R108724:108724 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R108712:108715 PL.Imp <> CAss constr
R108719:108719 PL.Imp <> a:1203 var
R108717:108717 PL.Imp <> X:1202 var
R108722:108723 PL.Imp <> st:1201 var
R108674:108684 PL.Imp <> multi_astep def
R108691:108692 PL.Imp <> a':1204 var
R108689:108689 PL.Imp <> a:1203 var
R108686:108687 PL.Imp <> st:1201 var
R108848:108857 PL.Imp <> CS_AssStep constr
R108848:108857 PL.Imp <> CS_AssStep constr
prf 108889:108904 <> multi_congr_CSeq
binder 108914:108916 <> st1:1205
binder 108918:108919 <> c1:1206
binder 108921:108924 <> st1':1207
binder 108926:108928 <> c1':1208
binder 108930:108931 <> c2:1209
R108969:108974 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R108975:108985 PL.Imp <> multi_cstep def
R109005:109005 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R109017:109018 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R109023:109023 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R109006:109009 PL.Imp <> CSeq constr
R109015:109016 PL.Imp <> c2:1209 var
R109011:109013 PL.Imp <> c1':1208 var
R109019:109022 PL.Imp <> st1':1207 var
R108987:108987 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R108998:108999 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R109003:109003 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R108988:108991 PL.Imp <> CSeq constr
R108996:108997 PL.Imp <> c2:1209 var
R108993:108994 PL.Imp <> c1:1206 var
R109000:109002 PL.Imp <> st1:1205 var
R108936:108946 PL.Imp <> multi_cstep def
R108958:108958 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R108962:108963 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R108968:108968 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R108959:108961 PL.Imp <> c1':1208 var
R108964:108967 PL.Imp <> st1':1207 var
R108948:108948 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R108951:108952 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R108956:108956 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R108949:108950 PL.Imp <> c1:1206 var
R108953:108955 PL.Imp <> st1:1205 var
R109131:109140 PL.Imp <> CS_SeqStep constr
R109131:109140 PL.Imp <> CS_SeqStep constr
prf 109172:109186 <> multi_congr_CIf
binder 109196:109197 <> st:1210
binder 109199:109199 <> b:1211
binder 109201:109202 <> b':1212
binder 109204:109205 <> c1:1213
binder 109207:109208 <> c2:1214
R109232:109237 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R109238:109248 PL.Imp <> multi_cstep def
R109276:109276 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R109289:109290 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R109293:109293 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R109277:109279 PL.Imp <> CIf constr
R109287:109288 PL.Imp <> c2:1214 var
R109284:109285 PL.Imp <> c1:1213 var
R109281:109282 PL.Imp <> b':1212 var
R109291:109292 PL.Imp <> st:1210 var
R109254:109254 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R109266:109267 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R109270:109270 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R109255:109257 PL.Imp <> CIf constr
R109264:109265 PL.Imp <> c2:1214 var
R109261:109262 PL.Imp <> c1:1213 var
R109259:109259 PL.Imp <> b:1211 var
R109268:109269 PL.Imp <> st:1210 var
R109213:109223 PL.Imp <> multi_bstep def
R109230:109231 PL.Imp <> b':1212 var
R109228:109228 PL.Imp <> b:1211 var
R109225:109226 PL.Imp <> st:1210 var
R109401:109409 PL.Imp <> CS_IfStep constr
R109401:109409 PL.Imp <> CS_IfStep constr
prf 109564:109583 <> semantic_equiv_aexp1
binder 109593:109594 <> st:1215
binder 109596:109596 <> a:1216
binder 109598:109598 <> n:1217
R109617:109620 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R109621:109631 PL.Imp <> multi_astep def
R109639:109642 PL.Imp <> ANum constr
R109644:109644 PL.Imp <> n:1217 var
R109636:109636 PL.Imp <> a:1216 var
R109633:109634 PL.Imp <> st:1215 var
R109613:109615 Coq.Init.Logic <> ::type_scope:x_'='_x not
R109603:109607 PL.Imp <> aeval def
R109611:109612 PL.Imp <> st:1215 var
R109609:109609 PL.Imp <> a:1216 var
R109616:109616 PL.Imp <> n:1217 var
R109723:109735 PL.Imp <> constant_func def
R109842:109846 PL.Imp <> AS_Id constr
R109842:109846 PL.Imp <> AS_Id constr
R109880:109897 PL.Imp <> multi_congr_APlus1 thm
R109880:109897 PL.Imp <> multi_congr_APlus1 thm
R109955:109972 PL.Imp <> multi_congr_APlus2 thm
R109982:109987 PL.Imp <> AH_num constr
R109955:109972 PL.Imp <> multi_congr_APlus2 thm
R109982:109987 PL.Imp <> AH_num constr
R110048:110054 PL.Imp <> AS_Plus constr
R110048:110054 PL.Imp <> AS_Plus constr
R110088:110106 PL.Imp <> multi_congr_AMinus1 thm
R110088:110106 PL.Imp <> multi_congr_AMinus1 thm
R110164:110182 PL.Imp <> multi_congr_AMinus2 thm
R110192:110197 PL.Imp <> AH_num constr
R110164:110182 PL.Imp <> multi_congr_AMinus2 thm
R110192:110197 PL.Imp <> AH_num constr
R110258:110265 PL.Imp <> AS_Minus constr
R110258:110265 PL.Imp <> AS_Minus constr
R110299:110316 PL.Imp <> multi_congr_AMult1 thm
R110299:110316 PL.Imp <> multi_congr_AMult1 thm
R110374:110391 PL.Imp <> multi_congr_AMult2 thm
R110401:110406 PL.Imp <> AH_num constr
R110374:110391 PL.Imp <> multi_congr_AMult2 thm
R110401:110406 PL.Imp <> AH_num constr
R110467:110473 PL.Imp <> AS_Mult constr
R110467:110473 PL.Imp <> AS_Mult constr
prf 110490:110509 <> semantic_equiv_bexp1
binder 110519:110520 <> st:1218
binder 110522:110522 <> b:1219
R110527:110527 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R110564:110571 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R110611:110611 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R110538:110541 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R110542:110552 PL.Imp <> multi_bstep def
R110559:110563 PL.Imp <> BTrue constr
R110557:110557 PL.Imp <> b:1219 var
R110554:110555 PL.Imp <> st:1218 var
R110528:110532 PL.Imp <> beval def
R110536:110537 PL.Imp <> st:1218 var
R110534:110534 PL.Imp <> b:1219 var
R110584:110587 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R110588:110598 PL.Imp <> multi_bstep def
R110605:110610 PL.Imp <> BFalse constr
R110603:110603 PL.Imp <> b:1219 var
R110600:110601 PL.Imp <> st:1218 var
R110572:110573 Coq.Init.Logic <> ::type_scope:'~'_x not
R110574:110578 PL.Imp <> beval def
R110582:110583 PL.Imp <> st:1218 var
R110580:110580 PL.Imp <> b:1219 var
R110710:110718 PL.Imp <> full def
R110758:110767 PL.Imp <> empty def
R110828:110838 PL.Imp <> multi_bstep def
R110866:110869 PL.Imp <> ::imp_scope:x_'=='_x not
R110855:110859 PL.Imp <> aeval def
R110870:110874 PL.Imp <> aeval def
R110846:110849 PL.Imp <> ::imp_scope:x_'=='_x not
R110828:110838 PL.Imp <> multi_bstep def
R110866:110869 PL.Imp <> ::imp_scope:x_'=='_x not
R110855:110859 PL.Imp <> aeval def
R110870:110874 PL.Imp <> aeval def
R110846:110849 PL.Imp <> ::imp_scope:x_'=='_x not
R110926:110941 PL.Imp <> multi_congr_BEq1 thm
R110944:110963 PL.Imp <> semantic_equiv_aexp1 thm
R110926:110941 PL.Imp <> multi_congr_BEq1 thm
R110944:110963 PL.Imp <> semantic_equiv_aexp1 thm
R111001:111016 PL.Imp <> multi_congr_BEq2 thm
R111026:111031 PL.Imp <> AH_num constr
R111001:111016 PL.Imp <> multi_congr_BEq2 thm
R111026:111031 PL.Imp <> AH_num constr
R111051:111070 PL.Imp <> semantic_equiv_aexp1 thm
R111051:111070 PL.Imp <> semantic_equiv_aexp1 thm
R111118:111129 PL.Imp <> test_eq def
R111189:111198 PL.Imp <> BS_Eq_True constr
R111189:111198 PL.Imp <> BS_Eq_True constr
R111217:111227 PL.Imp <> BS_Eq_False constr
R111217:111227 PL.Imp <> BS_Eq_False constr
R111246:111256 PL.Imp <> multi_bstep def
R111284:111287 PL.Imp <> ::imp_scope:x_'<='_x not
R111273:111277 PL.Imp <> aeval def
R111288:111292 PL.Imp <> aeval def
R111264:111267 PL.Imp <> ::imp_scope:x_'<='_x not
R111246:111256 PL.Imp <> multi_bstep def
R111284:111287 PL.Imp <> ::imp_scope:x_'<='_x not
R111273:111277 PL.Imp <> aeval def
R111288:111292 PL.Imp <> aeval def
R111264:111267 PL.Imp <> ::imp_scope:x_'<='_x not
R111344:111359 PL.Imp <> multi_congr_BLe1 thm
R111362:111381 PL.Imp <> semantic_equiv_aexp1 thm
R111344:111359 PL.Imp <> multi_congr_BLe1 thm
R111362:111381 PL.Imp <> semantic_equiv_aexp1 thm
R111419:111434 PL.Imp <> multi_congr_BLe2 thm
R111444:111449 PL.Imp <> AH_num constr
R111419:111434 PL.Imp <> multi_congr_BLe2 thm
R111444:111449 PL.Imp <> AH_num constr
R111469:111488 PL.Imp <> semantic_equiv_aexp1 thm
R111469:111488 PL.Imp <> semantic_equiv_aexp1 thm
R111536:111547 PL.Imp <> test_le def
R111607:111616 PL.Imp <> BS_Le_True constr
R111607:111616 PL.Imp <> BS_Le_True constr
R111635:111645 PL.Imp <> BS_Le_False constr
R111635:111645 PL.Imp <> BS_Le_False constr
R111747:111762 PL.Imp <> multi_congr_BNot thm
R111747:111762 PL.Imp <> multi_congr_BNot thm
R111785:111799 PL.Imp <> complement def
R111830:111840 PL.Imp <> BS_NotFalse constr
R111830:111840 PL.Imp <> BS_NotFalse constr
R111881:111896 PL.Imp <> multi_congr_BNot thm
R111881:111896 PL.Imp <> multi_congr_BNot thm
R111919:111933 PL.Imp <> complement def
R111962:111971 PL.Imp <> BS_NotTrue constr
R111962:111971 PL.Imp <> BS_NotTrue constr
R112061:112067 Coq.Logic.Classical_Prop <> classic prfax
R112070:112074 PL.Imp <> beval def
R112061:112067 Coq.Logic.Classical_Prop <> classic prfax
R112070:112074 PL.Imp <> beval def
R112114:112124 PL.Imp <> multi_bstep def
R112132:112135 PL.Imp <> ::imp_scope:x_'&&'_x not
R112114:112124 PL.Imp <> multi_bstep def
R112132:112135 PL.Imp <> ::imp_scope:x_'&&'_x not
R112195:112210 PL.Imp <> multi_congr_BAnd thm
R112195:112210 PL.Imp <> multi_congr_BAnd thm
R112239:112248 PL.Imp <> BS_AndTrue constr
R112239:112248 PL.Imp <> BS_AndTrue constr
R112279:112292 PL.Imp <> intersect def
R112416:112429 PL.Imp <> intersect def
R112490:112505 PL.Imp <> multi_congr_BAnd thm
R112490:112505 PL.Imp <> multi_congr_BAnd thm
R112532:112542 PL.Imp <> BS_AndFalse constr
R112532:112542 PL.Imp <> BS_AndFalse constr
prf 112561:112585 <> semantic_equiv_bexp1_true
binder 112595:112596 <> st:1220
binder 112598:112598 <> b:1221
R112613:112616 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R112617:112627 PL.Imp <> multi_bstep def
R112634:112638 PL.Imp <> BTrue constr
R112632:112632 PL.Imp <> b:1221 var
R112629:112630 PL.Imp <> st:1220 var
R112603:112607 PL.Imp <> beval def
R112611:112612 PL.Imp <> st:1220 var
R112609:112609 PL.Imp <> b:1221 var
R112667:112686 PL.Imp <> semantic_equiv_bexp1 thm
R112667:112686 PL.Imp <> semantic_equiv_bexp1 thm
prf 112719:112744 <> semantic_equiv_bexp1_false
binder 112754:112755 <> st:1222
binder 112757:112757 <> b:1223
R112791:112794 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R112795:112805 PL.Imp <> multi_bstep def
R112812:112817 PL.Imp <> BFalse constr
R112810:112810 PL.Imp <> b:1223 var
R112807:112808 PL.Imp <> st:1222 var
R112763:112777 PL.Imp <> complement def
R112789:112790 PL.Imp <> st:1222 var
R112780:112784 PL.Imp <> beval def
R112786:112786 PL.Imp <> b:1223 var
R112847:112866 PL.Imp <> semantic_equiv_bexp1 thm
R112847:112866 PL.Imp <> semantic_equiv_bexp1 thm
prf 112893:112917 <> semantic_equiv_iter_loop1
binder 112927:112929 <> st1:1224
binder 112931:112933 <> st2:1225
binder 112935:112935 <> n:1226
binder 112937:112937 <> b:1227
binder 112939:112939 <> c:1228
R112944:112944 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R113012:113018 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R113055:113060 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R113061:113071 PL.Imp <> multi_cstep def
R113102:113102 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R113107:113108 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R113112:113112 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R113103:113106 PL.Imp <> ::imp_scope:'Skip' not
R113109:113111 PL.Imp <> st2:1225 var
R113073:113073 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R113095:113096 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R113100:113100 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R113074:113079 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R113081:113084 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R113086:113094 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R113080:113080 PL.Imp <> b:1227 var
R113085:113085 PL.Imp <> c:1228 var
R113097:113099 PL.Imp <> st1:1224 var
R113019:113032 PL.Imp <> iter_loop_body def
R113052:113054 PL.Imp <> st2:1225 var
R113048:113050 PL.Imp <> st1:1224 var
R113046:113046 PL.Imp <> n:1226 var
R113037:113041 PL.Imp <> ceval def
R113043:113043 PL.Imp <> c:1228 var
R113034:113034 PL.Imp <> b:1227 var
binder 112952:112954 <> st1:1229
binder 112956:112958 <> st2:1230
R112976:112979 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R112980:112990 PL.Imp <> multi_cstep def
R113001:113001 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R113006:113007 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R113011:113011 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R113002:113005 PL.Imp <> ::imp_scope:'Skip' not
R113008:113010 PL.Imp <> st2:1230 var
R112992:112992 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R112994:112995 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R112999:112999 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R112993:112993 PL.Imp <> c:1228 var
R112996:112998 PL.Imp <> st1:1229 var
R112961:112965 PL.Imp <> ceval def
R112973:112975 PL.Imp <> st2:1230 var
R112969:112971 PL.Imp <> st1:1229 var
R112967:112967 PL.Imp <> c:1228 var
R113202:113216 PL.Imp <> test_rel def
R113286:113293 PL.Imp <> CS_While constr
R113286:113293 PL.Imp <> CS_While constr
R113325:113339 PL.Imp <> multi_congr_CIf thm
R113342:113367 PL.Imp <> semantic_equiv_bexp1_false thm
R113325:113339 PL.Imp <> multi_congr_CIf thm
R113342:113367 PL.Imp <> semantic_equiv_bexp1_false thm
R113406:113415 PL.Imp <> CS_IfFalse constr
R113406:113415 PL.Imp <> CS_IfFalse constr
R113466:113478 PL.Imp <> concat def
R113497:113511 PL.Imp <> test_rel def
R113577:113589 PL.Imp <> concat def
R113660:113667 PL.Imp <> CS_While constr
R113660:113667 PL.Imp <> CS_While constr
R113699:113713 PL.Imp <> multi_congr_CIf thm
R113716:113740 PL.Imp <> semantic_equiv_bexp1_true thm
R113699:113713 PL.Imp <> multi_congr_CIf thm
R113716:113740 PL.Imp <> semantic_equiv_bexp1_true thm
R113779:113787 PL.Imp <> CS_IfTrue constr
R113779:113787 PL.Imp <> CS_IfTrue constr
R113819:113834 PL.Imp <> multi_congr_CSeq thm
R113819:113834 PL.Imp <> multi_congr_CSeq thm
R113876:113881 PL.Imp <> CS_Seq constr
R113876:113881 PL.Imp <> CS_Seq constr
prf 113920:113938 <> semantic_equiv_com1
binder 113948:113950 <> st1:1231
binder 113952:113954 <> st2:1232
binder 113956:113956 <> c:1233
R113976:113979 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R113980:113990 PL.Imp <> multi_cstep def
R114001:114001 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R114006:114007 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R114011:114011 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R114002:114005 PL.Imp <> ::imp_scope:'Skip' not
R114008:114010 PL.Imp <> st2:1232 var
R113992:113992 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R113994:113995 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R113999:113999 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R113993:113993 PL.Imp <> c:1233 var
R113996:113998 PL.Imp <> st1:1231 var
R113961:113965 PL.Imp <> ceval def
R113973:113975 PL.Imp <> st2:1232 var
R113969:113971 PL.Imp <> st1:1231 var
R113967:113967 PL.Imp <> c:1233 var
R114084:114094 PL.Imp <> ceval_CSkip thm
R114084:114094 PL.Imp <> ceval_CSkip thm
R114084:114094 PL.Imp <> ceval_CSkip thm
R114113:114121 PL.Imp <> id def
R114173:114182 PL.Imp <> ceval_CAss thm
R114173:114182 PL.Imp <> ceval_CAss thm
R114173:114182 PL.Imp <> ceval_CAss thm
R114240:114255 PL.Imp <> multi_congr_CAss thm
R114258:114277 PL.Imp <> semantic_equiv_aexp1 thm
R114240:114255 PL.Imp <> multi_congr_CAss thm
R114258:114277 PL.Imp <> semantic_equiv_aexp1 thm
R114311:114316 PL.Imp <> CS_Ass constr
R114311:114316 PL.Imp <> CS_Ass constr
R114338:114347 PL.Imp <> ceval_CSeq thm
R114338:114347 PL.Imp <> ceval_CSeq thm
R114338:114347 PL.Imp <> ceval_CSeq thm
R114366:114378 PL.Imp <> concat def
R114443:114458 PL.Imp <> multi_congr_CSeq thm
R114443:114458 PL.Imp <> multi_congr_CSeq thm
R114503:114508 PL.Imp <> CS_Seq constr
R114503:114508 PL.Imp <> CS_Seq constr
R114546:114554 PL.Imp <> ceval_CIf thm
R114546:114554 PL.Imp <> ceval_CIf thm
R114546:114554 PL.Imp <> ceval_CIf thm
R114573:114578 PL.Imp <> if_sem def
R114597:114608 PL.Imp <> union def
R114622:114634 PL.Imp <> concat def
R114648:114662 PL.Imp <> test_rel def
R114685:114704 PL.Imp <> semantic_equiv_bexp1 thm
R114685:114704 PL.Imp <> semantic_equiv_bexp1 thm
R114825:114839 PL.Imp <> multi_congr_CIf thm
R114825:114839 PL.Imp <> multi_congr_CIf thm
R114884:114892 PL.Imp <> CS_IfTrue constr
R114884:114892 PL.Imp <> CS_IfTrue constr
R114948:114962 PL.Imp <> multi_congr_CIf thm
R114948:114962 PL.Imp <> multi_congr_CIf thm
R115007:115016 PL.Imp <> CS_IfFalse constr
R115007:115016 PL.Imp <> CS_IfFalse constr
R115056:115067 PL.Imp <> ceval_CWhile thm
R115056:115067 PL.Imp <> ceval_CWhile thm
R115056:115067 PL.Imp <> ceval_CWhile thm
R115086:115093 PL.Imp <> loop_sem def
R115112:115129 PL.Imp <> omega_union def
R115172:115196 PL.Imp <> semantic_equiv_iter_loop1 thm
R115172:115196 PL.Imp <> semantic_equiv_iter_loop1 thm
prf 115406:115414 <> ANum_halt
binder 115424:115425 <> st:1234
binder 115427:115427 <> n:1235
binder 115429:115429 <> a:1236
R115459:115464 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R115466:115468 Coq.Init.Logic <> ::type_scope:x_'='_x not
R115465:115465 PL.Imp <> a:1236 var
R115469:115472 PL.Imp <> ANum constr
R115474:115474 PL.Imp <> n:1235 var
R115434:115444 PL.Imp <> multi_astep def
R115458:115458 PL.Imp <> a:1236 var
R115450:115453 PL.Imp <> ANum constr
R115455:115455 PL.Imp <> n:1235 var
R115446:115447 PL.Imp <> st:1234 var
R115502:115512 PL.Imp <> multi_astep def
R115502:115512 PL.Imp <> multi_astep def
prf 115594:115614 <> never_BFalse_to_BTrue
binder 115624:115625 <> st:1237
R115657:115660 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R115661:115665 Coq.Init.Logic <> False ind
R115630:115640 PL.Imp <> multi_bstep def
R115652:115656 PL.Imp <> BTrue constr
R115645:115650 PL.Imp <> BFalse constr
R115642:115643 PL.Imp <> st:1237 var
R115693:115703 PL.Imp <> multi_bstep def
R115693:115703 PL.Imp <> multi_bstep def
prf 115766:115786 <> never_BTrue_to_BFalse
binder 115796:115797 <> st:1238
R115829:115832 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R115833:115837 Coq.Init.Logic <> False ind
R115802:115812 PL.Imp <> multi_bstep def
R115823:115828 PL.Imp <> BFalse constr
R115817:115821 PL.Imp <> BTrue constr
R115814:115815 PL.Imp <> st:1238 var
R115865:115875 PL.Imp <> multi_bstep def
R115865:115875 PL.Imp <> multi_bstep def
prf 115938:115947 <> CSkip_halt
binder 115957:115958 <> st:1239
binder 115960:115962 <> st':1240
binder 115964:115964 <> c:1241
R116001:116006 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R116016:116019 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R116008:116010 Coq.Init.Logic <> ::type_scope:x_'='_x not
R116007:116007 PL.Imp <> c:1241 var
R116011:116015 PL.Imp <> CSkip constr
R116022:116024 Coq.Init.Logic <> ::type_scope:x_'='_x not
R116020:116021 PL.Imp <> st:1239 var
R116025:116027 PL.Imp <> st':1240 var
R115969:115979 PL.Imp <> multi_cstep def
R115993:115993 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R115995:115996 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R116000:116000 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R115994:115994 PL.Imp <> c:1241 var
R115997:115999 PL.Imp <> st':1240 var
R115981:115981 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R115987:115988 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R115991:115991 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R115982:115986 PL.Imp <> CSkip constr
R115989:115990 PL.Imp <> st:1239 var
R116055:116065 PL.Imp <> multi_cstep def
R116055:116065 PL.Imp <> multi_cstep def
prf 116154:116168 <> APlus_path_spec
binder 116178:116179 <> st:1242
binder 116181:116182 <> a1:1243
binder 116184:116185 <> a2:1244
binder 116187:116187 <> n:1245
R116229:116234 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R116235:116241 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R116247:116250 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 116242:116243 <> n1:1246
binder 116245:116246 <> n2:1247
R116278:116283 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R116251:116261 PL.Imp <> multi_astep def
R116270:116273 PL.Imp <> ANum constr
R116275:116276 PL.Imp <> n1:1246 var
R116266:116267 PL.Imp <> a1:1243 var
R116263:116264 PL.Imp <> st:1242 var
R116311:116316 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R116284:116294 PL.Imp <> multi_astep def
R116303:116306 PL.Imp <> ANum constr
R116308:116309 PL.Imp <> n2:1247 var
R116299:116300 PL.Imp <> a2:1244 var
R116296:116297 PL.Imp <> st:1242 var
R116318:116321 Coq.Init.Logic <> ::type_scope:x_'='_x not
R116329:116329 Coq.Init.Logic <> ::type_scope:x_'='_x not
R116317:116317 PL.Imp <> n:1245 var
R116324:116326 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R116322:116323 PL.Imp <> n1:1246 var
R116327:116328 PL.Imp <> n2:1247 var
R116192:116202 PL.Imp <> multi_astep def
R116222:116225 PL.Imp <> ANum constr
R116227:116227 PL.Imp <> n:1245 var
R116208:116212 PL.Imp <> APlus constr
R116217:116218 PL.Imp <> a2:1244 var
R116214:116215 PL.Imp <> a1:1243 var
R116204:116205 PL.Imp <> st:1242 var
R116361:116365 PL.Imp <> APlus constr
R116361:116365 PL.Imp <> APlus constr
R116399:116402 PL.Imp <> ANum constr
R116399:116402 PL.Imp <> ANum constr
R116669:116679 PL.Imp <> multi_astep def
R116669:116679 PL.Imp <> multi_astep def
R116888:116898 PL.Imp <> multi_astep def
R116888:116898 PL.Imp <> multi_astep def
R116989:116997 PL.Imp <> ANum_halt thm
R116989:116997 PL.Imp <> ANum_halt thm
prf 117124:117139 <> AMinus_path_spec
binder 117149:117150 <> st:1248
binder 117152:117153 <> a1:1249
binder 117155:117156 <> a2:1250
binder 117158:117158 <> n:1251
R117201:117206 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R117207:117213 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R117219:117222 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 117214:117215 <> n1:1252
binder 117217:117218 <> n2:1253
R117250:117255 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R117223:117233 PL.Imp <> multi_astep def
R117242:117245 PL.Imp <> ANum constr
R117247:117248 PL.Imp <> n1:1252 var
R117238:117239 PL.Imp <> a1:1249 var
R117235:117236 PL.Imp <> st:1248 var
R117283:117288 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R117256:117266 PL.Imp <> multi_astep def
R117275:117278 PL.Imp <> ANum constr
R117280:117281 PL.Imp <> n2:1253 var
R117271:117272 PL.Imp <> a2:1250 var
R117268:117269 PL.Imp <> st:1248 var
R117290:117293 Coq.Init.Logic <> ::type_scope:x_'='_x not
R117301:117301 Coq.Init.Logic <> ::type_scope:x_'='_x not
R117289:117289 PL.Imp <> n:1251 var
R117296:117298 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R117294:117295 PL.Imp <> n1:1252 var
R117299:117300 PL.Imp <> n2:1253 var
R117163:117173 PL.Imp <> multi_astep def
R117194:117197 PL.Imp <> ANum constr
R117199:117199 PL.Imp <> n:1251 var
R117179:117184 PL.Imp <> AMinus constr
R117189:117190 PL.Imp <> a2:1250 var
R117186:117187 PL.Imp <> a1:1249 var
R117175:117176 PL.Imp <> st:1248 var
R117333:117338 PL.Imp <> AMinus constr
R117333:117338 PL.Imp <> AMinus constr
R117372:117375 PL.Imp <> ANum constr
R117372:117375 PL.Imp <> ANum constr
R117642:117652 PL.Imp <> multi_astep def
R117642:117652 PL.Imp <> multi_astep def
R117861:117871 PL.Imp <> multi_astep def
R117861:117871 PL.Imp <> multi_astep def
R117962:117970 PL.Imp <> ANum_halt thm
R117962:117970 PL.Imp <> ANum_halt thm
prf 118097:118111 <> AMult_path_spec
binder 118121:118122 <> st:1254
binder 118124:118125 <> a1:1255
binder 118127:118128 <> a2:1256
binder 118130:118130 <> n:1257
R118172:118177 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R118178:118184 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R118190:118193 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 118185:118186 <> n1:1258
binder 118188:118189 <> n2:1259
R118221:118226 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R118194:118204 PL.Imp <> multi_astep def
R118213:118216 PL.Imp <> ANum constr
R118218:118219 PL.Imp <> n1:1258 var
R118209:118210 PL.Imp <> a1:1255 var
R118206:118207 PL.Imp <> st:1254 var
R118254:118259 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R118227:118237 PL.Imp <> multi_astep def
R118246:118249 PL.Imp <> ANum constr
R118251:118252 PL.Imp <> n2:1259 var
R118242:118243 PL.Imp <> a2:1256 var
R118239:118240 PL.Imp <> st:1254 var
R118261:118264 Coq.Init.Logic <> ::type_scope:x_'='_x not
R118272:118272 Coq.Init.Logic <> ::type_scope:x_'='_x not
R118260:118260 PL.Imp <> n:1257 var
R118267:118269 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R118265:118266 PL.Imp <> n1:1258 var
R118270:118271 PL.Imp <> n2:1259 var
R118135:118145 PL.Imp <> multi_astep def
R118165:118168 PL.Imp <> ANum constr
R118170:118170 PL.Imp <> n:1257 var
R118151:118155 PL.Imp <> AMult constr
R118160:118161 PL.Imp <> a2:1256 var
R118157:118158 PL.Imp <> a1:1255 var
R118147:118148 PL.Imp <> st:1254 var
R118304:118308 PL.Imp <> AMult constr
R118304:118308 PL.Imp <> AMult constr
R118342:118345 PL.Imp <> ANum constr
R118342:118345 PL.Imp <> ANum constr
R118612:118622 PL.Imp <> multi_astep def
R118612:118622 PL.Imp <> multi_astep def
R118831:118841 PL.Imp <> multi_astep def
R118831:118841 PL.Imp <> multi_astep def
R118932:118940 PL.Imp <> ANum_halt thm
R118932:118940 PL.Imp <> ANum_halt thm
prf 119067:119084 <> BEq_True_path_spec
binder 119094:119095 <> st:1260
binder 119097:119098 <> a1:1261
binder 119100:119101 <> a2:1262
R119138:119143 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R119144:119150 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R119156:119159 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 119151:119152 <> n1:1263
binder 119154:119155 <> n2:1264
R119187:119192 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R119160:119170 PL.Imp <> multi_astep def
R119179:119182 PL.Imp <> ANum constr
R119184:119185 PL.Imp <> n1:1263 var
R119175:119176 PL.Imp <> a1:1261 var
R119172:119173 PL.Imp <> st:1260 var
R119220:119225 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R119193:119203 PL.Imp <> multi_astep def
R119212:119215 PL.Imp <> ANum constr
R119217:119218 PL.Imp <> n2:1264 var
R119208:119209 PL.Imp <> a2:1262 var
R119205:119206 PL.Imp <> st:1260 var
R119228:119230 Coq.Init.Logic <> ::type_scope:x_'='_x not
R119226:119227 PL.Imp <> n1:1263 var
R119231:119232 PL.Imp <> n2:1264 var
R119106:119116 PL.Imp <> multi_bstep def
R119133:119137 PL.Imp <> BTrue constr
R119122:119124 PL.Imp <> BEq constr
R119129:119130 PL.Imp <> a2:1262 var
R119126:119127 PL.Imp <> a1:1261 var
R119118:119119 PL.Imp <> st:1260 var
R119264:119266 PL.Imp <> BEq constr
R119264:119266 PL.Imp <> BEq constr
R119299:119303 PL.Imp <> BTrue constr
R119299:119303 PL.Imp <> BTrue constr
R119563:119573 PL.Imp <> multi_astep def
R119563:119573 PL.Imp <> multi_astep def
R119780:119790 PL.Imp <> multi_astep def
R119780:119790 PL.Imp <> multi_astep def
R119904:119914 PL.Imp <> multi_astep def
R119904:119914 PL.Imp <> multi_astep def
R119969:119989 PL.Imp <> never_BFalse_to_BTrue thm
R119969:119989 PL.Imp <> never_BFalse_to_BTrue thm
prf 120029:120047 <> BEq_False_path_spec
binder 120057:120058 <> st:1265
binder 120060:120061 <> a1:1266
binder 120063:120064 <> a2:1267
R120102:120107 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R120108:120114 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R120120:120123 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 120115:120116 <> n1:1268
binder 120118:120119 <> n2:1269
R120151:120156 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R120124:120134 PL.Imp <> multi_astep def
R120143:120146 PL.Imp <> ANum constr
R120148:120149 PL.Imp <> n1:1268 var
R120139:120140 PL.Imp <> a1:1266 var
R120136:120137 PL.Imp <> st:1265 var
R120184:120189 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R120157:120167 PL.Imp <> multi_astep def
R120176:120179 PL.Imp <> ANum constr
R120181:120182 PL.Imp <> n2:1269 var
R120172:120173 PL.Imp <> a2:1267 var
R120169:120170 PL.Imp <> st:1265 var
R120192:120195 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R120190:120191 PL.Imp <> n1:1268 var
R120196:120197 PL.Imp <> n2:1269 var
R120069:120079 PL.Imp <> multi_bstep def
R120096:120101 PL.Imp <> BFalse constr
R120085:120087 PL.Imp <> BEq constr
R120092:120093 PL.Imp <> a2:1267 var
R120089:120090 PL.Imp <> a1:1266 var
R120081:120082 PL.Imp <> st:1265 var
R120229:120231 PL.Imp <> BEq constr
R120229:120231 PL.Imp <> BEq constr
R120264:120269 PL.Imp <> BFalse constr
R120264:120269 PL.Imp <> BFalse constr
R120529:120539 PL.Imp <> multi_astep def
R120529:120539 PL.Imp <> multi_astep def
R120746:120756 PL.Imp <> multi_astep def
R120746:120756 PL.Imp <> multi_astep def
R120829:120849 PL.Imp <> never_BTrue_to_BFalse thm
R120829:120849 PL.Imp <> never_BTrue_to_BFalse thm
R120930:120940 PL.Imp <> multi_astep def
R120930:120940 PL.Imp <> multi_astep def
R120984:120994 PL.Imp <> multi_astep def
R120984:120994 PL.Imp <> multi_astep def
prf 121049:121066 <> BLe_True_path_spec
binder 121076:121077 <> st:1270
binder 121079:121080 <> a1:1271
binder 121082:121083 <> a2:1272
R121120:121125 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R121126:121132 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R121138:121141 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 121133:121134 <> n1:1273
binder 121136:121137 <> n2:1274
R121169:121174 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R121142:121152 PL.Imp <> multi_astep def
R121161:121164 PL.Imp <> ANum constr
R121166:121167 PL.Imp <> n1:1273 var
R121157:121158 PL.Imp <> a1:1271 var
R121154:121155 PL.Imp <> st:1270 var
R121202:121207 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R121175:121185 PL.Imp <> multi_astep def
R121194:121197 PL.Imp <> ANum constr
R121199:121200 PL.Imp <> n2:1274 var
R121190:121191 PL.Imp <> a2:1272 var
R121187:121188 PL.Imp <> st:1270 var
R121210:121213 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R121208:121209 PL.Imp <> n1:1273 var
R121214:121215 PL.Imp <> n2:1274 var
R121088:121098 PL.Imp <> multi_bstep def
R121115:121119 PL.Imp <> BTrue constr
R121104:121106 PL.Imp <> BLe constr
R121111:121112 PL.Imp <> a2:1272 var
R121108:121109 PL.Imp <> a1:1271 var
R121100:121101 PL.Imp <> st:1270 var
R121247:121249 PL.Imp <> BLe constr
R121247:121249 PL.Imp <> BLe constr
R121282:121286 PL.Imp <> BTrue constr
R121282:121286 PL.Imp <> BTrue constr
R121546:121556 PL.Imp <> multi_astep def
R121546:121556 PL.Imp <> multi_astep def
R121763:121773 PL.Imp <> multi_astep def
R121763:121773 PL.Imp <> multi_astep def
R121887:121897 PL.Imp <> multi_astep def
R121887:121897 PL.Imp <> multi_astep def
R121941:121951 PL.Imp <> multi_astep def
R121941:121951 PL.Imp <> multi_astep def
R122006:122026 PL.Imp <> never_BFalse_to_BTrue thm
R122006:122026 PL.Imp <> never_BFalse_to_BTrue thm
prf 122066:122084 <> BLe_False_path_spec
binder 122094:122095 <> st:1275
binder 122097:122098 <> a1:1276
binder 122100:122101 <> a2:1277
R122139:122144 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R122145:122151 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R122157:122160 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 122152:122153 <> n1:1278
binder 122155:122156 <> n2:1279
R122188:122193 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R122161:122171 PL.Imp <> multi_astep def
R122180:122183 PL.Imp <> ANum constr
R122185:122186 PL.Imp <> n1:1278 var
R122176:122177 PL.Imp <> a1:1276 var
R122173:122174 PL.Imp <> st:1275 var
R122221:122226 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R122194:122204 PL.Imp <> multi_astep def
R122213:122216 PL.Imp <> ANum constr
R122218:122219 PL.Imp <> n2:1279 var
R122209:122210 PL.Imp <> a2:1277 var
R122206:122207 PL.Imp <> st:1275 var
R122229:122231 Coq.ZArith.BinInt <> ::Z_scope:x_'>'_x not
R122227:122228 PL.Imp <> n1:1278 var
R122232:122233 PL.Imp <> n2:1279 var
R122106:122116 PL.Imp <> multi_bstep def
R122133:122138 PL.Imp <> BFalse constr
R122122:122124 PL.Imp <> BLe constr
R122129:122130 PL.Imp <> a2:1277 var
R122126:122127 PL.Imp <> a1:1276 var
R122118:122119 PL.Imp <> st:1275 var
R122265:122267 PL.Imp <> BLe constr
R122265:122267 PL.Imp <> BLe constr
R122300:122305 PL.Imp <> BFalse constr
R122300:122305 PL.Imp <> BFalse constr
R122565:122575 PL.Imp <> multi_astep def
R122565:122575 PL.Imp <> multi_astep def
R122782:122792 PL.Imp <> multi_astep def
R122782:122792 PL.Imp <> multi_astep def
R122865:122885 PL.Imp <> never_BTrue_to_BFalse thm
R122865:122885 PL.Imp <> never_BTrue_to_BFalse thm
R122966:122976 PL.Imp <> multi_astep def
R122966:122976 PL.Imp <> multi_astep def
R123020:123030 PL.Imp <> multi_astep def
R123020:123030 PL.Imp <> multi_astep def
prf 123085:123103 <> BNot_True_path_spec
binder 123113:123114 <> st:1280
binder 123116:123116 <> b:1281
R123150:123155 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R123156:123166 PL.Imp <> multi_bstep def
R123173:123178 PL.Imp <> BFalse constr
R123171:123171 PL.Imp <> b:1281 var
R123168:123169 PL.Imp <> st:1280 var
R123121:123131 PL.Imp <> multi_bstep def
R123145:123149 PL.Imp <> BTrue constr
R123137:123140 PL.Imp <> BNot constr
R123142:123142 PL.Imp <> b:1281 var
R123133:123134 PL.Imp <> st:1280 var
R123210:123213 PL.Imp <> BNot constr
R123210:123213 PL.Imp <> BNot constr
R123243:123247 PL.Imp <> BTrue constr
R123243:123247 PL.Imp <> BTrue constr
R123471:123491 PL.Imp <> never_BFalse_to_BTrue thm
R123471:123491 PL.Imp <> never_BFalse_to_BTrue thm
prf 123550:123569 <> BNot_False_path_spec
binder 123579:123580 <> st:1282
binder 123582:123582 <> b:1283
R123617:123622 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R123623:123633 PL.Imp <> multi_bstep def
R123640:123644 PL.Imp <> BTrue constr
R123638:123638 PL.Imp <> b:1283 var
R123635:123636 PL.Imp <> st:1282 var
R123587:123597 PL.Imp <> multi_bstep def
R123611:123616 PL.Imp <> BFalse constr
R123603:123606 PL.Imp <> BNot constr
R123608:123608 PL.Imp <> b:1283 var
R123599:123600 PL.Imp <> st:1282 var
R123676:123679 PL.Imp <> BNot constr
R123676:123679 PL.Imp <> BNot constr
R123709:123714 PL.Imp <> BFalse constr
R123709:123714 PL.Imp <> BFalse constr
R123957:123977 PL.Imp <> never_BTrue_to_BFalse thm
R123957:123977 PL.Imp <> never_BTrue_to_BFalse thm
prf 124017:124035 <> BAnd_True_path_spec
binder 124045:124046 <> st:1284
binder 124048:124049 <> b1:1285
binder 124051:124052 <> b2:1286
R124090:124095 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R124119:124124 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R124096:124106 PL.Imp <> multi_bstep def
R124114:124118 PL.Imp <> BTrue constr
R124111:124112 PL.Imp <> b1:1285 var
R124108:124109 PL.Imp <> st:1284 var
R124125:124135 PL.Imp <> multi_bstep def
R124143:124147 PL.Imp <> BTrue constr
R124140:124141 PL.Imp <> b2:1286 var
R124137:124138 PL.Imp <> st:1284 var
R124057:124067 PL.Imp <> multi_bstep def
R124085:124089 PL.Imp <> BTrue constr
R124073:124076 PL.Imp <> BAnd constr
R124081:124082 PL.Imp <> b2:1286 var
R124078:124079 PL.Imp <> b1:1285 var
R124069:124070 PL.Imp <> st:1284 var
R124179:124182 PL.Imp <> BAnd constr
R124179:124182 PL.Imp <> BAnd constr
R124215:124219 PL.Imp <> BTrue constr
R124215:124219 PL.Imp <> BTrue constr
R124435:124445 PL.Imp <> multi_bstep def
R124453:124457 PL.Imp <> BTrue constr
R124435:124445 PL.Imp <> multi_bstep def
R124453:124457 PL.Imp <> BTrue constr
R124573:124593 PL.Imp <> never_BFalse_to_BTrue thm
R124573:124593 PL.Imp <> never_BFalse_to_BTrue thm
prf 124633:124652 <> BAnd_False_path_spec
binder 124662:124663 <> st:1287
binder 124665:124666 <> b1:1288
binder 124668:124669 <> b2:1289
R124708:124713 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R124738:124743 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R124714:124724 PL.Imp <> multi_bstep def
R124732:124737 PL.Imp <> BFalse constr
R124729:124730 PL.Imp <> b1:1288 var
R124726:124727 PL.Imp <> st:1287 var
R124744:124754 PL.Imp <> multi_bstep def
R124762:124767 PL.Imp <> BFalse constr
R124759:124760 PL.Imp <> b2:1289 var
R124756:124757 PL.Imp <> st:1287 var
R124674:124684 PL.Imp <> multi_bstep def
R124702:124707 PL.Imp <> BFalse constr
R124690:124693 PL.Imp <> BAnd constr
R124698:124699 PL.Imp <> b2:1289 var
R124695:124696 PL.Imp <> b1:1288 var
R124686:124687 PL.Imp <> st:1287 var
R124799:124802 PL.Imp <> BAnd constr
R124799:124802 PL.Imp <> BAnd constr
R124835:124840 PL.Imp <> BFalse constr
R124835:124840 PL.Imp <> BFalse constr
R125058:125068 PL.Imp <> multi_bstep def
R125076:125081 PL.Imp <> BFalse constr
R125058:125068 PL.Imp <> multi_bstep def
R125076:125081 PL.Imp <> BFalse constr
prf 125222:125235 <> CAss_path_spec
binder 125245:125245 <> X:1290
binder 125247:125247 <> a:1291
binder 125249:125251 <> st1:1292
binder 125253:125255 <> st2:1293
R125300:125305 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R125306:125312 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R125314:125317 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 125313:125313 <> n:1294
R125344:125349 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R125318:125328 PL.Imp <> multi_astep def
R125337:125340 PL.Imp <> ANum constr
R125342:125342 PL.Imp <> n:1294 var
R125334:125334 PL.Imp <> a:1291 var
R125330:125332 PL.Imp <> st1:1292 var
R125359:125365 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R125405:125405 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R125355:125357 Coq.Init.Logic <> ::type_scope:x_'='_x not
R125350:125352 PL.Imp <> st2:1293 var
R125354:125354 PL.Imp <> X:1290 var
R125358:125358 PL.Imp <> n:1294 var
R125377:125379 PL.Imp <> var def
binder 125373:125373 <> Y:1295
R125388:125391 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R125397:125399 Coq.Init.Logic <> ::type_scope:x_'='_x not
R125392:125394 PL.Imp <> st1:1292 var
R125396:125396 PL.Imp <> Y:1295 var
R125400:125402 PL.Imp <> st2:1293 var
R125404:125404 PL.Imp <> Y:1295 var
R125383:125386 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R125382:125382 PL.Imp <> X:1290 var
R125387:125387 PL.Imp <> Y:1295 var
R125260:125270 PL.Imp <> multi_cstep def
R125288:125288 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R125294:125295 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R125299:125299 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R125289:125293 PL.Imp <> CSkip constr
R125296:125298 PL.Imp <> st2:1293 var
R125272:125272 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R125281:125282 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R125286:125286 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R125273:125276 PL.Imp <> CAss constr
R125280:125280 PL.Imp <> a:1291 var
R125278:125278 PL.Imp <> X:1290 var
R125283:125285 PL.Imp <> st1:1292 var
R125437:125440 PL.Imp <> CAss constr
R125437:125440 PL.Imp <> CAss constr
R125471:125475 PL.Imp <> CSkip constr
R125471:125475 PL.Imp <> CSkip constr
R125711:125721 PL.Imp <> multi_astep def
R125711:125721 PL.Imp <> multi_astep def
R125809:125818 PL.Imp <> CSkip_halt thm
R125809:125818 PL.Imp <> CSkip_halt thm
prf 125931:125944 <> CSeq_path_spec
binder 125954:125955 <> c1:1296
binder 125957:125959 <> st1:1297
binder 125961:125962 <> c2:1298
binder 125964:125966 <> st3:1299
R126013:126018 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R126019:126025 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R126029:126032 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 126026:126028 <> st2:1300
R126067:126072 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R126033:126043 PL.Imp <> multi_cstep def
R126055:126055 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126061:126062 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126066:126066 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126056:126060 PL.Imp <> CSkip constr
R126063:126065 PL.Imp <> st2:1300 var
R126045:126045 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126048:126049 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126053:126053 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126046:126047 PL.Imp <> c1:1296 var
R126050:126052 PL.Imp <> st1:1297 var
R126073:126083 PL.Imp <> multi_cstep def
R126095:126095 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126101:126102 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126106:126106 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126096:126100 PL.Imp <> CSkip constr
R126103:126105 PL.Imp <> st3:1299 var
R126085:126085 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126088:126089 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126093:126093 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126086:126087 PL.Imp <> c2:1298 var
R126090:126092 PL.Imp <> st2:1300 var
R125971:125981 PL.Imp <> multi_cstep def
R126001:126001 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126007:126008 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126012:126012 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126002:126006 PL.Imp <> CSkip constr
R126009:126011 PL.Imp <> st3:1299 var
R125983:125983 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R125994:125995 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R125999:125999 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R125984:125987 PL.Imp <> CSeq constr
R125992:125993 PL.Imp <> c2:1298 var
R125989:125990 PL.Imp <> c1:1296 var
R125996:125998 PL.Imp <> st1:1297 var
R126138:126141 PL.Imp <> CSeq constr
R126138:126141 PL.Imp <> CSeq constr
R126174:126178 PL.Imp <> CSkip constr
R126174:126178 PL.Imp <> CSkip constr
R126424:126434 PL.Imp <> multi_cstep def
R126446:126446 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126455:126456 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126460:126460 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126447:126450 PL.Imp <> ::imp_scope:'Skip' not
R126436:126436 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126439:126440 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126444:126444 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126424:126434 PL.Imp <> multi_cstep def
R126446:126446 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126455:126456 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126460:126460 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126447:126450 PL.Imp <> ::imp_scope:'Skip' not
R126436:126436 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126439:126440 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126444:126444 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
prf 126582:126594 <> CIf_path_spec
binder 126604:126604 <> b:1301
binder 126606:126607 <> c1:1302
binder 126609:126610 <> c2:1303
binder 126612:126614 <> st1:1304
binder 126616:126618 <> st2:1305
R126666:126671 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R126735:126740 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R126695:126700 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R126672:126682 PL.Imp <> multi_bstep def
R126690:126694 PL.Imp <> BTrue constr
R126688:126688 PL.Imp <> b:1301 var
R126684:126686 PL.Imp <> st1:1304 var
R126701:126711 PL.Imp <> multi_cstep def
R126723:126723 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126729:126730 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126734:126734 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126724:126728 PL.Imp <> CSkip constr
R126731:126733 PL.Imp <> st2:1305 var
R126713:126713 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126716:126717 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126721:126721 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126714:126715 PL.Imp <> c1:1302 var
R126718:126720 PL.Imp <> st1:1304 var
R126765:126770 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R126741:126751 PL.Imp <> multi_bstep def
R126759:126764 PL.Imp <> BFalse constr
R126757:126757 PL.Imp <> b:1301 var
R126753:126755 PL.Imp <> st1:1304 var
R126771:126781 PL.Imp <> multi_cstep def
R126793:126793 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126799:126800 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126804:126804 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126794:126798 PL.Imp <> CSkip constr
R126801:126803 PL.Imp <> st2:1305 var
R126783:126783 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126786:126787 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126791:126791 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126784:126785 PL.Imp <> c2:1303 var
R126788:126790 PL.Imp <> st1:1304 var
R126623:126633 PL.Imp <> multi_cstep def
R126654:126654 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126660:126661 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126665:126665 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126655:126659 PL.Imp <> CSkip constr
R126662:126664 PL.Imp <> st2:1305 var
R126635:126635 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126647:126648 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126652:126652 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R126636:126638 PL.Imp <> CIf constr
R126645:126646 PL.Imp <> c2:1303 var
R126642:126643 PL.Imp <> c1:1302 var
R126640:126640 PL.Imp <> b:1301 var
R126649:126651 PL.Imp <> st1:1304 var
R126836:126838 PL.Imp <> CIf constr
R126836:126838 PL.Imp <> CIf constr
R126873:126877 PL.Imp <> CSkip constr
R126873:126877 PL.Imp <> CSkip constr
R127115:127125 PL.Imp <> multi_bstep def
R127131:127135 PL.Imp <> BTrue constr
R127115:127125 PL.Imp <> multi_bstep def
R127131:127135 PL.Imp <> BTrue constr
R127205:127215 PL.Imp <> multi_bstep def
R127221:127226 PL.Imp <> BFalse constr
R127205:127215 PL.Imp <> multi_bstep def
R127221:127226 PL.Imp <> BFalse constr
R127294:127304 PL.Imp <> multi_bstep def
R127314:127318 PL.Imp <> BTrue constr
R127308:127312 PL.Imp <> BTrue constr
R127294:127304 PL.Imp <> multi_bstep def
R127314:127318 PL.Imp <> BTrue constr
R127308:127312 PL.Imp <> BTrue constr
R127366:127376 PL.Imp <> multi_bstep def
R127387:127392 PL.Imp <> BFalse constr
R127380:127385 PL.Imp <> BFalse constr
R127366:127376 PL.Imp <> multi_bstep def
R127387:127392 PL.Imp <> BFalse constr
R127380:127385 PL.Imp <> BFalse constr
def 127441:127451 <> CWhile_path
binder 127453:127453 <> b:1306
binder 127455:127456 <> c1:1307
binder 127458:127460 <> st1:1308
binder 127462:127464 <> st2:1309
R127470:127472 Coq.Init.Datatypes <> nat ind
binder 127467:127467 <> n:1310
R127491:127491 PL.Imp <> n:1310 var
R127502:127502 Coq.Init.Datatypes <> O constr
R127531:127534 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R127507:127517 PL.Imp <> multi_bstep def
R127525:127530 PL.Imp <> BFalse constr
R127523:127523 PL.Imp <> b:1306 var
R127519:127521 PL.Imp <> st1:1308 var
R127538:127540 Coq.Init.Logic <> ::type_scope:x_'='_x not
R127535:127537 PL.Imp <> st1:1308 var
R127541:127543 PL.Imp <> st2:1309 var
R127549:127549 Coq.Init.Datatypes <> S constr
R127557:127563 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R127568:127581 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 127564:127567 <> st1':1313
R127605:127620 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R127582:127592 PL.Imp <> multi_bstep def
R127600:127604 PL.Imp <> BTrue constr
R127598:127598 PL.Imp <> b:1306 var
R127594:127596 PL.Imp <> st1:1308 var
R127656:127671 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R127621:127631 PL.Imp <> multi_cstep def
R127643:127643 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R127649:127650 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R127655:127655 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R127644:127648 PL.Imp <> CSkip constr
R127651:127654 PL.Imp <> st1':1313 var
R127633:127633 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R127636:127637 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R127641:127641 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R127634:127635 PL.Imp <> c1:1307 var
R127638:127640 PL.Imp <> st1:1308 var
R127672:127682 PL.Imp <> CWhile_path:1311 def
R127694:127696 PL.Imp <> st2:1309 var
R127689:127692 PL.Imp <> st1':1313 var
R127686:127687 PL.Imp <> c1:1307 var
R127684:127684 PL.Imp <> b:1306 var
def 127720:127731 <> CWhile_path'
binder 127733:127734 <> b':1314
binder 127736:127736 <> b:1315
binder 127738:127739 <> c1:1316
binder 127741:127743 <> st1:1317
binder 127745:127747 <> st2:1318
R127753:127755 Coq.Init.Datatypes <> nat ind
binder 127750:127750 <> n:1319
R127774:127774 PL.Imp <> n:1319 var
R127785:127785 Coq.Init.Datatypes <> O constr
R127815:127818 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R127790:127800 PL.Imp <> multi_bstep def
R127809:127814 PL.Imp <> BFalse constr
R127806:127807 PL.Imp <> b':1314 var
R127802:127804 PL.Imp <> st1:1317 var
R127822:127824 Coq.Init.Logic <> ::type_scope:x_'='_x not
R127819:127821 PL.Imp <> st1:1317 var
R127825:127827 PL.Imp <> st2:1318 var
R127833:127833 Coq.Init.Datatypes <> S constr
R127841:127847 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R127852:127865 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 127848:127851 <> st1':1321
R127890:127905 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R127866:127876 PL.Imp <> multi_bstep def
R127885:127889 PL.Imp <> BTrue constr
R127882:127883 PL.Imp <> b':1314 var
R127878:127880 PL.Imp <> st1:1317 var
R127941:127956 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R127906:127916 PL.Imp <> multi_cstep def
R127928:127928 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R127934:127935 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R127940:127940 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R127929:127933 PL.Imp <> CSkip constr
R127936:127939 PL.Imp <> st1':1321 var
R127918:127918 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R127921:127922 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R127926:127926 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R127919:127920 PL.Imp <> c1:1316 var
R127923:127925 PL.Imp <> st1:1317 var
R127957:127967 PL.Imp <> CWhile_path def
R127979:127981 PL.Imp <> st2:1318 var
R127974:127977 PL.Imp <> st1':1321 var
R127971:127972 PL.Imp <> c1:1316 var
R127969:127969 PL.Imp <> b:1315 var
def 128005:128017 <> CWhile_path''
binder 128019:128021 <> c1':1322
binder 128023:128023 <> b:1323
binder 128025:128026 <> c1:1324
binder 128028:128030 <> st1:1325
binder 128032:128034 <> st2:1326
R128040:128042 Coq.Init.Datatypes <> nat ind
binder 128037:128037 <> n:1327
R128055:128061 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R128066:128071 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 128062:128065 <> st1':1328
R128108:128115 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R128072:128082 PL.Imp <> multi_cstep def
R128095:128095 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R128101:128102 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R128107:128107 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R128096:128100 PL.Imp <> CSkip constr
R128103:128106 PL.Imp <> st1':1328 var
R128084:128084 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R128088:128089 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R128093:128093 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R128085:128087 PL.Imp <> c1':1322 var
R128090:128092 PL.Imp <> st1:1325 var
R128116:128126 PL.Imp <> CWhile_path def
R128142:128142 PL.Imp <> n:1327 var
R128138:128140 PL.Imp <> st2:1326 var
R128133:128136 PL.Imp <> st1':1328 var
R128130:128131 PL.Imp <> c1:1324 var
R128128:128128 PL.Imp <> b:1323 var
prf 128152:128171 <> CWhile_path_spec_aux
binder 128181:128183 <> st1:1329
binder 128185:128187 <> st2:1330
binder 128189:128189 <> c:1331
binder 128191:128192 <> c':1332
R128227:128232 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R128233:128233 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R128334:128340 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
binder 128241:128241 <> b:1333
binder 128243:128244 <> c1:1334
R128267:128275 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R128289:128297 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R128298:128304 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R128306:128307 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 128305:128305 <> n:1335
R128308:128318 PL.Imp <> CWhile_path def
R128333:128333 PL.Imp <> n:1335 var
R128329:128331 PL.Imp <> st2:1330 var
R128325:128327 PL.Imp <> st1:1329 var
R128322:128323 PL.Imp <> c1:1334 var
R128320:128320 PL.Imp <> b:1333 var
R128278:128280 Coq.Init.Logic <> ::type_scope:x_'='_x not
R128276:128277 PL.Imp <> c':1332 var
R128281:128284 PL.Imp <> ::imp_scope:'Skip' not
R128253:128255 Coq.Init.Logic <> ::type_scope:x_'='_x not
R128252:128252 PL.Imp <> c:1331 var
R128256:128261 PL.Imp <> CWhile constr
R128265:128266 PL.Imp <> c1:1334 var
R128263:128263 PL.Imp <> b:1333 var
R128341:128341 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R128474:128481 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R128603:128603 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
binder 128349:128350 <> b':1336
binder 128352:128352 <> b:1337
binder 128354:128355 <> c1:1338
R128403:128411 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R128425:128433 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R128434:128440 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R128442:128443 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 128441:128441 <> n:1339
R128444:128455 PL.Imp <> CWhile_path' def
R128473:128473 PL.Imp <> n:1339 var
R128469:128471 PL.Imp <> st2:1330 var
R128465:128467 PL.Imp <> st1:1329 var
R128462:128463 PL.Imp <> c1:1338 var
R128460:128460 PL.Imp <> b:1337 var
R128457:128458 PL.Imp <> b':1336 var
R128414:128416 Coq.Init.Logic <> ::type_scope:x_'='_x not
R128412:128413 PL.Imp <> c':1332 var
R128417:128420 PL.Imp <> ::imp_scope:'Skip' not
R128364:128366 Coq.Init.Logic <> ::type_scope:x_'='_x not
R128363:128363 PL.Imp <> c:1331 var
R128367:128369 PL.Imp <> CIf constr
R128398:128402 PL.Imp <> CSkip constr
R128375:128378 PL.Imp <> CSeq constr
R128384:128389 PL.Imp <> CWhile constr
R128393:128394 PL.Imp <> c1:1338 var
R128391:128391 PL.Imp <> b:1337 var
R128380:128381 PL.Imp <> c1:1338 var
R128371:128372 PL.Imp <> b':1336 var
binder 128489:128491 <> c1':1340
binder 128493:128493 <> b:1341
binder 128495:128496 <> c1:1342
R128530:128538 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R128552:128560 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R128561:128567 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R128569:128570 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 128568:128568 <> n:1343
R128571:128583 PL.Imp <> CWhile_path'' def
R128602:128602 PL.Imp <> n:1343 var
R128598:128600 PL.Imp <> st2:1330 var
R128594:128596 PL.Imp <> st1:1329 var
R128591:128592 PL.Imp <> c1:1342 var
R128589:128589 PL.Imp <> b:1341 var
R128585:128587 PL.Imp <> c1':1340 var
R128541:128543 Coq.Init.Logic <> ::type_scope:x_'='_x not
R128539:128540 PL.Imp <> c':1332 var
R128544:128547 PL.Imp <> ::imp_scope:'Skip' not
R128505:128507 Coq.Init.Logic <> ::type_scope:x_'='_x not
R128504:128504 PL.Imp <> c:1331 var
R128508:128511 PL.Imp <> CSeq constr
R128518:128523 PL.Imp <> CWhile constr
R128527:128528 PL.Imp <> c1:1342 var
R128525:128525 PL.Imp <> b:1341 var
R128513:128515 PL.Imp <> c1':1340 var
R128197:128207 PL.Imp <> multi_cstep def
R128218:128218 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R128221:128222 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R128226:128226 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R128219:128220 PL.Imp <> c':1332 var
R128223:128225 PL.Imp <> st2:1330 var
R128209:128209 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R128211:128212 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R128216:128216 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R128210:128210 PL.Imp <> c:1331 var
R128213:128215 PL.Imp <> st1:1329 var
R129644:129644 Coq.Init.Datatypes <> S constr
R129644:129644 Coq.Init.Datatypes <> S constr
R129665:129677 PL.Imp <> CWhile_path'' def
R129775:129785 PL.Imp <> multi_bstep def
R129795:129799 PL.Imp <> BTrue constr
R129789:129793 PL.Imp <> BTrue constr
R129775:129785 PL.Imp <> multi_bstep def
R129795:129799 PL.Imp <> BTrue constr
R129789:129793 PL.Imp <> BTrue constr
R129850:129850 Coq.Init.Datatypes <> O constr
R129850:129850 Coq.Init.Datatypes <> O constr
R129884:129894 PL.Imp <> multi_bstep def
R129905:129910 PL.Imp <> BFalse constr
R129898:129903 PL.Imp <> BFalse constr
R129884:129894 PL.Imp <> multi_bstep def
R129905:129910 PL.Imp <> BFalse constr
R129898:129903 PL.Imp <> BFalse constr
R129945:129954 PL.Imp <> CSkip_halt thm
R129945:129954 PL.Imp <> CSkip_halt thm
R130201:130213 PL.Imp <> CWhile_path'' def
R130237:130249 PL.Imp <> CWhile_path'' def
R130326:130336 PL.Imp <> multi_cstep def
R130349:130349 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R130358:130359 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R130364:130364 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R130350:130353 PL.Imp <> ::imp_scope:'Skip' not
R130338:130338 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R130342:130343 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R130347:130347 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R130326:130336 PL.Imp <> multi_cstep def
R130349:130349 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R130358:130359 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R130364:130364 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R130350:130353 PL.Imp <> ::imp_scope:'Skip' not
R130338:130338 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R130342:130343 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R130347:130347 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R130599:130611 PL.Imp <> CWhile_path'' def
prf 130682:130697 <> CWhile_path_spec
binder 130707:130707 <> b:1344
binder 130709:130710 <> c1:1345
binder 130712:130714 <> st1:1346
binder 130716:130718 <> st2:1347
R130766:130771 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R130772:130778 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R130780:130781 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 130779:130779 <> n:1348
R130782:130792 PL.Imp <> CWhile_path def
R130807:130807 PL.Imp <> n:1348 var
R130803:130805 PL.Imp <> st2:1347 var
R130799:130801 PL.Imp <> st1:1346 var
R130796:130797 PL.Imp <> c1:1345 var
R130794:130794 PL.Imp <> b:1344 var
R130723:130733 PL.Imp <> multi_cstep def
R130754:130754 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R130760:130761 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R130765:130765 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R130755:130759 PL.Imp <> CSkip constr
R130762:130764 PL.Imp <> st2:1347 var
R130735:130735 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R130747:130748 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R130752:130752 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R130736:130741 PL.Imp <> CWhile constr
R130745:130746 PL.Imp <> c1:1345 var
R130743:130743 PL.Imp <> b:1344 var
R130749:130751 PL.Imp <> st1:1346 var
R130839:130844 PL.Imp <> CWhile constr
R130839:130844 PL.Imp <> CWhile constr
R130876:130880 PL.Imp <> CSkip constr
R130876:130880 PL.Imp <> CSkip constr
R130930:130949 PL.Imp <> CWhile_path_spec_aux thm
R130930:130949 PL.Imp <> CWhile_path_spec_aux thm
prf 131111:131130 <> semantic_equiv_aexp2
binder 131140:131141 <> st:1349
binder 131143:131143 <> a:1350
binder 131145:131145 <> n:1351
R131175:131178 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R131189:131191 Coq.Init.Logic <> ::type_scope:x_'='_x not
R131179:131183 PL.Imp <> aeval def
R131187:131188 PL.Imp <> st:1349 var
R131185:131185 PL.Imp <> a:1350 var
R131192:131192 PL.Imp <> n:1351 var
R131150:131160 PL.Imp <> multi_astep def
R131168:131171 PL.Imp <> ANum constr
R131173:131173 PL.Imp <> n:1351 var
R131165:131165 PL.Imp <> a:1350 var
R131162:131163 PL.Imp <> st:1349 var
R131264:131272 PL.Imp <> ANum_halt thm
R131264:131272 PL.Imp <> ANum_halt thm
R131354:131364 PL.Imp <> multi_astep def
R131354:131364 PL.Imp <> multi_astep def
R131495:131509 PL.Imp <> APlus_path_spec thm
R131495:131509 PL.Imp <> APlus_path_spec thm
R131610:131617 PL.Imp <> add def
R131635:131650 PL.Imp <> AMinus_path_spec thm
R131635:131650 PL.Imp <> AMinus_path_spec thm
R131751:131758 PL.Imp <> sub def
R131776:131790 PL.Imp <> AMult_path_spec thm
R131776:131790 PL.Imp <> AMult_path_spec thm
R131891:131898 PL.Imp <> mul def
prf 131920:131939 <> semantic_equiv_bexp2
binder 131949:131950 <> st:1352
binder 131952:131952 <> b:1353
R131957:131957 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R131994:132001 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R132041:132041 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R131980:131983 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R131984:131988 PL.Imp <> beval def
R131992:131993 PL.Imp <> st:1352 var
R131990:131990 PL.Imp <> b:1353 var
R131958:131968 PL.Imp <> multi_bstep def
R131975:131979 PL.Imp <> BTrue constr
R131973:131973 PL.Imp <> b:1353 var
R131970:131971 PL.Imp <> st:1352 var
R132025:132028 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R132029:132030 Coq.Init.Logic <> ::type_scope:'~'_x not
R132031:132035 PL.Imp <> beval def
R132039:132040 PL.Imp <> st:1352 var
R132037:132037 PL.Imp <> b:1353 var
R132002:132012 PL.Imp <> multi_bstep def
R132019:132024 PL.Imp <> BFalse constr
R132017:132017 PL.Imp <> b:1353 var
R132014:132015 PL.Imp <> st:1352 var
R132114:132114 Coq.Init.Logic <> I constr
R132114:132114 Coq.Init.Logic <> I constr
R132129:132149 PL.Imp <> never_BTrue_to_BFalse thm
R132129:132149 PL.Imp <> never_BTrue_to_BFalse thm
R132206:132226 PL.Imp <> never_BFalse_to_BTrue thm
R132206:132226 PL.Imp <> never_BFalse_to_BTrue thm
R132296:132313 PL.Imp <> BEq_True_path_spec thm
R132296:132313 PL.Imp <> BEq_True_path_spec thm
R132374:132393 PL.Imp <> semantic_equiv_aexp2 thm
R132374:132393 PL.Imp <> semantic_equiv_aexp2 thm
R132413:132432 PL.Imp <> semantic_equiv_aexp2 thm
R132413:132432 PL.Imp <> semantic_equiv_aexp2 thm
R132454:132465 PL.Imp <> test_eq def
R132485:132503 PL.Imp <> BEq_False_path_spec thm
R132485:132503 PL.Imp <> BEq_False_path_spec thm
R132564:132583 PL.Imp <> semantic_equiv_aexp2 thm
R132564:132583 PL.Imp <> semantic_equiv_aexp2 thm
R132603:132622 PL.Imp <> semantic_equiv_aexp2 thm
R132603:132622 PL.Imp <> semantic_equiv_aexp2 thm
R132644:132655 PL.Imp <> test_eq def
R132694:132711 PL.Imp <> BLe_True_path_spec thm
R132694:132711 PL.Imp <> BLe_True_path_spec thm
R132772:132791 PL.Imp <> semantic_equiv_aexp2 thm
R132772:132791 PL.Imp <> semantic_equiv_aexp2 thm
R132811:132830 PL.Imp <> semantic_equiv_aexp2 thm
R132811:132830 PL.Imp <> semantic_equiv_aexp2 thm
R132852:132863 PL.Imp <> test_le def
R132883:132901 PL.Imp <> BLe_False_path_spec thm
R132883:132901 PL.Imp <> BLe_False_path_spec thm
R132962:132981 PL.Imp <> semantic_equiv_aexp2 thm
R132962:132981 PL.Imp <> semantic_equiv_aexp2 thm
R133001:133020 PL.Imp <> semantic_equiv_aexp2 thm
R133001:133020 PL.Imp <> semantic_equiv_aexp2 thm
R133042:133053 PL.Imp <> test_le def
R133125:133143 PL.Imp <> BNot_True_path_spec thm
R133125:133143 PL.Imp <> BNot_True_path_spec thm
R133164:133178 PL.Imp <> complement def
R133200:133219 PL.Imp <> BNot_False_path_spec thm
R133200:133219 PL.Imp <> BNot_False_path_spec thm
R133240:133254 PL.Imp <> complement def
R133295:133313 PL.Imp <> BAnd_True_path_spec thm
R133295:133313 PL.Imp <> BAnd_True_path_spec thm
R133334:133347 PL.Imp <> intersect def
R133369:133388 PL.Imp <> BAnd_False_path_spec thm
R133369:133388 PL.Imp <> BAnd_False_path_spec thm
R133409:133422 PL.Imp <> intersect def
prf 133446:133464 <> semantic_equiv_com2
binder 133474:133474 <> c:1354
binder 133476:133478 <> st1:1355
binder 133480:133482 <> st2:1356
R133520:133523 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R133524:133528 PL.Imp <> ceval def
R133536:133538 PL.Imp <> st2:1356 var
R133532:133534 PL.Imp <> st1:1355 var
R133530:133530 PL.Imp <> c:1354 var
R133487:133497 PL.Imp <> multi_cstep def
R133508:133508 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R133514:133515 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R133519:133519 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R133509:133513 PL.Imp <> CSkip constr
R133516:133518 PL.Imp <> st2:1356 var
R133499:133499 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R133501:133502 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R133506:133506 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R133500:133500 PL.Imp <> c:1354 var
R133503:133505 PL.Imp <> st1:1355 var
R133609:133618 PL.Imp <> CSkip_halt thm
R133609:133618 PL.Imp <> CSkip_halt thm
R133680:133688 PL.Imp <> id def
R133718:133731 PL.Imp <> CAss_path_spec thm
R133718:133731 PL.Imp <> CAss_path_spec thm
R133782:133801 PL.Imp <> semantic_equiv_aexp2 thm
R133782:133801 PL.Imp <> semantic_equiv_aexp2 thm
R133821:133830 PL.Imp <> ceval_CAss thm
R133821:133830 PL.Imp <> ceval_CAss thm
R133821:133830 PL.Imp <> ceval_CAss thm
R133857:133870 PL.Imp <> CSeq_path_spec thm
R133857:133870 PL.Imp <> CSeq_path_spec thm
R133965:133974 PL.Imp <> ceval_CSeq thm
R133965:133974 PL.Imp <> ceval_CSeq thm
R133965:133974 PL.Imp <> ceval_CSeq thm
R133988:134000 PL.Imp <> concat def
R134041:134053 PL.Imp <> CIf_path_spec thm
R134041:134053 PL.Imp <> CIf_path_spec thm
R134073:134081 PL.Imp <> ceval_CIf thm
R134073:134081 PL.Imp <> ceval_CIf thm
R134073:134081 PL.Imp <> ceval_CIf thm
R134095:134100 PL.Imp <> if_sem def
R134114:134125 PL.Imp <> union def
R134139:134151 PL.Imp <> concat def
R134165:134179 PL.Imp <> test_rel def
R134259:134278 PL.Imp <> semantic_equiv_bexp2 thm
R134259:134278 PL.Imp <> semantic_equiv_bexp2 thm
R134348:134363 PL.Imp <> CWhile_path_spec thm
R134348:134363 PL.Imp <> CWhile_path_spec thm
R134383:134394 PL.Imp <> ceval_CWhile thm
R134383:134394 PL.Imp <> ceval_CWhile thm
R134383:134394 PL.Imp <> ceval_CWhile thm
R134408:134415 PL.Imp <> loop_sem def
R134429:134446 PL.Imp <> omega_union def
R134551:134570 PL.Imp <> semantic_equiv_bexp2 thm
R134551:134570 PL.Imp <> semantic_equiv_bexp2 thm
R134627:134641 PL.Imp <> test_rel def
R134657:134671 PL.Imp <> complement def
R134767:134779 PL.Imp <> concat def
R134795:134809 PL.Imp <> test_rel def
R134824:134843 PL.Imp <> semantic_equiv_bexp2 thm
R134824:134843 PL.Imp <> semantic_equiv_bexp2 thm
prf 135078:135091 <> semantic_equiv
binder 135101:135101 <> c:1357
binder 135103:135105 <> st1:1358
binder 135107:135109 <> st2:1359
R135129:135133 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R135114:135118 PL.Imp <> ceval def
R135126:135128 PL.Imp <> st2:1359 var
R135122:135124 PL.Imp <> st1:1358 var
R135120:135120 PL.Imp <> c:1357 var
R135134:135144 PL.Imp <> multi_cstep def
R135155:135155 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R135161:135162 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R135166:135166 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R135156:135160 PL.Imp <> CSkip constr
R135163:135165 PL.Imp <> st2:1359 var
R135146:135146 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R135148:135149 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R135153:135153 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R135147:135147 PL.Imp <> c:1357 var
R135150:135152 PL.Imp <> st1:1358 var
R135205:135223 PL.Imp <> semantic_equiv_com1 thm
R135205:135223 PL.Imp <> semantic_equiv_com1 thm
R135236:135254 PL.Imp <> semantic_equiv_com2 thm
R135236:135254 PL.Imp <> semantic_equiv_com2 thm
prf 135412:135425 <> aeval_preserve
binder 135435:135436 <> st:1360
binder 135438:135439 <> a1:1361
binder 135441:135442 <> a2:1362
R135461:135466 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R135478:135481 Coq.Init.Logic <> ::type_scope:x_'='_x not
R135467:135471 PL.Imp <> aeval def
R135476:135477 PL.Imp <> st:1360 var
R135473:135474 PL.Imp <> a1:1361 var
R135482:135486 PL.Imp <> aeval def
R135491:135492 PL.Imp <> st:1360 var
R135488:135489 PL.Imp <> a2:1362 var
R135447:135451 PL.Imp <> astep ind
R135459:135460 PL.Imp <> a2:1362 var
R135456:135457 PL.Imp <> a1:1361 var
R135453:135454 PL.Imp <> st:1360 var
R135577:135584 PL.Imp <> add def
R135618:135625 PL.Imp <> add def
R135659:135666 PL.Imp <> add def
R135669:135681 PL.Imp <> constant_func def
R135723:135730 PL.Imp <> sub def
R135764:135771 PL.Imp <> sub def
R135805:135812 PL.Imp <> sub def
R135815:135827 PL.Imp <> constant_func def
R135869:135876 PL.Imp <> mul def
R135910:135917 PL.Imp <> mul def
R135951:135958 PL.Imp <> mul def
R135961:135973 PL.Imp <> constant_func def
prf 136005:136018 <> beval_preserve
binder 136028:136029 <> st:1363
binder 136031:136032 <> b1:1364
binder 136034:136035 <> b2:1365
R136054:136060 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R136089:136089 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R136072:136077 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R136061:136065 PL.Imp <> beval def
R136070:136071 PL.Imp <> st:1363 var
R136067:136068 PL.Imp <> b1:1364 var
R136078:136082 PL.Imp <> beval def
R136087:136088 PL.Imp <> st:1363 var
R136084:136085 PL.Imp <> b2:1365 var
R136040:136044 PL.Imp <> bstep ind
R136052:136053 PL.Imp <> b2:1365 var
R136049:136050 PL.Imp <> b1:1364 var
R136046:136047 PL.Imp <> st:1363 var
R136134:136147 PL.Imp <> aeval_preserve thm
R136134:136147 PL.Imp <> aeval_preserve thm
R136177:136188 PL.Imp <> test_eq def
R136210:136223 PL.Imp <> aeval_preserve thm
R136210:136223 PL.Imp <> aeval_preserve thm
R136254:136265 PL.Imp <> test_eq def
R136299:136310 PL.Imp <> test_eq def
R136313:136321 PL.Imp <> full def
R136357:136368 PL.Imp <> test_eq def
R136371:136380 PL.Imp <> empty def
R136404:136417 PL.Imp <> aeval_preserve thm
R136404:136417 PL.Imp <> aeval_preserve thm
R136447:136458 PL.Imp <> test_le def
R136480:136493 PL.Imp <> aeval_preserve thm
R136480:136493 PL.Imp <> aeval_preserve thm
R136524:136535 PL.Imp <> test_le def
R136569:136580 PL.Imp <> test_le def
R136583:136591 PL.Imp <> full def
R136627:136638 PL.Imp <> test_le def
R136641:136653 PL.Imp <> constant_func def
R136656:136665 PL.Imp <> empty def
R136699:136713 PL.Imp <> complement def
R136749:136763 PL.Imp <> complement def
R136766:136774 PL.Imp <> full def
R136777:136786 PL.Imp <> empty def
R136822:136836 PL.Imp <> complement def
R136839:136847 PL.Imp <> full def
R136850:136859 PL.Imp <> empty def
R136895:136908 PL.Imp <> intersect def
R136944:136957 PL.Imp <> intersect def
R136960:136968 PL.Imp <> full def
R137004:137017 PL.Imp <> intersect def
R137020:137029 PL.Imp <> empty def
prf 137055:137068 <> ceval_preserve
binder 137078:137079 <> c1:1366
binder 137081:137082 <> c2:1367
binder 137084:137086 <> st1:1368
binder 137088:137090 <> st2:1369
R137120:137125 Coq.Init.Logic <> ::type_scope:x_'->'_x not
binder 137133:137135 <> st3:1370
R137154:137157 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R137158:137162 PL.Imp <> ceval def
R137171:137173 PL.Imp <> st3:1370 var
R137167:137169 PL.Imp <> st1:1368 var
R137164:137165 PL.Imp <> c1:1366 var
R137138:137142 PL.Imp <> ceval def
R137151:137153 PL.Imp <> st3:1370 var
R137147:137149 PL.Imp <> st2:1369 var
R137144:137145 PL.Imp <> c2:1367 var
R137095:137099 PL.Imp <> cstep ind
R137111:137111 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R137114:137115 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R137119:137119 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R137112:137113 PL.Imp <> c2:1367 var
R137116:137118 PL.Imp <> st2:1369 var
R137101:137101 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R137104:137105 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R137109:137109 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R137102:137103 PL.Imp <> c1:1366 var
R137106:137108 PL.Imp <> st1:1368 var
R137371:137371 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R137374:137375 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R137379:137379 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R137371:137371 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R137374:137375 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R137379:137379 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R137408:137408 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R137411:137412 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R137416:137416 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R137408:137408 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R137411:137412 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R137416:137416 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R137506:137519 PL.Imp <> aeval_preserve thm
R137506:137519 PL.Imp <> aeval_preserve thm
R137600:137609 PL.Imp <> ceval_CAss thm
R137600:137609 PL.Imp <> ceval_CAss thm
R137600:137609 PL.Imp <> ceval_CAss thm
R137630:137639 PL.Imp <> ceval_CAss thm
R137630:137639 PL.Imp <> ceval_CAss thm
R137630:137639 PL.Imp <> ceval_CAss thm
R137741:137751 PL.Imp <> ceval_CSkip thm
R137741:137751 PL.Imp <> ceval_CSkip thm
R137741:137751 PL.Imp <> ceval_CSkip thm
R137772:137781 PL.Imp <> ceval_CAss thm
R137772:137781 PL.Imp <> ceval_CAss thm
R137772:137781 PL.Imp <> ceval_CAss thm
R137795:137803 PL.Imp <> id def
R137907:137916 PL.Imp <> ceval_CSeq thm
R137907:137916 PL.Imp <> ceval_CSeq thm
R137907:137916 PL.Imp <> ceval_CSeq thm
R137937:137946 PL.Imp <> ceval_CSeq thm
R137937:137946 PL.Imp <> ceval_CSeq thm
R137937:137946 PL.Imp <> ceval_CSeq thm
R137960:137972 PL.Imp <> concat def
R137992:138004 PL.Imp <> concat def
R138078:138080 Coq.Init.Logic <> ::type_scope:x_'='_x not
R138069:138069 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138072:138073 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138077:138077 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138081:138081 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138084:138085 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138089:138089 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138078:138080 Coq.Init.Logic <> ::type_scope:x_'='_x not
R138069:138069 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138072:138073 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138077:138077 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138081:138081 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138084:138085 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138089:138089 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138132:138134 Coq.Init.Logic <> ::type_scope:x_'='_x not
R138122:138122 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138126:138127 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138131:138131 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138135:138135 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138139:138140 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138144:138144 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138132:138134 Coq.Init.Logic <> ::type_scope:x_'='_x not
R138122:138122 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138126:138127 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138131:138131 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138135:138135 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138139:138140 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138144:138144 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R138304:138316 PL.Imp <> concat def
R138319:138327 PL.Imp <> id def
R138465:138473 PL.Imp <> ceval_CIf thm
R138465:138473 PL.Imp <> ceval_CIf thm
R138465:138473 PL.Imp <> ceval_CIf thm
R138494:138502 PL.Imp <> ceval_CIf thm
R138494:138502 PL.Imp <> ceval_CIf thm
R138494:138502 PL.Imp <> ceval_CIf thm
R138516:138521 PL.Imp <> if_sem def
R138541:138546 PL.Imp <> if_sem def
R138560:138571 PL.Imp <> union def
R138585:138597 PL.Imp <> concat def
R138611:138625 PL.Imp <> test_rel def
R138645:138656 PL.Imp <> union def
R138670:138682 PL.Imp <> concat def
R138696:138710 PL.Imp <> test_rel def
R138723:138736 PL.Imp <> beval_preserve thm
R138723:138736 PL.Imp <> beval_preserve thm
R138783:138797 PL.Imp <> complement def
R138817:138831 PL.Imp <> complement def
R138991:138999 PL.Imp <> ceval_CIf thm
R138991:138999 PL.Imp <> ceval_CIf thm
R138991:138999 PL.Imp <> ceval_CIf thm
R139013:139018 PL.Imp <> if_sem def
R139032:139043 PL.Imp <> union def
R139057:139069 PL.Imp <> concat def
R139083:139097 PL.Imp <> test_rel def
R139140:139148 PL.Imp <> full def
R139231:139239 PL.Imp <> ceval_CIf thm
R139231:139239 PL.Imp <> ceval_CIf thm
R139231:139239 PL.Imp <> ceval_CIf thm
R139253:139258 PL.Imp <> if_sem def
R139272:139283 PL.Imp <> union def
R139297:139309 PL.Imp <> concat def
R139323:139337 PL.Imp <> test_rel def
R139381:139395 PL.Imp <> complement def
R139398:139407 PL.Imp <> empty def
R139493:139506 PL.Imp <> loop_unrolling thm
R139493:139506 PL.Imp <> loop_unrolling thm
R139524:139532 PL.Imp <> com_equiv def
R139535:139546 PL.Imp <> equiv def
R139603:139621 PL.Imp DenotationSmallStep <> sec
mod 139632:139644 <> OneBinRel_FOL
def 139659:139669 OneBinRel_FOL logical_var
R139680:139682 Coq.Init.Datatypes <> nat ind
ind 139696:139699 OneBinRel_FOL term
constr 139712:139714 OneBinRel_FOL TId
R139720:139730 PL.Imp OneBinRel_FOL logical_var def
binder 139717:139717 <> v:1373
R139734:139737 PL.Imp <> term:1371 ind
ind 139751:139754 OneBinRel_FOL prop
constr 139767:139769 OneBinRel_FOL PEq
constr 139793:139796 OneBinRel_FOL PRel
constr 139820:139825 OneBinRel_FOL PFalse
constr 139835:139839 OneBinRel_FOL PImpl
constr 139861:139867 OneBinRel_FOL PForall
R139779:139782 PL.Imp OneBinRel_FOL term ind
binder 139772:139773 <> t1:1376
binder 139775:139776 <> t2:1377
R139786:139789 PL.Imp <> prop:1374 ind
R139806:139809 PL.Imp OneBinRel_FOL term ind
binder 139799:139800 <> t1:1378
binder 139802:139803 <> t2:1379
R139813:139816 PL.Imp <> prop:1374 ind
R139828:139831 PL.Imp <> prop:1374 ind
R139847:139850 PL.Imp <> prop:1374 ind
binder 139842:139842 <> P:1380
binder 139844:139844 <> Q:1381
R139854:139857 PL.Imp <> prop:1374 ind
R139873:139883 PL.Imp OneBinRel_FOL logical_var def
binder 139870:139870 <> x:1382
R139890:139893 PL.Imp <> prop:1374 ind
binder 139887:139887 <> P:1383
R139897:139900 PL.Imp <> prop:1374 ind
def 139915:139919 OneBinRel_FOL PTrue
R139922:139925 PL.Imp OneBinRel_FOL prop ind
R139930:139934 PL.Imp OneBinRel_FOL PImpl constr
R139943:139948 PL.Imp OneBinRel_FOL PFalse constr
R139936:139941 PL.Imp OneBinRel_FOL PFalse constr
def 139962:139965 OneBinRel_FOL PNot
R139971:139974 PL.Imp OneBinRel_FOL prop ind
binder 139968:139968 <> P:1384
R139978:139981 PL.Imp OneBinRel_FOL prop ind
R139986:139990 PL.Imp OneBinRel_FOL PImpl constr
R139994:139999 PL.Imp OneBinRel_FOL PFalse constr
R139992:139992 PL.Imp <> P:1384 var
def 140013:140016 OneBinRel_FOL PAnd
R140024:140027 PL.Imp OneBinRel_FOL prop ind
binder 140019:140019 <> P:1385
binder 140021:140021 <> Q:1386
R140031:140034 PL.Imp OneBinRel_FOL prop ind
R140039:140042 PL.Imp OneBinRel_FOL PNot def
R140045:140049 PL.Imp OneBinRel_FOL PImpl constr
R140054:140057 PL.Imp OneBinRel_FOL PNot def
R140059:140059 PL.Imp <> Q:1386 var
R140051:140051 PL.Imp <> P:1385 var
def 140076:140078 OneBinRel_FOL POr
R140086:140089 PL.Imp OneBinRel_FOL prop ind
binder 140081:140081 <> P:1387
binder 140083:140083 <> Q:1388
R140093:140096 PL.Imp OneBinRel_FOL prop ind
R140101:140105 PL.Imp OneBinRel_FOL PImpl constr
R140116:140116 PL.Imp <> Q:1388 var
R140108:140111 PL.Imp OneBinRel_FOL PNot def
R140113:140113 PL.Imp <> P:1387 var
def 140131:140137 OneBinRel_FOL PExists
R140143:140153 PL.Imp OneBinRel_FOL logical_var def
binder 140140:140140 <> x:1389
R140160:140163 PL.Imp OneBinRel_FOL prop ind
binder 140157:140157 <> P:1390
R140167:140170 PL.Imp OneBinRel_FOL prop ind
R140177:140180 PL.Imp OneBinRel_FOL PNot def
R140183:140189 PL.Imp OneBinRel_FOL PForall constr
R140194:140197 PL.Imp OneBinRel_FOL PNot def
R140199:140199 PL.Imp <> P:1390 var
R140191:140191 PL.Imp <> x:1389 var
R140272:140305 PL.Imp OneBinRel_FOL TId constr
R140329:140331 PL.Imp OneBinRel_FOL PEq constr
not 140317:140317 OneBinRel_FOL ::FOL_scope:x_'='_x
R140409:140411 PL.Imp OneBinRel_FOL POr def
not 140392:140392 OneBinRel_FOL ::FOL_scope:x_'OR'_x
R140494:140497 PL.Imp OneBinRel_FOL PAnd def
not 140476:140476 OneBinRel_FOL ::FOL_scope:x_'AND'_x
R140582:140586 PL.Imp OneBinRel_FOL PImpl constr
not 140562:140562 OneBinRel_FOL ::FOL_scope:x_'IMPLY'_x
R140666:140669 PL.Imp OneBinRel_FOL PNot def
not 140652:140652 OneBinRel_FOL ::FOL_scope:'NOT'_x
R140755:140761 PL.Imp OneBinRel_FOL PExists def
not 140731:140731 OneBinRel_FOL ::FOL_scope:'EXISTS'_x_','_x
R140858:140864 PL.Imp OneBinRel_FOL PForall constr
not 140834:140834 OneBinRel_FOL ::FOL_scope:'FORALL'_x_','_x
def 140939:140949 OneBinRel_FOL term_rename
R140957:140967 PL.Imp OneBinRel_FOL logical_var def
binder 140952:140952 <> x:1391
binder 140954:140954 <> y:1392
R140974:140977 PL.Imp OneBinRel_FOL term ind
binder 140971:140971 <> t:1393
R140993:140993 PL.Imp <> t:1393 var
R141006:141008 PL.Imp OneBinRel_FOL TId constr
R141028:141037 Coq.Arith.PeanoNat Nat eq_dec thm
R141039:141039 PL.Imp <> x:1391 var
R141076:141078 PL.Imp OneBinRel_FOL TId constr
R141057:141059 PL.Imp OneBinRel_FOL TId constr
R141061:141061 PL.Imp <> y:1392 var
def 141102:141112 OneBinRel_FOL prop_rename
R141120:141130 PL.Imp OneBinRel_FOL logical_var def
binder 141115:141115 <> x:1395
binder 141117:141117 <> y:1396
R141137:141140 PL.Imp OneBinRel_FOL prop ind
binder 141134:141134 <> d:1397
R141144:141147 PL.Imp OneBinRel_FOL prop ind
R141162:141162 PL.Imp <> d:1397 var
R141175:141177 PL.Imp OneBinRel_FOL PEq constr
R141191:141193 PL.Imp OneBinRel_FOL PEq constr
R141217:141227 PL.Imp OneBinRel_FOL term_rename def
R141231:141231 PL.Imp <> y:1396 var
R141229:141229 PL.Imp <> x:1395 var
R141196:141206 PL.Imp OneBinRel_FOL term_rename def
R141210:141210 PL.Imp <> y:1396 var
R141208:141208 PL.Imp <> x:1395 var
R141243:141246 PL.Imp OneBinRel_FOL PRel constr
R141259:141262 PL.Imp OneBinRel_FOL PRel constr
R141286:141296 PL.Imp OneBinRel_FOL term_rename def
R141300:141300 PL.Imp <> y:1396 var
R141298:141298 PL.Imp <> x:1395 var
R141265:141275 PL.Imp OneBinRel_FOL term_rename def
R141279:141279 PL.Imp <> y:1396 var
R141277:141277 PL.Imp <> x:1395 var
R141312:141316 PL.Imp OneBinRel_FOL PImpl constr
R141328:141332 PL.Imp OneBinRel_FOL PImpl constr
R141356:141366 PL.Imp <> prop_rename:1398 def
R141370:141370 PL.Imp <> y:1396 var
R141368:141368 PL.Imp <> x:1395 var
R141335:141345 PL.Imp <> prop_rename:1398 def
R141349:141349 PL.Imp <> y:1396 var
R141347:141347 PL.Imp <> x:1395 var
R141382:141387 PL.Imp OneBinRel_FOL PFalse constr
R141398:141403 PL.Imp OneBinRel_FOL PFalse constr
R141411:141417 PL.Imp OneBinRel_FOL PForall constr
R141430:141439 Coq.Arith.PeanoNat Nat eq_dec thm
R141441:141441 PL.Imp <> x:1395 var
R141513:141519 PL.Imp OneBinRel_FOL PForall constr
R141525:141535 PL.Imp <> prop_rename:1398 def
R141539:141539 PL.Imp <> y:1396 var
R141537:141537 PL.Imp <> x:1395 var
R141473:141479 PL.Imp OneBinRel_FOL PForall constr
def 141565:141576 OneBinRel_FOL term_max_var
R141582:141585 PL.Imp OneBinRel_FOL term ind
binder 141579:141579 <> t:1400
R141589:141599 PL.Imp OneBinRel_FOL logical_var def
R141614:141614 PL.Imp <> t:1400 var
R141627:141629 PL.Imp OneBinRel_FOL TId constr
def 141657:141668 OneBinRel_FOL prop_max_var
R141674:141677 PL.Imp OneBinRel_FOL prop ind
binder 141671:141671 <> d:1402
R141681:141691 PL.Imp OneBinRel_FOL logical_var def
R141706:141706 PL.Imp <> d:1402 var
R141719:141721 PL.Imp OneBinRel_FOL PEq constr
R141735:141737 Coq.Init.Peano <> max syndef
R141758:141769 PL.Imp OneBinRel_FOL term_max_var def
R141740:141751 PL.Imp OneBinRel_FOL term_max_var def
R141781:141784 PL.Imp OneBinRel_FOL PRel constr
R141797:141799 Coq.Init.Peano <> max syndef
R141820:141831 PL.Imp OneBinRel_FOL term_max_var def
R141802:141813 PL.Imp OneBinRel_FOL term_max_var def
R141843:141848 PL.Imp OneBinRel_FOL PFalse constr
R141859:141859 Coq.Init.Datatypes <> O constr
R141867:141871 PL.Imp OneBinRel_FOL PImpl constr
R141883:141885 Coq.Init.Peano <> max syndef
R141906:141917 PL.Imp <> prop_max_var:1403 def
R141888:141899 PL.Imp <> prop_max_var:1403 def
R141929:141935 PL.Imp OneBinRel_FOL PForall constr
R141945:141947 Coq.Init.Peano <> max syndef
R141953:141964 PL.Imp <> prop_max_var:1403 def
def 141990:141996 OneBinRel_FOL new_var
R142002:142005 PL.Imp OneBinRel_FOL prop ind
binder 141999:141999 <> P:1405
R142012:142015 PL.Imp OneBinRel_FOL term ind
binder 142009:142009 <> t:1406
R142019:142029 PL.Imp OneBinRel_FOL logical_var def
R142036:142036 Coq.Init.Datatypes <> S constr
R142039:142041 Coq.Init.Peano <> max syndef
R142061:142072 PL.Imp OneBinRel_FOL term_max_var def
R142074:142074 PL.Imp <> t:1406 var
R142044:142055 PL.Imp OneBinRel_FOL prop_max_var def
R142057:142057 PL.Imp <> P:1405 var
def 142091:142100 OneBinRel_FOL term_occur
R142106:142116 PL.Imp OneBinRel_FOL logical_var def
binder 142103:142103 <> x:1407
R142123:142126 PL.Imp OneBinRel_FOL term ind
binder 142120:142120 <> t:1408
R142130:142132 Coq.Init.Datatypes <> nat ind
R142147:142147 PL.Imp <> t:1408 var
R142160:142162 PL.Imp OneBinRel_FOL TId constr
R142173:142182 Coq.Arith.PeanoNat Nat eq_dec thm
R142184:142184 PL.Imp <> x:1407 var
R142203:142203 Coq.Init.Datatypes <> O constr
R142194:142194 Coq.Init.Datatypes <> S constr
R142196:142196 Coq.Init.Datatypes <> O constr
def 142224:142238 OneBinRel_FOL prop_free_occur
R142244:142254 PL.Imp OneBinRel_FOL logical_var def
binder 142241:142241 <> x:1410
R142261:142264 PL.Imp OneBinRel_FOL prop ind
binder 142258:142258 <> d:1411
R142268:142270 Coq.Init.Datatypes <> nat ind
R142285:142285 PL.Imp <> d:1411 var
R142298:142300 PL.Imp OneBinRel_FOL PEq constr
R142314:142314 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R142330:142334 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R142350:142350 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R142315:142324 PL.Imp OneBinRel_FOL term_occur def
R142326:142326 PL.Imp <> x:1410 var
R142335:142344 PL.Imp OneBinRel_FOL term_occur def
R142346:142346 PL.Imp <> x:1410 var
R142358:142361 PL.Imp OneBinRel_FOL PRel constr
R142374:142374 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R142390:142394 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R142410:142410 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R142375:142384 PL.Imp OneBinRel_FOL term_occur def
R142386:142386 PL.Imp <> x:1410 var
R142395:142404 PL.Imp OneBinRel_FOL term_occur def
R142406:142406 PL.Imp <> x:1410 var
R142418:142423 PL.Imp OneBinRel_FOL PFalse constr
R142434:142434 Coq.Init.Datatypes <> O constr
R142442:142446 PL.Imp OneBinRel_FOL PImpl constr
R142458:142458 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R142479:142483 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R142504:142504 Coq.Init.Peano <> ::nat_scope:x_'+'_x not
R142459:142473 PL.Imp <> prop_free_occur:1412 def
R142475:142475 PL.Imp <> x:1410 var
R142484:142498 PL.Imp <> prop_free_occur:1412 def
R142500:142500 PL.Imp <> x:1410 var
R142512:142518 PL.Imp OneBinRel_FOL PForall constr
R142531:142540 Coq.Arith.PeanoNat Nat eq_dec thm
R142542:142542 PL.Imp <> x:1410 var
R142603:142617 PL.Imp <> prop_free_occur:1412 def
R142619:142619 PL.Imp <> x:1410 var
R142574:142574 Coq.Init.Datatypes <> O constr
def 142642:142651 OneBinRel_FOL rename_all
R142657:142660 PL.Imp OneBinRel_FOL term ind
binder 142654:142654 <> t:1414
R142667:142670 PL.Imp OneBinRel_FOL prop ind
binder 142664:142664 <> d:1415
R142674:142677 PL.Imp OneBinRel_FOL prop ind
R142692:142692 PL.Imp <> d:1415 var
R142705:142707 PL.Imp OneBinRel_FOL PEq constr
R142720:142722 PL.Imp OneBinRel_FOL PEq constr
R142736:142739 PL.Imp OneBinRel_FOL PRel constr
R142751:142754 PL.Imp OneBinRel_FOL PRel constr
R142768:142773 PL.Imp OneBinRel_FOL PFalse constr
R142783:142788 PL.Imp OneBinRel_FOL PFalse constr
R142796:142800 PL.Imp OneBinRel_FOL PImpl constr
R142811:142815 PL.Imp OneBinRel_FOL PImpl constr
R142836:142845 PL.Imp <> rename_all:1416 def
R142847:142847 PL.Imp <> t:1414 var
R142818:142827 PL.Imp <> rename_all:1416 def
R142829:142829 PL.Imp <> t:1414 var
R142859:142865 PL.Imp OneBinRel_FOL PForall constr
R142880:142889 PL.Imp OneBinRel_FOL term_occur def
R142893:142893 PL.Imp <> t:1414 var
R142926:142926 Coq.Init.Datatypes <> O constr
R142931:142937 PL.Imp OneBinRel_FOL PForall constr
R142942:142951 PL.Imp <> rename_all:1416 def
R142953:142953 PL.Imp <> t:1414 var
R142989:142995 PL.Imp OneBinRel_FOL PForall constr
R143093:143103 PL.Imp OneBinRel_FOL prop_rename def
R143207:143216 PL.Imp <> rename_all:1416 def
R143218:143218 PL.Imp <> t:1414 var
R143143:143149 PL.Imp OneBinRel_FOL new_var def
R143168:143168 PL.Imp <> t:1414 var
R143152:143161 PL.Imp <> rename_all:1416 def
R143163:143163 PL.Imp <> t:1414 var
R143031:143037 PL.Imp OneBinRel_FOL new_var def
R143056:143056 PL.Imp <> t:1414 var
R143040:143049 PL.Imp <> rename_all:1416 def
R143051:143051 PL.Imp <> t:1414 var
def 143273:143280 OneBinRel_FOL term_sub
R143286:143296 PL.Imp OneBinRel_FOL logical_var def
binder 143283:143283 <> x:1418
R143304:143307 PL.Imp OneBinRel_FOL term ind
binder 143300:143301 <> tx:1419
R143314:143317 PL.Imp OneBinRel_FOL term ind
binder 143311:143311 <> t:1420
R143333:143333 PL.Imp <> t:1420 var
R143346:143348 PL.Imp OneBinRel_FOL TId constr
R143368:143377 Coq.Arith.PeanoNat Nat eq_dec thm
R143379:143379 PL.Imp <> x:1418 var
R143415:143417 PL.Imp OneBinRel_FOL TId constr
R143398:143399 PL.Imp <> tx:1419 var
def 143441:143449 OneBinRel_FOL naive_sub
R143455:143465 PL.Imp OneBinRel_FOL logical_var def
binder 143452:143452 <> x:1422
R143473:143476 PL.Imp OneBinRel_FOL term ind
binder 143469:143470 <> tx:1423
R143483:143486 PL.Imp OneBinRel_FOL prop ind
binder 143480:143480 <> d:1424
R143490:143493 PL.Imp OneBinRel_FOL prop ind
R143508:143508 PL.Imp <> d:1424 var
R143521:143523 PL.Imp OneBinRel_FOL PEq constr
R143536:143538 PL.Imp OneBinRel_FOL PEq constr
R143560:143567 PL.Imp OneBinRel_FOL term_sub def
R143571:143572 PL.Imp <> tx:1423 var
R143569:143569 PL.Imp <> x:1422 var
R143541:143548 PL.Imp OneBinRel_FOL term_sub def
R143552:143553 PL.Imp <> tx:1423 var
R143550:143550 PL.Imp <> x:1422 var
R143584:143587 PL.Imp OneBinRel_FOL PRel constr
R143599:143602 PL.Imp OneBinRel_FOL PRel constr
R143624:143631 PL.Imp OneBinRel_FOL term_sub def
R143635:143636 PL.Imp <> tx:1423 var
R143633:143633 PL.Imp <> x:1422 var
R143605:143612 PL.Imp OneBinRel_FOL term_sub def
R143616:143617 PL.Imp <> tx:1423 var
R143614:143614 PL.Imp <> x:1422 var
R143648:143653 PL.Imp OneBinRel_FOL PFalse constr
R143663:143668 PL.Imp OneBinRel_FOL PFalse constr
R143676:143680 PL.Imp OneBinRel_FOL PImpl constr
R143691:143695 PL.Imp OneBinRel_FOL PImpl constr
R143718:143726 PL.Imp <> naive_sub:1425 def
R143730:143731 PL.Imp <> tx:1423 var
R143728:143728 PL.Imp <> x:1422 var
R143698:143706 PL.Imp <> naive_sub:1425 def
R143710:143711 PL.Imp <> tx:1423 var
R143708:143708 PL.Imp <> x:1422 var
R143743:143749 PL.Imp OneBinRel_FOL PForall constr
R143758:143764 PL.Imp OneBinRel_FOL PForall constr
R143769:143777 PL.Imp <> naive_sub:1425 def
R143781:143782 PL.Imp <> tx:1423 var
R143779:143779 PL.Imp <> x:1422 var
R143766:143766 PL.Imp <> x:1422 var
def 143808:143815 OneBinRel_FOL prop_sub
R143821:143831 PL.Imp OneBinRel_FOL logical_var def
binder 143818:143818 <> x:1427
R143839:143842 PL.Imp OneBinRel_FOL term ind
binder 143835:143836 <> tx:1428
R143849:143852 PL.Imp OneBinRel_FOL prop ind
binder 143846:143846 <> P:1429
R143856:143859 PL.Imp OneBinRel_FOL prop ind
R143866:143874 PL.Imp OneBinRel_FOL naive_sub def
R143882:143891 PL.Imp OneBinRel_FOL rename_all def
R143896:143896 PL.Imp <> P:1429 var
R143893:143894 PL.Imp <> tx:1428 var
R143878:143879 PL.Imp <> tx:1428 var
R143876:143876 PL.Imp <> x:1427 var
R143930:143937 PL.Imp OneBinRel_FOL prop_sub def
not 143910:143910 OneBinRel_FOL ::FOL_scope:x_'['_x_'|->'_x_']'
ind 144009:144016 OneBinRel_FOL provable
constr 144037:144044 OneBinRel_FOL PImply_1
constr 144092:144099 OneBinRel_FOL PImply_2
constr 144196:144207 OneBinRel_FOL Modus_ponens
constr 144285:144295 OneBinRel_FOL PFalse_elim
constr 144340:144354 OneBinRel_FOL Excluded_middle
constr 144395:144406 OneBinRel_FOL PForall_elim
constr 144474:144487 OneBinRel_FOL PForall_intros
constr 144600:144607 OneBinRel_FOL PEq_refl
constr 144643:144649 OneBinRel_FOL PEq_sub
R144023:144026 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R144019:144022 PL.Imp OneBinRel_FOL prop ind
binder 144054:144054 <> P:1432
binder 144056:144056 <> Q:1433
R144059:144066 PL.Imp <> provable:1430 ind
R144070:144077 PL.Imp OneBinRel_FOL ::FOL_scope:x_'IMPLY'_x not
R144087:144087 PL.Imp OneBinRel_FOL ::FOL_scope:x_'IMPLY'_x not
R144069:144069 PL.Imp <> P:1432 var
R144079:144085 PL.Imp OneBinRel_FOL ::FOL_scope:x_'IMPLY'_x not
R144078:144078 PL.Imp <> Q:1433 var
R144086:144086 PL.Imp <> P:1432 var
binder 144109:144109 <> P:1434
binder 144111:144111 <> Q:1435
binder 144113:144113 <> R:1436
R144116:144123 PL.Imp <> provable:1430 ind
R144129:144129 PL.Imp OneBinRel_FOL ::FOL_scope:x_'IMPLY'_x not
R144147:144158 PL.Imp OneBinRel_FOL ::FOL_scope:x_'IMPLY'_x not
R144131:144137 PL.Imp OneBinRel_FOL ::FOL_scope:x_'IMPLY'_x not
R144130:144130 PL.Imp <> P:1434 var
R144139:144145 PL.Imp OneBinRel_FOL ::FOL_scope:x_'IMPLY'_x not
R144138:144138 PL.Imp <> Q:1435 var
R144146:144146 PL.Imp <> R:1436 var
R144159:144159 PL.Imp OneBinRel_FOL ::FOL_scope:x_'IMPLY'_x not
R144169:144181 PL.Imp OneBinRel_FOL ::FOL_scope:x_'IMPLY'_x not
R144191:144191 PL.Imp OneBinRel_FOL ::FOL_scope:x_'IMPLY'_x not
R144161:144167 PL.Imp OneBinRel_FOL ::FOL_scope:x_'IMPLY'_x not
R144160:144160 PL.Imp <> P:1434 var
R144168:144168 PL.Imp <> Q:1435 var
R144183:144189 PL.Imp OneBinRel_FOL ::FOL_scope:x_'IMPLY'_x not
R144182:144182 PL.Imp <> P:1434 var
R144190:144190 PL.Imp <> R:1436 var
binder 144217:144217 <> P:1437
binder 144219:144219 <> Q:1438
R144246:144253 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R144264:144271 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R144272:144279 PL.Imp <> provable:1430 ind
R144281:144281 PL.Imp <> Q:1438 var
R144254:144261 PL.Imp <> provable:1430 ind
R144263:144263 PL.Imp <> P:1437 var
R144226:144233 PL.Imp <> provable:1430 ind
R144237:144243 PL.Imp OneBinRel_FOL ::FOL_scope:x_'IMPLY'_x not
R144236:144236 PL.Imp <> P:1437 var
R144244:144244 PL.Imp <> Q:1438 var
binder 144305:144305 <> P:1439
R144312:144319 PL.Imp <> provable:1430 ind
R144328:144334 PL.Imp OneBinRel_FOL ::FOL_scope:x_'IMPLY'_x not
R144322:144327 PL.Imp OneBinRel_FOL PFalse constr
R144335:144335 PL.Imp <> P:1439 var
binder 144364:144364 <> P:1440
R144371:144378 PL.Imp <> provable:1430 ind
R144386:144389 PL.Imp OneBinRel_FOL ::FOL_scope:x_'OR'_x not
R144381:144384 PL.Imp OneBinRel_FOL ::FOL_scope:'NOT'_x not
R144385:144385 PL.Imp <> P:1440 var
R144390:144390 PL.Imp <> P:1440 var
binder 144416:144416 <> x:1441
binder 144418:144418 <> t:1442
binder 144420:144420 <> P:1443
R144427:144434 PL.Imp <> provable:1430 ind
R144437:144437 PL.Imp OneBinRel_FOL ::FOL_scope:x_'IMPLY'_x not
R144449:144457 PL.Imp OneBinRel_FOL ::FOL_scope:x_'IMPLY'_x not
R144469:144469 PL.Imp OneBinRel_FOL ::FOL_scope:x_'IMPLY'_x not
R144438:144444 PL.Imp OneBinRel_FOL ::FOL_scope:'FORALL'_x_','_x not
R144446:144447 PL.Imp OneBinRel_FOL ::FOL_scope:'FORALL'_x_','_x not
R144445:144445 PL.Imp <> x:1441 var
R144448:144448 PL.Imp <> P:1443 var
R144459:144460 PL.Imp OneBinRel_FOL ::FOL_scope:x_'['_x_'|->'_x_']' not
R144462:144466 PL.Imp OneBinRel_FOL ::FOL_scope:x_'['_x_'|->'_x_']' not
R144468:144468 PL.Imp OneBinRel_FOL ::FOL_scope:x_'['_x_'|->'_x_']' not
R144461:144461 PL.Imp <> x:1441 var
R144467:144467 PL.Imp <> t:1442 var
R144458:144458 PL.Imp <> P:1443 var
binder 144497:144497 <> x:1444
binder 144499:144499 <> P:1445
binder 144501:144501 <> Q:1446
R144531:144538 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R144559:144566 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R144567:144574 PL.Imp <> provable:1430 ind
R144578:144584 PL.Imp OneBinRel_FOL ::FOL_scope:x_'IMPLY'_x not
R144577:144577 PL.Imp <> P:1445 var
R144585:144591 PL.Imp OneBinRel_FOL ::FOL_scope:'FORALL'_x_','_x not
R144593:144594 PL.Imp OneBinRel_FOL ::FOL_scope:'FORALL'_x_','_x not
R144592:144592 PL.Imp <> x:1444 var
R144595:144595 PL.Imp <> Q:1446 var
R144539:144546 PL.Imp <> provable:1430 ind
R144550:144556 PL.Imp OneBinRel_FOL ::FOL_scope:x_'IMPLY'_x not
R144549:144549 PL.Imp <> P:1445 var
R144557:144557 PL.Imp <> Q:1446 var
R144527:144529 Coq.Init.Logic <> ::type_scope:x_'='_x not
R144508:144522 PL.Imp OneBinRel_FOL prop_free_occur def
R144526:144526 PL.Imp <> P:1445 var
R144524:144524 PL.Imp <> x:1444 var
R144530:144530 Coq.Init.Datatypes <> O constr
binder 144617:144617 <> t:1447
R144624:144631 PL.Imp <> provable:1430 ind
R144635:144637 PL.Imp OneBinRel_FOL ::FOL_scope:x_'='_x not
R144634:144634 PL.Imp <> t:1447 var
R144638:144638 PL.Imp <> t:1447 var
binder 144659:144659 <> P:1448
binder 144661:144661 <> x:1449
binder 144663:144663 <> t:1450
binder 144665:144666 <> t':1451
R144673:144680 PL.Imp <> provable:1430 ind
R144689:144695 PL.Imp OneBinRel_FOL ::FOL_scope:x_'IMPLY'_x not
R144684:144686 PL.Imp OneBinRel_FOL ::FOL_scope:x_'='_x not
R144683:144683 PL.Imp <> t:1450 var
R144687:144688 PL.Imp <> t':1451 var
R144706:144712 PL.Imp OneBinRel_FOL ::FOL_scope:x_'IMPLY'_x not
R144697:144697 PL.Imp OneBinRel_FOL ::FOL_scope:x_'['_x_'|->'_x_']' not
R144699:144703 PL.Imp OneBinRel_FOL ::FOL_scope:x_'['_x_'|->'_x_']' not
R144705:144705 PL.Imp OneBinRel_FOL ::FOL_scope:x_'['_x_'|->'_x_']' not
R144698:144698 PL.Imp <> x:1449 var
R144704:144704 PL.Imp <> t:1450 var
R144696:144696 PL.Imp <> P:1448 var
R144714:144714 PL.Imp OneBinRel_FOL ::FOL_scope:x_'['_x_'|->'_x_']' not
R144716:144720 PL.Imp OneBinRel_FOL ::FOL_scope:x_'['_x_'|->'_x_']' not
R144723:144723 PL.Imp OneBinRel_FOL ::FOL_scope:x_'['_x_'|->'_x_']' not
R144715:144715 PL.Imp <> x:1449 var
R144721:144722 PL.Imp <> t':1451 var
R144713:144713 PL.Imp <> P:1448 var
R144750:144757 PL.Imp OneBinRel_FOL provable ind
not 144737:144737 OneBinRel_FOL ::FOL_scope:'|--'_x
ind 145012:145017 OneBinRel_FOL Interp
constr 145030:145041 OneBinRel_FOL Build_Interp
binder 145044:145044 <> D:1454
R145060:145063 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R145065:145068 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R145064:145064 PL.Imp <> D:1454 var
R145059:145059 PL.Imp <> D:1454 var
binder 145054:145056 <> Rel:1455
R145091:145094 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R145095:145095 PL.Imp <> D:1454 var
R145080:145090 PL.Imp OneBinRel_FOL logical_var def
binder 145076:145077 <> La:1456
R145100:145105 PL.Imp <> Interp:1452 ind
def 145120:145128 OneBinRel_FOL domain_of
R145134:145139 PL.Imp OneBinRel_FOL Interp ind
binder 145131:145131 <> J:1457
R145159:145159 PL.Imp <> J:1457 var
R145170:145181 PL.Imp OneBinRel_FOL Build_Interp constr
def 145213:145218 OneBinRel_FOL Rel_of
R145224:145229 PL.Imp OneBinRel_FOL Interp ind
binder 145221:145221 <> J:1459
R145244:145247 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R145259:145262 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R145248:145256 PL.Imp OneBinRel_FOL domain_of def
R145258:145258 PL.Imp <> J:1459 var
R145233:145241 PL.Imp OneBinRel_FOL domain_of def
R145243:145243 PL.Imp <> J:1459 var
R145279:145279 PL.Imp <> J:1459 var
R145352:145359 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R145414:145421 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R145366:145367 PL.Imp <> J0:1460 var
R145380:145391 PL.Imp OneBinRel_FOL Build_Interp constr
R145304:145305 PL.Imp <> J0:1460 var
R145318:145329 PL.Imp OneBinRel_FOL Build_Interp constr
R145438:145449 PL.Imp OneBinRel_FOL Build_Interp constr
def 145486:145493 OneBinRel_FOL Lassn_of
R145499:145504 PL.Imp OneBinRel_FOL Interp ind
binder 145496:145496 <> J:1463
R145519:145522 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R145523:145531 PL.Imp OneBinRel_FOL domain_of def
R145533:145533 PL.Imp <> J:1463 var
R145508:145518 PL.Imp OneBinRel_FOL logical_var def
R145546:145546 PL.Imp <> J:1463 var
R145576:145584 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R145591:145592 PL.Imp <> J0:1464 var
R145605:145616 PL.Imp OneBinRel_FOL Build_Interp constr
R145565:145575 PL.Imp OneBinRel_FOL logical_var def
R145651:145662 PL.Imp OneBinRel_FOL Build_Interp constr
def 145698:145709 OneBinRel_FOL Lassn_update
binder 145712:145712 <> D:1466
R145737:145740 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R145741:145741 PL.Imp <> D:1466 var
R145726:145736 PL.Imp OneBinRel_FOL logical_var def
binder 145722:145723 <> La:1467
R145748:145758 PL.Imp OneBinRel_FOL logical_var def
binder 145745:145745 <> x:1468
R145765:145765 PL.Imp <> D:1466 var
binder 145762:145762 <> v:1469
R145780:145783 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R145784:145784 PL.Imp <> D:1466 var
R145769:145779 PL.Imp OneBinRel_FOL logical_var def
binder 145795:145795 <> y:1470
R145804:145813 Coq.Arith.PeanoNat Nat eq_dec thm
R145817:145817 PL.Imp <> y:1470 var
R145815:145815 PL.Imp <> x:1468 var
R145832:145833 PL.Imp <> La:1467 var
R145835:145835 PL.Imp <> y:1470 var
R145825:145825 PL.Imp <> v:1469 var
def 145850:145863 OneBinRel_FOL Interp_Lupdate
R145869:145874 PL.Imp OneBinRel_FOL Interp ind
binder 145866:145866 <> J:1471
R145881:145891 PL.Imp OneBinRel_FOL logical_var def
binder 145878:145878 <> x:1472
R145906:145909 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R145910:145915 PL.Imp OneBinRel_FOL Interp ind
R145895:145903 PL.Imp OneBinRel_FOL domain_of def
R145905:145905 PL.Imp <> J:1471 var
R145928:145928 PL.Imp <> J:1471 var
R145939:145950 PL.Imp OneBinRel_FOL Build_Interp constr
binder 145973:145973 <> v:1474
R145978:145989 PL.Imp OneBinRel_FOL Build_Interp constr
R145998:146009 PL.Imp OneBinRel_FOL Lassn_update def
R146016:146016 PL.Imp <> v:1474 var
R146014:146014 PL.Imp <> x:1472 var
def 146038:146048 OneBinRel_FOL term_denote
R146054:146059 PL.Imp OneBinRel_FOL Interp ind
binder 146051:146051 <> J:1475
R146066:146069 PL.Imp OneBinRel_FOL term ind
binder 146063:146063 <> t:1476
R146073:146081 PL.Imp OneBinRel_FOL domain_of def
R146083:146083 PL.Imp <> J:1475 var
R146098:146098 PL.Imp <> t:1476 var
R146111:146113 PL.Imp OneBinRel_FOL TId constr
R146120:146127 PL.Imp OneBinRel_FOL Lassn_of def
R146129:146129 PL.Imp <> J:1475 var
def 146152:146160 OneBinRel_FOL satisfies
R146166:146171 PL.Imp OneBinRel_FOL Interp ind
binder 146163:146163 <> J:1478
R146178:146181 PL.Imp OneBinRel_FOL prop ind
binder 146175:146175 <> d:1479
R146203:146203 PL.Imp <> d:1479 var
R146216:146218 PL.Imp OneBinRel_FOL PEq constr
R146248:146250 Coq.Init.Logic <> ::type_scope:x_'='_x not
R146232:146242 PL.Imp OneBinRel_FOL term_denote def
R146244:146244 PL.Imp <> J:1478 var
R146251:146261 PL.Imp OneBinRel_FOL term_denote def
R146263:146263 PL.Imp <> J:1478 var
R146275:146278 PL.Imp OneBinRel_FOL PRel constr
R146290:146295 PL.Imp OneBinRel_FOL Rel_of def
R146319:146329 PL.Imp OneBinRel_FOL term_denote def
R146331:146331 PL.Imp <> J:1478 var
R146300:146310 PL.Imp OneBinRel_FOL term_denote def
R146312:146312 PL.Imp <> J:1478 var
R146297:146297 PL.Imp <> J:1478 var
R146343:146348 PL.Imp OneBinRel_FOL PFalse constr
R146358:146362 Coq.Init.Logic <> False ind
R146370:146374 PL.Imp OneBinRel_FOL PImpl constr
R146403:146407 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R146422:146422 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R146385:146387 Coq.Init.Logic <> ::type_scope:'~'_x not
R146402:146402 Coq.Init.Logic <> ::type_scope:'~'_x not
R146388:146396 PL.Imp <> satisfies:1480 def
R146398:146398 PL.Imp <> J:1478 var
R146408:146416 PL.Imp <> satisfies:1480 def
R146418:146418 PL.Imp <> J:1478 var
R146430:146436 PL.Imp OneBinRel_FOL PForall constr
binder 146452:146452 <> v:1482
R146455:146463 PL.Imp <> satisfies:1480 def
R146466:146479 PL.Imp OneBinRel_FOL Interp_Lupdate def
R146485:146485 PL.Imp <> v:1482 var
R146481:146481 PL.Imp <> J:1478 var
R146525:146533 PL.Imp OneBinRel_FOL satisfies def
not 146509:146509 OneBinRel_FOL ::FOL_scope:x_'|=='_x
def 146625:146629 OneBinRel_FOL valid
R146635:146638 PL.Imp OneBinRel_FOL prop ind
binder 146632:146632 <> P:1483
R146662:146667 PL.Imp OneBinRel_FOL Interp ind
binder 146659:146659 <> J:1484
R146671:146675 PL.Imp OneBinRel_FOL ::FOL_scope:x_'|=='_x not
R146670:146670 PL.Imp <> J:1484 var
R146676:146676 PL.Imp <> P:1483 var
R146702:146706 PL.Imp OneBinRel_FOL valid def
not 146689:146689 OneBinRel_FOL ::FOL_scope:'|=='_x
def 146767:146771 OneBinRel_FOL sound
R146794:146797 PL.Imp OneBinRel_FOL prop ind
binder 146791:146791 <> P:1485
R146805:146808 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R146809:146812 PL.Imp OneBinRel_FOL ::FOL_scope:'|=='_x not
R146813:146813 PL.Imp <> P:1485 var
R146800:146803 PL.Imp OneBinRel_FOL ::FOL_scope:'|--'_x not
R146804:146804 PL.Imp <> P:1485 var
def 146828:146835 OneBinRel_FOL complete
R146858:146861 PL.Imp OneBinRel_FOL prop ind
binder 146855:146855 <> P:1486
R146869:146872 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R146873:146876 PL.Imp OneBinRel_FOL ::FOL_scope:'|--'_x not
R146877:146877 PL.Imp <> P:1486 var
R146864:146867 PL.Imp OneBinRel_FOL ::FOL_scope:'|=='_x not
R146868:146868 PL.Imp <> P:1486 var
prf 146887:146899 OneBinRel_FOL prop_sub_spec
binder 146909:146909 <> J:1487
R146915:146918 PL.Imp OneBinRel_FOL prop ind
binder 146912:146912 <> P:1488
R146925:146935 PL.Imp OneBinRel_FOL logical_var def
binder 146922:146922 <> x:1489
R146942:146945 PL.Imp OneBinRel_FOL term ind
binder 146939:146939 <> t:1490
R146968:146974 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R146952:146956 PL.Imp OneBinRel_FOL ::FOL_scope:x_'|=='_x not
R146951:146951 PL.Imp <> J:1487 var
R146958:146959 PL.Imp OneBinRel_FOL ::FOL_scope:x_'['_x_'|->'_x_']' not
R146961:146965 PL.Imp OneBinRel_FOL ::FOL_scope:x_'['_x_'|->'_x_']' not
R146967:146967 PL.Imp OneBinRel_FOL ::FOL_scope:x_'['_x_'|->'_x_']' not
R146960:146960 PL.Imp <> x:1489 var
R146966:146966 PL.Imp <> t:1490 var
R146957:146957 PL.Imp <> P:1488 var
R147011:147015 PL.Imp OneBinRel_FOL ::FOL_scope:x_'|=='_x not
R146975:146988 PL.Imp OneBinRel_FOL Interp_Lupdate def
R146995:147005 PL.Imp OneBinRel_FOL term_denote def
R147009:147009 PL.Imp <> t:1490 var
R147007:147007 PL.Imp <> J:1487 var
R146992:146992 PL.Imp <> x:1489 var
R146990:146990 PL.Imp <> J:1487 var
R147016:147016 PL.Imp <> P:1488 var
prf 147036:147051 OneBinRel_FOL no_occ_satisfies
binder 147061:147061 <> J:1491
binder 147063:147063 <> P:1492
binder 147065:147065 <> x:1493
binder 147067:147067 <> v:1494
R147095:147101 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R147140:147140 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R147109:147113 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R147103:147107 PL.Imp OneBinRel_FOL ::FOL_scope:x_'|=='_x not
R147102:147102 PL.Imp <> J:1491 var
R147108:147108 PL.Imp <> P:1492 var
R147134:147138 PL.Imp OneBinRel_FOL ::FOL_scope:x_'|=='_x not
R147114:147127 PL.Imp OneBinRel_FOL Interp_Lupdate def
R147133:147133 PL.Imp <> v:1494 var
R147131:147131 PL.Imp <> x:1493 var
R147129:147129 PL.Imp <> J:1491 var
R147139:147139 PL.Imp <> P:1492 var
R147091:147093 Coq.Init.Logic <> ::type_scope:x_'='_x not
R147072:147086 PL.Imp OneBinRel_FOL prop_free_occur def
R147090:147090 PL.Imp <> P:1492 var
R147088:147088 PL.Imp <> x:1493 var
R147094:147094 Coq.Init.Datatypes <> O constr
R147158:147170 PL.Imp OneBinRel_FOL <> mod
